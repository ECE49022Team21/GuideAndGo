
stm32-deploy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065cc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  080067cc  080067cc  000167cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069e0  080069e0  00021654  2**0
                  CONTENTS
  4 .ARM          00000008  080069e0  080069e0  000169e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069e8  080069e8  00021654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069e8  080069e8  000169e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069ec  080069ec  000169ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001654  20000000  080069f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20001658  08008044  00021658  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200018f8  08008044  000218f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00021654  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd5c  00000000  00000000  00021682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000290b  00000000  00000000  000313de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00033cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  00034820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029105  00000000  00000000  00035238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f325  00000000  00000000  0005e33d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4b81  00000000  00000000  0006d662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001621e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003360  00000000  00000000  00162234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20001658 	.word	0x20001658
 800021c:	00000000 	.word	0x00000000
 8000220:	080067b4 	.word	0x080067b4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000165c 	.word	0x2000165c
 800023c:	080067b4 	.word	0x080067b4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <__io_putchar>:
#include "helper_functions.h"
#include "navigation.h"
#include "custom_typedef.h"

PUTCHAR_PROTOTYPE
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
#if DO_PRINT_STATEMENTS
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005ec:	1d39      	adds	r1, r7, #4
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f2:	2201      	movs	r2, #1
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <__io_putchar+0x20>)
 80005f6:	f004 f805 	bl	8004604 <HAL_UART_Transmit>
#endif
  return ch;
 80005fa:	687b      	ldr	r3, [r7, #4]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200016fc 	.word	0x200016fc

08000608 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart3);
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <__io_getchar+0x38>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2208      	movs	r2, #8
 8000618:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800061a:	1df9      	adds	r1, r7, #7
 800061c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000620:	2201      	movs	r2, #1
 8000622:	4807      	ldr	r0, [pc, #28]	; (8000640 <__io_getchar+0x38>)
 8000624:	f004 f871 	bl	800470a <HAL_UART_Receive>
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000628:	1df9      	adds	r1, r7, #7
 800062a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800062e:	2201      	movs	r2, #1
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <__io_getchar+0x38>)
 8000632:	f003 ffe7 	bl	8004604 <HAL_UART_Transmit>
  return ch;
 8000636:	79fb      	ldrb	r3, [r7, #7]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200016fc 	.word	0x200016fc
 8000644:	00000000 	.word	0x00000000

08000648 <print_float>:

void print_float(float_t num) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	ed87 0b00 	vstr	d0, [r7]
	int dec;
	printf("%d.", (int) num);
 8000652:	ed97 7b00 	vldr	d7, [r7]
 8000656:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800065a:	ee17 1a90 	vmov	r1, s15
 800065e:	4814      	ldr	r0, [pc, #80]	; (80006b0 <print_float+0x68>)
 8000660:	f004 ffda 	bl	8005618 <iprintf>
	dec = (num - (int) num)*1000000;
 8000664:	ed97 7b00 	vldr	d7, [r7]
 8000668:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800066c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000670:	ed97 6b00 	vldr	d6, [r7]
 8000674:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000678:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006a8 <print_float+0x60>
 800067c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000680:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000684:	ee17 3a90 	vmov	r3, s15
 8000688:	60fb      	str	r3, [r7, #12]
	if (dec < 0) {
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	2b00      	cmp	r3, #0
 800068e:	da02      	bge.n	8000696 <print_float+0x4e>
		dec = 0-dec;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	425b      	negs	r3, r3
 8000694:	60fb      	str	r3, [r7, #12]
	}
	printf("%d", dec);
 8000696:	68f9      	ldr	r1, [r7, #12]
 8000698:	4806      	ldr	r0, [pc, #24]	; (80006b4 <print_float+0x6c>)
 800069a:	f004 ffbd 	bl	8005618 <iprintf>
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	00000000 	.word	0x00000000
 80006ac:	412e8480 	.word	0x412e8480
 80006b0:	080067cc 	.word	0x080067cc
 80006b4:	080067d0 	.word	0x080067d0

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b09c      	sub	sp, #112	; 0x70
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006be:	f000 fa29 	bl	8000b14 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c2:	f001 fecc 	bl	800245e <HAL_Init>
  char ch;
  char buffer[100];
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c6:	f000 f83d 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ca:	f000 f91f 	bl	800090c <MX_GPIO_Init>
  MX_DMA_Init();
 80006ce:	f000 f8ff 	bl	80008d0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006d2:	f000 f89d 	bl	8000810 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80006d6:	f000 f8cb 	bl	8000870 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  lwgps_init(&gps);
 80006da:	4813      	ldr	r0, [pc, #76]	; (8000728 <main+0x70>)
 80006dc:	f001 fa5d 	bl	8001b9a <lwgps_init>
  //Enables scanf and printf to work
  setvbuf(stdin, NULL, _IONBF, 0);
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <main+0x74>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	6858      	ldr	r0, [r3, #4]
 80006e6:	2300      	movs	r3, #0
 80006e8:	2202      	movs	r2, #2
 80006ea:	2100      	movs	r1, #0
 80006ec:	f004 ffc2 	bl	8005674 <setvbuf>
  //test_runs();
  HAL_UART_Receive_DMA(&huart2, nav_rx_data, UART2_RX_DMA_BUFFER_SIZE);
 80006f0:	220a      	movs	r2, #10
 80006f2:	490f      	ldr	r1, [pc, #60]	; (8000730 <main+0x78>)
 80006f4:	480f      	ldr	r0, [pc, #60]	; (8000734 <main+0x7c>)
 80006f6:	f004 f8cc 	bl	8004892 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("\n\r");
 80006fa:	480f      	ldr	r0, [pc, #60]	; (8000738 <main+0x80>)
 80006fc:	f004 ff8c 	bl	8005618 <iprintf>

  int destination = 34;
 8000700:	2322      	movs	r3, #34	; 0x22
 8000702:	66fb      	str	r3, [r7, #108]	; 0x6c
  int fix_status;
  printf("Waiting for GPS Fix...\n\r");
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <main+0x84>)
 8000706:	f004 ff87 	bl	8005618 <iprintf>
  do {
	  fix_status = navigation_main_init(destination);
 800070a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fb12 	bl	8001d38 <navigation_main_init>
 8000714:	66b8      	str	r0, [r7, #104]	; 0x68
  } while(fix_status == 0); // should check for number of satellites? 6 seems reasonable
 8000716:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0f6      	beq.n	800070a <main+0x52>
  printf("Now entering main loop\n\r");
 800071c:	4808      	ldr	r0, [pc, #32]	; (8000740 <main+0x88>)
 800071e:	f004 ff7b 	bl	8005618 <iprintf>
  while (1)
  {
    navigation_main_loop();
 8000722:	f001 fb9d 	bl	8001e60 <navigation_main_loop>
 8000726:	e7fc      	b.n	8000722 <main+0x6a>
 8000728:	20001838 	.word	0x20001838
 800072c:	200015f0 	.word	0x200015f0
 8000730:	200018b0 	.word	0x200018b0
 8000734:	20001674 	.word	0x20001674
 8000738:	080067d4 	.word	0x080067d4
 800073c:	080067d8 	.word	0x080067d8
 8000740:	080067f4 	.word	0x080067f4

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	2234      	movs	r2, #52	; 0x34
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f004 ff58 	bl	8005608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000768:	f002 fda2 	bl	80032b0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076c:	4b26      	ldr	r3, [pc, #152]	; (8000808 <SystemClock_Config+0xc4>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a25      	ldr	r2, [pc, #148]	; (8000808 <SystemClock_Config+0xc4>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b23      	ldr	r3, [pc, #140]	; (8000808 <SystemClock_Config+0xc4>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <SystemClock_Config+0xc8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800078c:	4a1f      	ldr	r2, [pc, #124]	; (800080c <SystemClock_Config+0xc8>)
 800078e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b1d      	ldr	r3, [pc, #116]	; (800080c <SystemClock_Config+0xc8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a0:	2302      	movs	r3, #2
 80007a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a8:	2310      	movs	r3, #16
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 fddb 	bl	8003370 <HAL_RCC_OscConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007c0:	f000 f9d4 	bl	8000b6c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007c4:	f002 fd84 	bl	80032d0 <HAL_PWREx_EnableOverDrive>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007ce:	f000 f9cd 	bl	8000b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d2:	230f      	movs	r3, #15
 80007d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	2103      	movs	r1, #3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 f86c 	bl	80038cc <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007fa:	f000 f9b7 	bl	8000b6c <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3750      	adds	r7, #80	; 0x50
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <MX_USART2_UART_Init+0x5c>)
 8000818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_USART2_UART_Init+0x58>)
 800081c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000820:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_USART2_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART2_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART2_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000854:	f003 fe88 	bl	8004568 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800085e:	f000 f985 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20001674 	.word	0x20001674
 800086c:	40004400 	.word	0x40004400

08000870 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <MX_USART3_UART_Init+0x5c>)
 8000878:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 80008b4:	f003 fe58 	bl	8004568 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008be:	f000 f955 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200016fc 	.word	0x200016fc
 80008cc:	40004800 	.word	0x40004800

080008d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_DMA_Init+0x38>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <MX_DMA_Init+0x38>)
 80008dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_DMA_Init+0x38>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	2010      	movs	r0, #16
 80008f4:	f001 feeb 	bl	80026ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008f8:	2010      	movs	r0, #16
 80008fa:	f001 ff04 	bl	8002706 <HAL_NVIC_EnableIRQ>

}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	; 0x30
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	4b77      	ldr	r3, [pc, #476]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a76      	ldr	r2, [pc, #472]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b74      	ldr	r3, [pc, #464]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	61bb      	str	r3, [r7, #24]
 8000938:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	4b71      	ldr	r3, [pc, #452]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a70      	ldr	r2, [pc, #448]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b6e      	ldr	r3, [pc, #440]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	4b6b      	ldr	r3, [pc, #428]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a6a      	ldr	r2, [pc, #424]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b68      	ldr	r3, [pc, #416]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	4b65      	ldr	r3, [pc, #404]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a64      	ldr	r2, [pc, #400]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b62      	ldr	r3, [pc, #392]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000982:	4b5f      	ldr	r3, [pc, #380]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a5e      	ldr	r2, [pc, #376]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 8000988:	f043 0308 	orr.w	r3, r3, #8
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b5c      	ldr	r3, [pc, #368]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0308 	and.w	r3, r3, #8
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800099a:	4b59      	ldr	r3, [pc, #356]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a58      	ldr	r2, [pc, #352]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 80009a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b56      	ldr	r3, [pc, #344]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009b8:	4852      	ldr	r0, [pc, #328]	; (8000b04 <MX_GPIO_Init+0x1f8>)
 80009ba:	f002 fc5f 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2140      	movs	r1, #64	; 0x40
 80009c2:	4851      	ldr	r0, [pc, #324]	; (8000b08 <MX_GPIO_Init+0x1fc>)
 80009c4:	f002 fc5a 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	484b      	ldr	r0, [pc, #300]	; (8000b0c <MX_GPIO_Init+0x200>)
 80009e0:	f002 faa0 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009e4:	2332      	movs	r3, #50	; 0x32
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f4:	230b      	movs	r3, #11
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4843      	ldr	r0, [pc, #268]	; (8000b0c <MX_GPIO_Init+0x200>)
 8000a00:	f002 fa90 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a04:	2386      	movs	r3, #134	; 0x86
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a14:	230b      	movs	r3, #11
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	483c      	ldr	r0, [pc, #240]	; (8000b10 <MX_GPIO_Init+0x204>)
 8000a20:	f002 fa80 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a24:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4831      	ldr	r0, [pc, #196]	; (8000b04 <MX_GPIO_Init+0x1f8>)
 8000a3e:	f002 fa71 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a54:	230b      	movs	r3, #11
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4829      	ldr	r0, [pc, #164]	; (8000b04 <MX_GPIO_Init+0x1f8>)
 8000a60:	f002 fa60 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a64:	2340      	movs	r3, #64	; 0x40
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4823      	ldr	r0, [pc, #140]	; (8000b08 <MX_GPIO_Init+0x1fc>)
 8000a7c:	f002 fa52 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	481d      	ldr	r0, [pc, #116]	; (8000b08 <MX_GPIO_Init+0x1fc>)
 8000a94:	f002 fa46 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = USB_SOF_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000a98:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aaa:	230a      	movs	r3, #10
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4816      	ldr	r0, [pc, #88]	; (8000b10 <MX_GPIO_Init+0x204>)
 8000ab6:	f002 fa35 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4810      	ldr	r0, [pc, #64]	; (8000b10 <MX_GPIO_Init+0x204>)
 8000ad0:	f002 fa28 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ad4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ae6:	230b      	movs	r3, #11
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_GPIO_Init+0x1fc>)
 8000af2:	f002 fa17 	bl	8002f24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af6:	bf00      	nop
 8000af8:	3730      	adds	r7, #48	; 0x30
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020400 	.word	0x40020400
 8000b08:	40021800 	.word	0x40021800
 8000b0c:	40020800 	.word	0x40020800
 8000b10:	40020000 	.word	0x40020000

08000b14 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b26:	f001 fe09 	bl	800273c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b36:	231f      	movs	r3, #31
 8000b38:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b3a:	2387      	movs	r3, #135	; 0x87
 8000b3c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b42:	2300      	movs	r3, #0
 8000b44:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b46:	2301      	movs	r3, #1
 8000b48:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b56:	463b      	mov	r3, r7
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f001 fe27 	bl	80027ac <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b5e:	2004      	movs	r0, #4
 8000b60:	f001 fe04 	bl	800276c <HAL_MPU_Enable>

}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <Error_Handler+0x8>
	...

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <HAL_MspInit+0x44>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_MspInit+0x44>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_MspInit+0x44>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_MspInit+0x44>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <HAL_MspInit+0x44>)
 8000b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_MspInit+0x44>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b0b0      	sub	sp, #192	; 0xc0
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	2290      	movs	r2, #144	; 0x90
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f004 fd11 	bl	8005608 <memset>
  if(huart->Instance==USART2)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a5a      	ldr	r2, [pc, #360]	; (8000d54 <HAL_UART_MspInit+0x194>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d16a      	bne.n	8000cc6 <HAL_UART_MspInit+0x106>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f003 f88b 	bl	8003d18 <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c08:	f7ff ffb0 	bl	8000b6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c0c:	4b52      	ldr	r3, [pc, #328]	; (8000d58 <HAL_UART_MspInit+0x198>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	4a51      	ldr	r2, [pc, #324]	; (8000d58 <HAL_UART_MspInit+0x198>)
 8000c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c16:	6413      	str	r3, [r2, #64]	; 0x40
 8000c18:	4b4f      	ldr	r3, [pc, #316]	; (8000d58 <HAL_UART_MspInit+0x198>)
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c20:	61bb      	str	r3, [r7, #24]
 8000c22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c24:	4b4c      	ldr	r3, [pc, #304]	; (8000d58 <HAL_UART_MspInit+0x198>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	4a4b      	ldr	r2, [pc, #300]	; (8000d58 <HAL_UART_MspInit+0x198>)
 8000c2a:	f043 0308 	orr.w	r3, r3, #8
 8000c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c30:	4b49      	ldr	r3, [pc, #292]	; (8000d58 <HAL_UART_MspInit+0x198>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	f003 0308 	and.w	r3, r3, #8
 8000c38:	617b      	str	r3, [r7, #20]
 8000c3a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000c3c:	2360      	movs	r3, #96	; 0x60
 8000c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c54:	2307      	movs	r3, #7
 8000c56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c5e:	4619      	mov	r1, r3
 8000c60:	483e      	ldr	r0, [pc, #248]	; (8000d5c <HAL_UART_MspInit+0x19c>)
 8000c62:	f002 f95f 	bl	8002f24 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000c66:	4b3e      	ldr	r3, [pc, #248]	; (8000d60 <HAL_UART_MspInit+0x1a0>)
 8000c68:	4a3e      	ldr	r2, [pc, #248]	; (8000d64 <HAL_UART_MspInit+0x1a4>)
 8000c6a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000c6c:	4b3c      	ldr	r3, [pc, #240]	; (8000d60 <HAL_UART_MspInit+0x1a0>)
 8000c6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c72:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c74:	4b3a      	ldr	r3, [pc, #232]	; (8000d60 <HAL_UART_MspInit+0x1a0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7a:	4b39      	ldr	r3, [pc, #228]	; (8000d60 <HAL_UART_MspInit+0x1a0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c80:	4b37      	ldr	r3, [pc, #220]	; (8000d60 <HAL_UART_MspInit+0x1a0>)
 8000c82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c86:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c88:	4b35      	ldr	r3, [pc, #212]	; (8000d60 <HAL_UART_MspInit+0x1a0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c8e:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <HAL_UART_MspInit+0x1a0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000c94:	4b32      	ldr	r3, [pc, #200]	; (8000d60 <HAL_UART_MspInit+0x1a0>)
 8000c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c9a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c9c:	4b30      	ldr	r3, [pc, #192]	; (8000d60 <HAL_UART_MspInit+0x1a0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ca2:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <HAL_UART_MspInit+0x1a0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ca8:	482d      	ldr	r0, [pc, #180]	; (8000d60 <HAL_UART_MspInit+0x1a0>)
 8000caa:	f001 fdc3 	bl	8002834 <HAL_DMA_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8000cb4:	f7ff ff5a 	bl	8000b6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a29      	ldr	r2, [pc, #164]	; (8000d60 <HAL_UART_MspInit+0x1a0>)
 8000cbc:	675a      	str	r2, [r3, #116]	; 0x74
 8000cbe:	4a28      	ldr	r2, [pc, #160]	; (8000d60 <HAL_UART_MspInit+0x1a0>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cc4:	e041      	b.n	8000d4a <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART3)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a27      	ldr	r2, [pc, #156]	; (8000d68 <HAL_UART_MspInit+0x1a8>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d13c      	bne.n	8000d4a <HAL_UART_MspInit+0x18a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 f81a 	bl	8003d18 <HAL_RCCEx_PeriphCLKConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_UART_MspInit+0x12e>
      Error_Handler();
 8000cea:	f7ff ff3f 	bl	8000b6c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cee:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <HAL_UART_MspInit+0x198>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a19      	ldr	r2, [pc, #100]	; (8000d58 <HAL_UART_MspInit+0x198>)
 8000cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_UART_MspInit+0x198>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_UART_MspInit+0x198>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <HAL_UART_MspInit+0x198>)
 8000d0c:	f043 0308 	orr.w	r3, r3, #8
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_UART_MspInit+0x198>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0308 	and.w	r3, r3, #8
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d42:	4619      	mov	r1, r3
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <HAL_UART_MspInit+0x19c>)
 8000d46:	f002 f8ed 	bl	8002f24 <HAL_GPIO_Init>
}
 8000d4a:	bf00      	nop
 8000d4c:	37c0      	adds	r7, #192	; 0xc0
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40004400 	.word	0x40004400
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020c00 	.word	0x40020c00
 8000d60:	20001784 	.word	0x20001784
 8000d64:	40026088 	.word	0x40026088
 8000d68:	40004800 	.word	0x40004800

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f001 fb8e 	bl	80024d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <DMA1_Stream5_IRQHandler+0x10>)
 8000dc6:	f001 fe43 	bl	8002a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20001784 	.word	0x20001784

08000dd4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	e00a      	b.n	8000dfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000de6:	f7ff fc0f 	bl	8000608 <__io_getchar>
 8000dea:	4601      	mov	r1, r0
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	60ba      	str	r2, [r7, #8]
 8000df2:	b2ca      	uxtb	r2, r1
 8000df4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	dbf0      	blt.n	8000de6 <_read+0x12>
  }

  return len;
 8000e04:	687b      	ldr	r3, [r7, #4]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	e009      	b.n	8000e34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	1c5a      	adds	r2, r3, #1
 8000e24:	60ba      	str	r2, [r7, #8]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fbdb 	bl	80005e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	3301      	adds	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dbf1      	blt.n	8000e20 <_write+0x12>
  }
  return len;
 8000e3c:	687b      	ldr	r3, [r7, #4]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <_close>:

int _close(int file)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e6e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <_isatty>:

int _isatty(int file)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb8:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <_sbrk+0x5c>)
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <_sbrk+0x60>)
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <_sbrk+0x64>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <_sbrk+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d207      	bcs.n	8000ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee0:	f004 fb68 	bl	80055b4 <__errno>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eee:	e009      	b.n	8000f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <_sbrk+0x64>)
 8000f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20080000 	.word	0x20080000
 8000f10:	00000400 	.word	0x00000400
 8000f14:	200017e4 	.word	0x200017e4
 8000f18:	200018f8 	.word	0x200018f8

08000f1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <SystemInit+0x20>)
 8000f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <SystemInit+0x20>)
 8000f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <is_empty>:
#include <stdio.h>

int path[MAX_PATH_LENGTH];

// Min Heap using array implementation of binary tree
int is_empty(int size) {
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
    if (size >= 0) {
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db01      	blt.n	8000f52 <is_empty+0x12>
        return 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <is_empty+0x14>
    } else {
        return 1;
 8000f52:	2301      	movs	r3, #1
    }
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <parent>:

int parent(int heap_index) {
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
    return (heap_index - 1) / 2;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	da00      	bge.n	8000f72 <parent+0x12>
 8000f70:	3301      	adds	r3, #1
 8000f72:	105b      	asrs	r3, r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <left_child>:

int left_child(int heap_index) {
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    return 2*heap_index + 1;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	3301      	adds	r3, #1
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <right_child>:

int right_child(int heap_index) {
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
    return 2*heap_index + 2;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	005b      	lsls	r3, r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <swap>:

void swap(uint8_t* heap, int first_heap_index, int second_heap_index) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b087      	sub	sp, #28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
    uint8_t temp = heap[first_heap_index];
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	75fb      	strb	r3, [r7, #23]
    heap[first_heap_index] = heap[second_heap_index];
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	441a      	add	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	68f9      	ldr	r1, [r7, #12]
 8000fd4:	440b      	add	r3, r1
 8000fd6:	7812      	ldrb	r2, [r2, #0]
 8000fd8:	701a      	strb	r2, [r3, #0]
    heap[second_heap_index] = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	7dfa      	ldrb	r2, [r7, #23]
 8000fe2:	701a      	strb	r2, [r3, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	371c      	adds	r7, #28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <shift_up>:

void shift_up(uint8_t* heap, int heap_index, float_t* dist, int* node_heap_index) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
    int parent_index = parent(heap_index);
 8000ffe:	68b8      	ldr	r0, [r7, #8]
 8001000:	f7ff ffae 	bl	8000f60 <parent>
 8001004:	6178      	str	r0, [r7, #20]
    while (heap_index > 0 && dist[heap[parent_index]] > dist[heap[heap_index]]) {
 8001006:	e01c      	b.n	8001042 <shift_up+0x52>
        node_heap_index[heap[parent_index]] = heap_index;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	4413      	add	r3, r2
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	4413      	add	r3, r2
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	601a      	str	r2, [r3, #0]
        node_heap_index[heap[heap_index]] = parent_index;
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	4413      	add	r3, r2
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	601a      	str	r2, [r3, #0]
        swap(heap, parent_index, heap_index);
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	6979      	ldr	r1, [r7, #20]
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f7ff ffbf 	bl	8000fb4 <swap>
        heap_index = parent_index;
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	60bb      	str	r3, [r7, #8]
        parent_index = parent(heap_index);
 800103a:	68b8      	ldr	r0, [r7, #8]
 800103c:	f7ff ff90 	bl	8000f60 <parent>
 8001040:	6178      	str	r0, [r7, #20]
    while (heap_index > 0 && dist[heap[parent_index]] > dist[heap[heap_index]]) {
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	2b00      	cmp	r3, #0
 8001046:	dd16      	ble.n	8001076 <shift_up+0x86>
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	4413      	add	r3, r2
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	ed93 6b00 	vldr	d6, [r3]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	4413      	add	r3, r2
 8001068:	ed93 7b00 	vldr	d7, [r3]
 800106c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001074:	dcc8      	bgt.n	8001008 <shift_up+0x18>
    }
}
 8001076:	bf00      	nop
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <shift_down>:

void shift_down(uint8_t* heap, int size, int heap_index, float_t* dist, int* node_heap_index) {
 800107e:	b580      	push	{r7, lr}
 8001080:	b088      	sub	sp, #32
 8001082:	af00      	add	r7, sp, #0
 8001084:	60f8      	str	r0, [r7, #12]
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	603b      	str	r3, [r7, #0]
    int loop;
    do {
        loop = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
        int max_index = heap_index;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	61bb      	str	r3, [r7, #24]
        int l = left_child(heap_index);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff73 	bl	8000f80 <left_child>
 800109a:	6178      	str	r0, [r7, #20]
        int r = right_child(heap_index);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff7c 	bl	8000f9a <right_child>
 80010a2:	6138      	str	r0, [r7, #16]
        if (r <= size && dist[heap[r]] < dist[heap[max_index]]) {
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	dc19      	bgt.n	80010e0 <shift_down+0x62>
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	4413      	add	r3, r2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	4413      	add	r3, r2
 80010ba:	ed93 6b00 	vldr	d6, [r3]
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	ed93 7b00 	vldr	d7, [r3]
 80010d0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80010d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d8:	d502      	bpl.n	80010e0 <shift_down+0x62>
            max_index = r;
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	e01c      	b.n	800111a <shift_down+0x9c>
        } else if (l <= size && dist[heap[l]] < dist[heap[max_index]]) {
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dc18      	bgt.n	800111a <shift_down+0x9c>
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	4413      	add	r3, r2
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	4413      	add	r3, r2
 80010f6:	ed93 6b00 	vldr	d6, [r3]
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	4413      	add	r3, r2
 8001108:	ed93 7b00 	vldr	d7, [r3]
 800110c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001114:	d501      	bpl.n	800111a <shift_down+0x9c>
            max_index = l;
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	61bb      	str	r3, [r7, #24]
        } // NOTE: have to check r before l so is complete binary tree
        if (heap_index != max_index) {
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	429a      	cmp	r2, r3
 8001120:	d01a      	beq.n	8001158 <shift_down+0xda>
            node_heap_index[heap[heap_index]] = max_index;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	4413      	add	r3, r2
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800112e:	4413      	add	r3, r2
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	601a      	str	r2, [r3, #0]
            node_heap_index[heap[max_index]] = heap_index;
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4413      	add	r3, r2
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001140:	4413      	add	r3, r2
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
            swap(heap, heap_index, max_index);
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f7ff ff32 	bl	8000fb4 <swap>
            heap_index = max_index;
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	607b      	str	r3, [r7, #4]
            loop = 1;
 8001154:	2301      	movs	r3, #1
 8001156:	61fb      	str	r3, [r7, #28]
        }
    } while (loop);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d196      	bne.n	800108c <shift_down+0xe>
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <insert>:

void insert(uint8_t* heap, int* size, uint8_t node, float_t* dist, int* node_heap_index) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	4613      	mov	r3, r2
 8001176:	71fb      	strb	r3, [r7, #7]
    *size = *size + 1;
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	1c5a      	adds	r2, r3, #1
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	601a      	str	r2, [r3, #0]
    heap[*size] = node;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	79fa      	ldrb	r2, [r7, #7]
 800118e:	701a      	strb	r2, [r3, #0]
    node_heap_index[node] = *size;
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4413      	add	r3, r2
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	6812      	ldr	r2, [r2, #0]
 800119c:	601a      	str	r2, [r3, #0]
    shift_up(heap, *size, dist, node_heap_index);
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	6819      	ldr	r1, [r3, #0]
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f7ff ff22 	bl	8000ff0 <shift_up>
}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <extract_min>:

uint8_t extract_min(uint8_t* heap, int* size, float_t* dist, int* node_heap_index) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	603b      	str	r3, [r7, #0]
    // WARNING: does not check if empty
    uint8_t result = heap[0];
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	75fb      	strb	r3, [r7, #23]
    heap[0] = heap[*size];
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4413      	add	r3, r2
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	701a      	strb	r2, [r3, #0]
    node_heap_index[result] = -1;
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011e4:	601a      	str	r2, [r3, #0]
    node_heap_index[heap[0]] = 0;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
    *size = *size - 1;
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	1e5a      	subs	r2, r3, #1
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	601a      	str	r2, [r3, #0]
    shift_down(heap, *size, 0, dist, node_heap_index);
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	6819      	ldr	r1, [r3, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f7ff ff37 	bl	800107e <shift_down>
    return result;
 8001210:	7dfb      	ldrb	r3, [r7, #23]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <get_min>:

uint8_t get_min(uint8_t* heap) {
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
    return heap[0];
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	781b      	ldrb	r3, [r3, #0]
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <get_path>:


void get_path(int* prev, int destination) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PATH_LENGTH; i++) {
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
 8001242:	e008      	b.n	8001256 <get_path+0x22>
        path[i] = -1;
 8001244:	4a43      	ldr	r2, [pc, #268]	; (8001354 <get_path+0x120>)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800124c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < MAX_PATH_LENGTH; i++) {
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	3301      	adds	r3, #1
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	2b13      	cmp	r3, #19
 800125a:	ddf3      	ble.n	8001244 <get_path+0x10>
    }
    int u = destination;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	61bb      	str	r3, [r7, #24]
    // WARNING: no check if prev is defined or destination = source
    int i = MAX_PATH_LENGTH - 1;
 8001260:	2313      	movs	r3, #19
 8001262:	617b      	str	r3, [r7, #20]
    while (prev[u] != -1) {
 8001264:	e00d      	b.n	8001282 <get_path+0x4e>
        path[i] = u;
 8001266:	493b      	ldr	r1, [pc, #236]	; (8001354 <get_path+0x120>)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        i--;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	3b01      	subs	r3, #1
 8001274:	617b      	str	r3, [r7, #20]
        u = prev[u];
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
    while (prev[u] != -1) {
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001290:	d1e9      	bne.n	8001266 <get_path+0x32>
    }
    path[i] = u; // prev of source is -1
 8001292:	4930      	ldr	r1, [pc, #192]	; (8001354 <get_path+0x120>)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if (i != 0) {
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d02a      	beq.n	80012f8 <get_path+0xc4>
        int j;
        for (j = 0; j < MAX_PATH_LENGTH; j++) {
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	e010      	b.n	80012ca <get_path+0x96>
            path[j] = path[i];
 80012a8:	4a2a      	ldr	r2, [pc, #168]	; (8001354 <get_path+0x120>)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012b0:	4928      	ldr	r1, [pc, #160]	; (8001354 <get_path+0x120>)
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            i++;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3301      	adds	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
            if (i == MAX_PATH_LENGTH) {
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2b14      	cmp	r3, #20
 80012c2:	d006      	beq.n	80012d2 <get_path+0x9e>
        for (j = 0; j < MAX_PATH_LENGTH; j++) {
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	3301      	adds	r3, #1
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	2b13      	cmp	r3, #19
 80012ce:	ddeb      	ble.n	80012a8 <get_path+0x74>
 80012d0:	e000      	b.n	80012d4 <get_path+0xa0>
                break;
 80012d2:	bf00      	nop
            }
        }
        j++;
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	3301      	adds	r3, #1
 80012d8:	613b      	str	r3, [r7, #16]
        for (int k = j; k < MAX_PATH_LENGTH; k++) {
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	e008      	b.n	80012f2 <get_path+0xbe>
            path[k] = -1;
 80012e0:	4a1c      	ldr	r2, [pc, #112]	; (8001354 <get_path+0x120>)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int k = j; k < MAX_PATH_LENGTH; k++) {
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3301      	adds	r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2b13      	cmp	r3, #19
 80012f6:	ddf3      	ble.n	80012e0 <get_path+0xac>
        }
    }
    printf("Path: \n\r");
 80012f8:	4817      	ldr	r0, [pc, #92]	; (8001358 <get_path+0x124>)
 80012fa:	f004 f98d 	bl	8005618 <iprintf>
    for (int i = 0; i < MAX_PATH_LENGTH; i++) {
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	e01b      	b.n	800133c <get_path+0x108>
        if (path[i] == -1) {
 8001304:	4a13      	ldr	r2, [pc, #76]	; (8001354 <get_path+0x120>)
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001310:	d018      	beq.n	8001344 <get_path+0x110>
            break;
        }
        printf("%d: %s\n\r", path[i], landmarks[path[i]].name);
 8001312:	4a10      	ldr	r2, [pc, #64]	; (8001354 <get_path+0x120>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800131a:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <get_path+0x120>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001322:	2258      	movs	r2, #88	; 0x58
 8001324:	fb02 f303 	mul.w	r3, r2, r3
 8001328:	3310      	adds	r3, #16
 800132a:	4a0c      	ldr	r2, [pc, #48]	; (800135c <get_path+0x128>)
 800132c:	4413      	add	r3, r2
 800132e:	461a      	mov	r2, r3
 8001330:	480b      	ldr	r0, [pc, #44]	; (8001360 <get_path+0x12c>)
 8001332:	f004 f971 	bl	8005618 <iprintf>
    for (int i = 0; i < MAX_PATH_LENGTH; i++) {
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	3301      	adds	r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2b13      	cmp	r3, #19
 8001340:	dde0      	ble.n	8001304 <get_path+0xd0>
 8001342:	e000      	b.n	8001346 <get_path+0x112>
            break;
 8001344:	bf00      	nop
    }
    printf("\n\r");
 8001346:	4807      	ldr	r0, [pc, #28]	; (8001364 <get_path+0x130>)
 8001348:	f004 f966 	bl	8005618 <iprintf>
}
 800134c:	bf00      	nop
 800134e:	3720      	adds	r7, #32
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200017e8 	.word	0x200017e8
 8001358:	08006810 	.word	0x08006810
 800135c:	20000788 	.word	0x20000788
 8001360:	0800681c 	.word	0x0800681c
 8001364:	08006828 	.word	0x08006828

08001368 <dijkstra>:
        printf("%d, ", prev[i]);
    }
    printf("\n");
}

void dijkstra(int source, int destination) {
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
 800136e:	af02      	add	r7, sp, #8
 8001370:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001374:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8001378:	6018      	str	r0, [r3, #0]
 800137a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800137e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8001382:	6019      	str	r1, [r3, #0]
    // Priority Queue
    uint8_t min_heap[LEN_LANDMARKS];
    int size = -1; // WARNING: size starts at -1 so size 0 has 1 element!
 8001384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001388:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    float_t dist[LEN_LANDMARKS];
    int prev[LEN_LANDMARKS];

    int node_heap_index[LEN_LANDMARKS];

    for (int i = 0; i < LEN_LANDMARKS; i++) {
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8001392:	e02a      	b.n	80013ea <dijkstra+0x82>
        dist[i] = MAX_DISTANCE;
 8001394:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001398:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 800139c:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	18d1      	adds	r1, r2, r3
 80013a4:	a37f      	add	r3, pc, #508	; (adr r3, 80015a4 <dijkstra+0x23c>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	e9c1 2300 	strd	r2, r3, [r1]
        prev[i] = -1; // WARNING: -1 is casted to unsigned!
 80013ae:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80013b2:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80013b6:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 80013ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        insert(min_heap, &size, i, dist, node_heap_index);
 80013c2:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 80013cc:	f507 7123 	add.w	r1, r7, #652	; 0x28c
 80013d0:	f507 7024 	add.w	r0, r7, #656	; 0x290
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	4623      	mov	r3, r4
 80013dc:	f7ff fec4 	bl	8001168 <insert>
    for (int i = 0; i < LEN_LANDMARKS; i++) {
 80013e0:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80013e4:	3301      	adds	r3, #1
 80013e6:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 80013ea:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80013ee:	2b27      	cmp	r3, #39	; 0x27
 80013f0:	ddd0      	ble.n	8001394 <dijkstra+0x2c>
    }

    dist[source] = 0; // WARNING: every time update distance, have to update heap
 80013f2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80013f6:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 80013fa:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80013fe:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	18d1      	adds	r1, r2, r3
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	e9c1 2300 	strd	r2, r3, [r1]
    shift_up(min_heap, node_heap_index[source], dist, node_heap_index);
 8001414:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001418:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800141c:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8001420:	f5a2 7233 	sub.w	r2, r2, #716	; 0x2cc
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001432:	f507 7024 	add.w	r0, r7, #656	; 0x290
 8001436:	f7ff fddb 	bl	8000ff0 <shift_up>

    //print_heap(min_heap, size);
    //print_node_heap_index(node_heap_index);

    while (!(is_empty(size))) {
 800143a:	e094      	b.n	8001566 <dijkstra+0x1fe>
        uint8_t u = get_min(min_heap);
 800143c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff feea 	bl	800121a <get_min>
 8001446:	4603      	mov	r3, r0
 8001448:	f887 32c7 	strb.w	r3, [r7, #711]	; 0x2c7
        if (u == destination) {
 800144c:	f897 32c7 	ldrb.w	r3, [r7, #711]	; 0x2c7
 8001450:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8001454:	f5a2 7234 	sub.w	r2, r2, #720	; 0x2d0
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	f000 808d 	beq.w	800157a <dijkstra+0x212>
            break; //WARNING: does this update prev?
        }
        extract_min(min_heap, &size, dist, node_heap_index); //NOTE: ignore return
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001468:	f507 7123 	add.w	r1, r7, #652	; 0x28c
 800146c:	f507 7024 	add.w	r0, r7, #656	; 0x290
 8001470:	f7ff fea0 	bl	80011b4 <extract_min>
        //print_heap(min_heap, size);
        //print_node_heap_index(node_heap_index);
        for (int i = 0; i < landmarks[u].list_len; i++) {
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 800147a:	e067      	b.n	800154c <dijkstra+0x1e4>
            int v = landmarks[u].adj_list[i];
 800147c:	f897 32c7 	ldrb.w	r3, [r7, #711]	; 0x2c7
 8001480:	4a47      	ldr	r2, [pc, #284]	; (80015a0 <dijkstra+0x238>)
 8001482:	2158      	movs	r1, #88	; 0x58
 8001484:	fb01 f303 	mul.w	r3, r1, r3
 8001488:	4413      	add	r3, r2
 800148a:	3344      	adds	r3, #68	; 0x44
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8001492:	4413      	add	r3, r2
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
            float_t alt = dist[u] + landmarks[u].dist_list[i];
 800149a:	f897 32c7 	ldrb.w	r3, [r7, #711]	; 0x2c7
 800149e:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 80014a2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4413      	add	r3, r2
 80014aa:	ed93 6b00 	vldr	d6, [r3]
 80014ae:	f897 32c7 	ldrb.w	r3, [r7, #711]	; 0x2c7
 80014b2:	4a3b      	ldr	r2, [pc, #236]	; (80015a0 <dijkstra+0x238>)
 80014b4:	2158      	movs	r1, #88	; 0x58
 80014b6:	fb01 f303 	mul.w	r3, r1, r3
 80014ba:	4413      	add	r3, r2
 80014bc:	3348      	adds	r3, #72	; 0x48
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	4413      	add	r3, r2
 80014c8:	ed93 7b00 	vldr	d7, [r3]
 80014cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014d0:	ed87 7bae 	vstr	d7, [r7, #696]	; 0x2b8
            if (alt < dist[v]) {
 80014d4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80014d8:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 80014dc:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4413      	add	r3, r2
 80014e4:	ed93 7b00 	vldr	d7, [r3]
 80014e8:	ed97 6bae 	vldr	d6, [r7, #696]	; 0x2b8
 80014ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	d525      	bpl.n	8001542 <dijkstra+0x1da>
                dist[v] = alt;
 80014f6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80014fa:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 80014fe:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	18d1      	adds	r1, r2, r3
 8001506:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800150a:	e9c1 2300 	strd	r2, r3, [r1]
                prev[v] = u;
 800150e:	f897 12c7 	ldrb.w	r1, [r7, #711]	; 0x2c7
 8001512:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001516:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800151a:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 800151e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                shift_up(min_heap, node_heap_index[v], dist, node_heap_index);
 8001522:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001526:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800152a:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 800152e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800153a:	f507 7024 	add.w	r0, r7, #656	; 0x290
 800153e:	f7ff fd57 	bl	8000ff0 <shift_up>
        for (int i = 0; i < landmarks[u].list_len; i++) {
 8001542:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8001546:	3301      	adds	r3, #1
 8001548:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 800154c:	f897 32c7 	ldrb.w	r3, [r7, #711]	; 0x2c7
 8001550:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <dijkstra+0x238>)
 8001552:	2158      	movs	r1, #88	; 0x58
 8001554:	fb01 f303 	mul.w	r3, r1, r3
 8001558:	4413      	add	r3, r2
 800155a:	3340      	adds	r3, #64	; 0x40
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8001562:	429a      	cmp	r2, r3
 8001564:	d88a      	bhi.n	800147c <dijkstra+0x114>
    while (!(is_empty(size))) {
 8001566:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fce8 	bl	8000f40 <is_empty>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	f43f af62 	beq.w	800143c <dijkstra+0xd4>
 8001578:	e000      	b.n	800157c <dijkstra+0x214>
            break; //WARNING: does this update prev?
 800157a:	bf00      	nop
        //print_heap(min_heap, size);
        //print_node_heap_index(node_heap_index);
        //print_prev(prev);
        //print_dist(dist);
    }
    get_path(prev, destination);
 800157c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001580:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8001584:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001588:	6819      	ldr	r1, [r3, #0]
 800158a:	4610      	mov	r0, r2
 800158c:	f7ff fe52 	bl	8001234 <get_path>
}
 8001590:	bf00      	nop
 8001592:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
 8001596:	46bd      	mov	sp, r7
 8001598:	bd90      	pop	{r4, r7, pc}
 800159a:	bf00      	nop
 800159c:	f3af 8000 	nop.w
 80015a0:	20000788 	.word	0x20000788
 80015a4:	00000000 	.word	0x00000000
 80015a8:	412e8480 	.word	0x412e8480

080015ac <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d106      	bne.n	80015ce <prv_parse_number+0x22>
        t = gh->p.term_str;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3329      	adds	r3, #41	; 0x29
 80015c4:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {} /* Strip leading spaces */
 80015c6:	e002      	b.n	80015ce <prv_parse_number+0x22>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <prv_parse_number+0x30>
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b20      	cmp	r3, #32
 80015da:	d0f5      	beq.n	80015c8 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b2d      	cmp	r3, #45	; 0x2d
 80015e2:	d104      	bne.n	80015ee <prv_parse_number+0x42>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	3301      	adds	r3, #1
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <prv_parse_number+0x44>
 80015ee:	2300      	movs	r3, #0
 80015f0:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 80015f2:	e00d      	b.n	8001610 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	461a      	mov	r2, r3
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	3b30      	subs	r3, #48	; 0x30
 8001606:	4413      	add	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d007      	beq.n	8001626 <prv_parse_number+0x7a>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b2f      	cmp	r3, #47	; 0x2f
 800161c:	d903      	bls.n	8001626 <prv_parse_number+0x7a>
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b39      	cmp	r3, #57	; 0x39
 8001624:	d9e6      	bls.n	80015f4 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8001626:	7afb      	ldrb	r3, [r7, #11]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d002      	beq.n	8001632 <prv_parse_number+0x86>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	425b      	negs	r3, r3
 8001630:	e000      	b.n	8001634 <prv_parse_number+0x88>
 8001632:	68fb      	ldr	r3, [r7, #12]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
    lwgps_float_t value = (lwgps_float_t)0, power = (lwgps_float_t)1;
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	4b3f      	ldr	r3, [pc, #252]	; (8001758 <prv_parse_float_number+0x118>)
 800165c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int sign = 1;
 8001660:	2301      	movs	r3, #1
 8001662:	60fb      	str	r3, [r7, #12]

    if (t == NULL) {
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d106      	bne.n	8001678 <prv_parse_float_number+0x38>
        t = gh->p.term_str;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3329      	adds	r3, #41	; 0x29
 800166e:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {} /* Strip leading spaces */
 8001670:	e002      	b.n	8001678 <prv_parse_float_number+0x38>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	3301      	adds	r3, #1
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <prv_parse_float_number+0x46>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b20      	cmp	r3, #32
 8001684:	d0f5      	beq.n	8001672 <prv_parse_float_number+0x32>

    if (*t == '-') { /* Check sign */
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b2d      	cmp	r3, #45	; 0x2d
 800168c:	d11a      	bne.n	80016c4 <prv_parse_float_number+0x84>
        sign = -1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001692:	60fb      	str	r3, [r7, #12]
        ++t;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*t)) { /* Convert main part */
 800169a:	e013      	b.n	80016c4 <prv_parse_float_number+0x84>
        value = value * (lwgps_float_t)10 + CTN(*t);
 800169c:	ed97 7b06 	vldr	d7, [r7, #24]
 80016a0:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80016a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	3b30      	subs	r3, #48	; 0x30
 80016ae:	ee07 3a90 	vmov	s15, r3
 80016b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80016b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016ba:	ed87 7b06 	vstr	d7, [r7, #24]
        ++t;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	603b      	str	r3, [r7, #0]
    while (CIN(*t)) { /* Convert main part */
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b2f      	cmp	r3, #47	; 0x2f
 80016ca:	d903      	bls.n	80016d4 <prv_parse_float_number+0x94>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b39      	cmp	r3, #57	; 0x39
 80016d2:	d9e3      	bls.n	800169c <prv_parse_float_number+0x5c>
    }
    if (*t == '.') { /* Skip the dot character */
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b2e      	cmp	r3, #46	; 0x2e
 80016da:	d11f      	bne.n	800171c <prv_parse_float_number+0xdc>
        ++t;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*t)) { /* Get the power */
 80016e2:	e01b      	b.n	800171c <prv_parse_float_number+0xdc>
        value = value * (lwgps_float_t)10 + CTN(*t);
 80016e4:	ed97 7b06 	vldr	d7, [r7, #24]
 80016e8:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80016ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	3b30      	subs	r3, #48	; 0x30
 80016f6:	ee07 3a90 	vmov	s15, r3
 80016fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80016fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001702:	ed87 7b06 	vstr	d7, [r7, #24]
        power *= 10.0;
 8001706:	ed97 7b04 	vldr	d7, [r7, #16]
 800170a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800170e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001712:	ed87 7b04 	vstr	d7, [r7, #16]
        ++t;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	603b      	str	r3, [r7, #0]
    while (CIN(*t)) { /* Get the power */
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b2f      	cmp	r3, #47	; 0x2f
 8001722:	d903      	bls.n	800172c <prv_parse_float_number+0xec>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b39      	cmp	r3, #57	; 0x39
 800172a:	d9db      	bls.n	80016e4 <prv_parse_float_number+0xa4>
    }
    return sign * value / power;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	ee07 3a90 	vmov	s15, r3
 8001732:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001736:	ed97 7b06 	vldr	d7, [r7, #24]
 800173a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800173e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001742:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001746:	eeb0 7b45 	vmov.f64	d7, d5
}
 800174a:	eeb0 0b47 	vmov.f64	d0, d7
 800174e:	3724      	adds	r7, #36	; 0x24
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	3ff00000 	.word	0x3ff00000
 800175c:	00000000 	.word	0x00000000

08001760 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL); /* Parse value as double */
 8001768:	2100      	movs	r1, #0
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ff68 	bl	8001640 <prv_parse_float_number>
 8001770:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));       /* Get absolute degrees value, interested in integer part only */
 8001774:	ed97 7b06 	vldr	d7, [r7, #24]
 8001778:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800177c:	ee17 1a90 	vmov	r1, s15
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <prv_parse_lat_long+0x90>)
 8001782:	fb83 2301 	smull	r2, r3, r3, r1
 8001786:	115a      	asrs	r2, r3, #5
 8001788:	17cb      	asrs	r3, r1, #31
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001794:	ed87 7b04 	vstr	d7, [r7, #16]
    min = ll - (deg * FLT(100));           /* Get remaining part from full number, minutes */
 8001798:	ed97 7b04 	vldr	d7, [r7, #16]
 800179c:	ed9f 6b10 	vldr	d6, [pc, #64]	; 80017e0 <prv_parse_lat_long+0x80>
 80017a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017a4:	ed97 6b06 	vldr	d6, [r7, #24]
 80017a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017ac:	ed87 7b02 	vstr	d7, [r7, #8]
    ll = deg + (min / FLT(60.0));          /* Calculate latitude/longitude */
 80017b0:	ed97 6b02 	vldr	d6, [r7, #8]
 80017b4:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 80017e8 <prv_parse_lat_long+0x88>
 80017b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017bc:	ed97 6b04 	vldr	d6, [r7, #16]
 80017c0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017c4:	ed87 7b06 	vstr	d7, [r7, #24]

    return ll;
 80017c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017cc:	ec43 2b17 	vmov	d7, r2, r3
}
 80017d0:	eeb0 0b47 	vmov.f64	d0, d7
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	f3af 8000 	nop.w
 80017e0:	00000000 	.word	0x00000000
 80017e4:	40590000 	.word	0x40590000
 80017e8:	00000000 	.word	0x00000000
 80017ec:	404e0000 	.word	0x404e0000
 80017f0:	51eb851f 	.word	0x51eb851f

080017f4 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) { /* Check string type */
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001802:	2b00      	cmp	r3, #0
 8001804:	d11e      	bne.n	8001844 <prv_parse_term+0x50>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3329      	adds	r3, #41	; 0x29
 800180a:	2206      	movs	r2, #6
 800180c:	4978      	ldr	r1, [pc, #480]	; (80019f0 <prv_parse_term+0x1fc>)
 800180e:	4618      	mov	r0, r3
 8001810:	f003 fff6 	bl	8005800 <strncmp>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d009      	beq.n	800182e <prv_parse_term+0x3a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3329      	adds	r3, #41	; 0x29
 800181e:	2206      	movs	r2, #6
 8001820:	4974      	ldr	r1, [pc, #464]	; (80019f4 <prv_parse_term+0x200>)
 8001822:	4618      	mov	r0, r3
 8001824:	f003 ffec 	bl	8005800 <strncmp>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d104      	bne.n	8001838 <prv_parse_term+0x44>
            gh->p.stat = STAT_GGA;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001836:	e003      	b.n	8001840 <prv_parse_term+0x4c>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN; /* Invalid statement for library */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }
        return 1;
 8001840:	2301      	movs	r3, #1
 8001842:	e0d0      	b.n	80019e6 <prv_parse_term+0x1f2>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 80ca 	beq.w	80019e4 <prv_parse_term+0x1f0>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) { /* Process GPGGA statement */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001856:	2b01      	cmp	r3, #1
 8001858:	f040 80bd 	bne.w	80019d6 <prv_parse_term+0x1e2>
        switch (gh->p.term_num) {
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001862:	3b01      	subs	r3, #1
 8001864:	2b0a      	cmp	r3, #10
 8001866:	f200 80b8 	bhi.w	80019da <prv_parse_term+0x1e6>
 800186a:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <prv_parse_term+0x7c>)
 800186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001870:	0800189d 	.word	0x0800189d
 8001874:	08001917 	.word	0x08001917
 8001878:	08001929 	.word	0x08001929
 800187c:	0800194f 	.word	0x0800194f
 8001880:	08001961 	.word	0x08001961
 8001884:	08001987 	.word	0x08001987
 8001888:	0800199b 	.word	0x0800199b
 800188c:	080019db 	.word	0x080019db
 8001890:	080019af 	.word	0x080019af
 8001894:	080019db 	.word	0x080019db
 8001898:	080019c3 	.word	0x080019c3
            case 1: /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80018a2:	3b30      	subs	r3, #48	; 0x30
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	0092      	lsls	r2, r2, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80018b6:	4413      	add	r3, r2
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	3b30      	subs	r3, #48	; 0x30
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80018ca:	3b30      	subs	r3, #48	; 0x30
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	0092      	lsls	r2, r2, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80018de:	4413      	add	r3, r2
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	3b30      	subs	r3, #48	; 0x30
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80018f2:	3b30      	subs	r3, #48	; 0x30
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	0092      	lsls	r2, r2, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001906:	4413      	add	r3, r2
 8001908:	b2db      	uxtb	r3, r3
 800190a:	3b30      	subs	r3, #48	; 0x30
 800190c:	b2da      	uxtb	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                break;
 8001914:	e066      	b.n	80019e4 <prv_parse_term+0x1f0>
            case 2:                                               /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh); /* Parse latitude */
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ff22 	bl	8001760 <prv_parse_lat_long>
 800191c:	eeb0 7b40 	vmov.f64	d7, d0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
                break;
 8001926:	e05d      	b.n	80019e4 <prv_parse_term+0x1f0>
            case 3: /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800192e:	2b53      	cmp	r3, #83	; 0x53
 8001930:	d004      	beq.n	800193c <prv_parse_term+0x148>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001938:	2b73      	cmp	r3, #115	; 0x73
 800193a:	d150      	bne.n	80019de <prv_parse_term+0x1ea>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001942:	eeb1 7b47 	vneg.f64	d7, d7
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
                }
                break;
 800194c:	e047      	b.n	80019de <prv_parse_term+0x1ea>
            case 4:                                                /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh); /* Parse longitude */
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ff06 	bl	8001760 <prv_parse_lat_long>
 8001954:	eeb0 7b40 	vmov.f64	d7, d0
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
                break;
 800195e:	e041      	b.n	80019e4 <prv_parse_term+0x1f0>
            case 5: /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001966:	2b57      	cmp	r3, #87	; 0x57
 8001968:	d004      	beq.n	8001974 <prv_parse_term+0x180>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001970:	2b77      	cmp	r3, #119	; 0x77
 8001972:	d136      	bne.n	80019e2 <prv_parse_term+0x1ee>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 800197a:	eeb1 7b47 	vneg.f64	d7, d7
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
                }
                break;
 8001984:	e02d      	b.n	80019e2 <prv_parse_term+0x1ee>
            case 6: /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 8001986:	2100      	movs	r1, #0
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff fe0f 	bl	80015ac <prv_parse_number>
 800198e:	4603      	mov	r3, r0
 8001990:	b2da      	uxtb	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                break;
 8001998:	e024      	b.n	80019e4 <prv_parse_term+0x1f0>
            case 7: /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 800199a:	2100      	movs	r1, #0
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff fe05 	bl	80015ac <prv_parse_number>
 80019a2:	4603      	mov	r3, r0
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                break;
 80019ac:	e01a      	b.n	80019e4 <prv_parse_term+0x1f0>
            case 9: /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 80019ae:	2100      	movs	r1, #0
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff fe45 	bl	8001640 <prv_parse_float_number>
 80019b6:	eeb0 7b40 	vmov.f64	d7, d0
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
                break;
 80019c0:	e010      	b.n	80019e4 <prv_parse_term+0x1f0>
            case 11: /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 80019c2:	2100      	movs	r1, #0
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff fe3b 	bl	8001640 <prv_parse_float_number>
 80019ca:	eeb0 7b40 	vmov.f64	d7, d0
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
                break;
 80019d4:	e006      	b.n	80019e4 <prv_parse_term+0x1f0>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
 80019d6:	bf00      	nop
 80019d8:	e004      	b.n	80019e4 <prv_parse_term+0x1f0>
                break;
 80019da:	bf00      	nop
 80019dc:	e002      	b.n	80019e4 <prv_parse_term+0x1f0>
                break;
 80019de:	bf00      	nop
 80019e0:	e000      	b.n	80019e4 <prv_parse_term+0x1f0>
                break;
 80019e2:	bf00      	nop
    return 1;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	08006868 	.word	0x08006868
 80019f4:	08006870 	.word	0x08006870

080019f8 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8001a06:	2b2f      	cmp	r3, #47	; 0x2f
 8001a08:	d90d      	bls.n	8001a26 <prv_check_crc+0x2e>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001a10:	2b39      	cmp	r3, #57	; 0x39
 8001a12:	d808      	bhi.n	8001a26 <prv_check_crc+0x2e>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001a1a:	3b30      	subs	r3, #48	; 0x30
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	b2db      	uxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8001a22:	b25a      	sxtb	r2, r3
 8001a24:	e026      	b.n	8001a74 <prv_check_crc+0x7c>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8001a2c:	2b60      	cmp	r3, #96	; 0x60
 8001a2e:	d90d      	bls.n	8001a4c <prv_check_crc+0x54>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001a36:	2b7a      	cmp	r3, #122	; 0x7a
 8001a38:	d808      	bhi.n	8001a4c <prv_check_crc+0x54>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001a40:	3b57      	subs	r3, #87	; 0x57
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	b2db      	uxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8001a48:	b25a      	sxtb	r2, r3
 8001a4a:	e013      	b.n	8001a74 <prv_check_crc+0x7c>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8001a52:	2b40      	cmp	r3, #64	; 0x40
 8001a54:	d90d      	bls.n	8001a72 <prv_check_crc+0x7a>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001a5c:	2b5a      	cmp	r3, #90	; 0x5a
 8001a5e:	d808      	bhi.n	8001a72 <prv_check_crc+0x7a>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001a66:	3b37      	subs	r3, #55	; 0x37
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	b2db      	uxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8001a6e:	b25a      	sxtb	r2, r3
 8001a70:	e000      	b.n	8001a74 <prv_check_crc+0x7c>
 8001a72:	2200      	movs	r2, #0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001a7a:	2b2f      	cmp	r3, #47	; 0x2f
 8001a7c:	d90c      	bls.n	8001a98 <prv_check_crc+0xa0>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001a84:	2b39      	cmp	r3, #57	; 0x39
 8001a86:	d807      	bhi.n	8001a98 <prv_check_crc+0xa0>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001a8e:	b25b      	sxtb	r3, r3
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	e028      	b.n	8001aea <prv_check_crc+0xf2>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001a9e:	2b60      	cmp	r3, #96	; 0x60
 8001aa0:	d90e      	bls.n	8001ac0 <prv_check_crc+0xc8>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001aa8:	2b7a      	cmp	r3, #122	; 0x7a
 8001aaa:	d809      	bhi.n	8001ac0 <prv_check_crc+0xc8>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001ab2:	3b57      	subs	r3, #87	; 0x57
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	b25b      	sxtb	r3, r3
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	e014      	b.n	8001aea <prv_check_crc+0xf2>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001ac6:	2b40      	cmp	r3, #64	; 0x40
 8001ac8:	d90e      	bls.n	8001ae8 <prv_check_crc+0xf0>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001ad0:	2b5a      	cmp	r3, #90	; 0x5a
 8001ad2:	d809      	bhi.n	8001ae8 <prv_check_crc+0xf0>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001ada:	3b37      	subs	r3, #55	; 0x37
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	b25b      	sxtb	r3, r3
 8001ae6:	e000      	b.n	8001aea <prv_check_crc+0xf2>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	4313      	orrs	r3, r2
 8001aec:	b25b      	sxtb	r3, r3
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8001aee:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;             /* They must match! */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	bf0c      	ite	eq
 8001afc:	2301      	moveq	r3, #1
 8001afe:	2300      	movne	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d135      	bne.n	8001b8c <prv_copy_from_tmp_memory+0x7e>
        gh->latitude = gh->p.data.gga.latitude;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8001b8c:	2301      	movs	r3, #1
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh)); /* Reset structure */
 8001ba2:	2268      	movs	r2, #104	; 0x68
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f003 fd2e 	bl	8005608 <memset>
    return 1;
 8001bac:	2301      	movs	r3, #1
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else  /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {                /* Process all bytes */
 8001bc6:	e0ad      	b.n	8001d24 <lwgps_process+0x16e>
        if (*d == '$') {                         /* Check for beginning of NMEA line */
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b24      	cmp	r3, #36	; 0x24
 8001bce:	d128      	bne.n	8001c22 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p)); /* Reset private memory */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3328      	adds	r3, #40	; 0x28
 8001bd4:	2240      	movs	r2, #64	; 0x40
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f003 fd15 	bl	8005608 <memset>
            TERM_ADD(gh, *d);                    /* Add character to term */
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001be4:	2b0b      	cmp	r3, #11
 8001be6:	f200 8097 	bhi.w	8001d18 <lwgps_process+0x162>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	781a      	ldrb	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	440b      	add	r3, r1
 8001bfa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001c04:	3301      	adds	r3, #1
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001c14:	461a      	mov	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4413      	add	r3, r2
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8001c20:	e07a      	b.n	8001d18 <lwgps_process+0x162>
        } else if (*d == ',') {                  /* Term separator character */
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b2c      	cmp	r3, #44	; 0x2c
 8001c28:	d11d      	bne.n	8001c66 <lwgps_process+0xb0>
            prv_parse_term(gh);                  /* Parse term we have currently in memory */
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f7ff fde2 	bl	80017f4 <prv_parse_term>
            CRC_ADD(gh, *d);                     /* Add character to CRC computation */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	4053      	eors	r3, r2
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            TERM_NEXT(gh);                       /* Start with next term */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8001c64:	e058      	b.n	8001d18 <lwgps_process+0x162>
        } else if (*d == '*') {                  /* Start indicates end of data for CRC computation */
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8001c6c:	d117      	bne.n	8001c9e <lwgps_process+0xe8>
            prv_parse_term(gh);                  /* Parse term we have currently in memory */
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f7ff fdc0 	bl	80017f4 <prv_parse_term>
            gh->p.star = 1;                      /* STAR detected */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            TERM_NEXT(gh);                       /* Start with next term */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001c92:	3301      	adds	r3, #1
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8001c9c:	e03c      	b.n	8001d18 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b0d      	cmp	r3, #13
 8001ca4:	d109      	bne.n	8001cba <lwgps_process+0x104>
            if (prv_check_crc(gh)) { /* Check for CRC result */
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f7ff fea6 	bl	80019f8 <prv_check_crc>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d032      	beq.n	8001d18 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh); /* Copy memory from temporary to user memory */
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f7ff ff2b 	bl	8001b0e <prv_copy_from_tmp_memory>
 8001cb8:	e02e      	b.n	8001d18 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {   /* Add to CRC only if star not yet detected */
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d109      	bne.n	8001cd8 <lwgps_process+0x122>
                CRC_ADD(gh, *d); /* Add to CRC */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	4053      	eors	r3, r2
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            TERM_ADD(gh, *d); /* Add character to term */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001cde:	2b0b      	cmp	r3, #11
 8001ce0:	d81a      	bhi.n	8001d18 <lwgps_process+0x162>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001ce8:	4619      	mov	r1, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	781a      	ldrb	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	440b      	add	r3, r1
 8001cf2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4413      	add	r3, r2
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    for (; len > 0; ++d, --len) {                /* Process all bytes */
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f47f af4e 	bne.w	8001bc8 <lwgps_process+0x12>
        }
    }
    return 1;
 8001d2c:	2301      	movs	r3, #1
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <navigation_main_init>:
		MAX_DISTANCE,MAX_DISTANCE,MAX_DISTANCE,MAX_DISTANCE,
		MAX_DISTANCE,MAX_DISTANCE,MAX_DISTANCE,MAX_DISTANCE,
		MAX_DISTANCE,MAX_DISTANCE,MAX_DISTANCE,MAX_DISTANCE
};

int navigation_main_init(uint8_t destination) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08a      	sub	sp, #40	; 0x28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
	if (gps.fix == 0) {
 8001d42:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <navigation_main_init+0x100>)
 8001d44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <navigation_main_init+0x1a>
		//printf("GPS Fix is 0!\n\r");
		return 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e06e      	b.n	8001e30 <navigation_main_init+0xf8>
	} else {
		printf("GPS Fix: %d. Number of satellites initially: %d\n\r", gps.fix, gps.sats_in_use);
 8001d52:	4b39      	ldr	r3, [pc, #228]	; (8001e38 <navigation_main_init+0x100>)
 8001d54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4b36      	ldr	r3, [pc, #216]	; (8001e38 <navigation_main_init+0x100>)
 8001d5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	4835      	ldr	r0, [pc, #212]	; (8001e3c <navigation_main_init+0x104>)
 8001d68:	f003 fc56 	bl	8005618 <iprintf>
	}
    float_t closest_distance;
    coord_t last_coord;
    last_coord.x = coord.x;
 8001d6c:	4b34      	ldr	r3, [pc, #208]	; (8001e40 <navigation_main_init+0x108>)
 8001d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d72:	e9c7 2302 	strd	r2, r3, [r7, #8]
    last_coord.y = coord.y;
 8001d76:	4b32      	ldr	r3, [pc, #200]	; (8001e40 <navigation_main_init+0x108>)
 8001d78:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    printf("Latitude: ");
 8001d80:	4830      	ldr	r0, [pc, #192]	; (8001e44 <navigation_main_init+0x10c>)
 8001d82:	f003 fc49 	bl	8005618 <iprintf>
	print_float(last_coord.y);
 8001d86:	ed97 7b04 	vldr	d7, [r7, #16]
 8001d8a:	eeb0 0b47 	vmov.f64	d0, d7
 8001d8e:	f7fe fc5b 	bl	8000648 <print_float>
	printf(" ");
 8001d92:	2020      	movs	r0, #32
 8001d94:	f003 fc58 	bl	8005648 <putchar>

	printf("Longitude: ");
 8001d98:	482b      	ldr	r0, [pc, #172]	; (8001e48 <navigation_main_init+0x110>)
 8001d9a:	f003 fc3d 	bl	8005618 <iprintf>
	print_float(last_coord.x);
 8001d9e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001da2:	eeb0 0b47 	vmov.f64	d0, d7
 8001da6:	f7fe fc4f 	bl	8000648 <print_float>
	printf("\n\r");
 8001daa:	4828      	ldr	r0, [pc, #160]	; (8001e4c <navigation_main_init+0x114>)
 8001dac:	f003 fc34 	bl	8005618 <iprintf>
    uint8_t nearest_node = get_nearest_node(&last_coord, &closest_distance);
 8001db0:	f107 0218 	add.w	r2, r7, #24
 8001db4:	f107 0308 	add.w	r3, r7, #8
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 fad0 	bl	8002360 <get_nearest_node>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    printf("Distance to nearest node: ");
 8001dc6:	4822      	ldr	r0, [pc, #136]	; (8001e50 <navigation_main_init+0x118>)
 8001dc8:	f003 fc26 	bl	8005618 <iprintf>
    print_float(closest_distance);
 8001dcc:	ed97 7b06 	vldr	d7, [r7, #24]
 8001dd0:	eeb0 0b47 	vmov.f64	d0, d7
 8001dd4:	f7fe fc38 	bl	8000648 <print_float>
    printf("\n\r");
 8001dd8:	481c      	ldr	r0, [pc, #112]	; (8001e4c <navigation_main_init+0x114>)
 8001dda:	f003 fc1d 	bl	8005618 <iprintf>
	uint8_t source = nearest_node;
 8001dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001de2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	printf("Source: %d, %s\n\r", source, landmarks[source].name);
 8001de6:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001dea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001dee:	2258      	movs	r2, #88	; 0x58
 8001df0:	fb02 f303 	mul.w	r3, r2, r3
 8001df4:	3310      	adds	r3, #16
 8001df6:	4a17      	ldr	r2, [pc, #92]	; (8001e54 <navigation_main_init+0x11c>)
 8001df8:	4413      	add	r3, r2
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4816      	ldr	r0, [pc, #88]	; (8001e58 <navigation_main_init+0x120>)
 8001dfe:	f003 fc0b 	bl	8005618 <iprintf>
	printf("Destination: %d, %s\n\r", destination, landmarks[destination].name);
 8001e02:	79f9      	ldrb	r1, [r7, #7]
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	2258      	movs	r2, #88	; 0x58
 8001e08:	fb02 f303 	mul.w	r3, r2, r3
 8001e0c:	3310      	adds	r3, #16
 8001e0e:	4a11      	ldr	r2, [pc, #68]	; (8001e54 <navigation_main_init+0x11c>)
 8001e10:	4413      	add	r3, r2
 8001e12:	461a      	mov	r2, r3
 8001e14:	4811      	ldr	r0, [pc, #68]	; (8001e5c <navigation_main_init+0x124>)
 8001e16:	f003 fbff 	bl	8005618 <iprintf>
	dijkstra(source, destination);
 8001e1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e1e:	79fa      	ldrb	r2, [r7, #7]
 8001e20:	4611      	mov	r1, r2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff faa0 	bl	8001368 <dijkstra>
	return gps.sats_in_use;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <navigation_main_init+0x100>)
 8001e2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e2e:	b2db      	uxtb	r3, r3
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3728      	adds	r7, #40	; 0x28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20001838 	.word	0x20001838
 8001e3c:	08006878 	.word	0x08006878
 8001e40:	200018a0 	.word	0x200018a0
 8001e44:	080068ac 	.word	0x080068ac
 8001e48:	080068b8 	.word	0x080068b8
 8001e4c:	080068c4 	.word	0x080068c4
 8001e50:	080068c8 	.word	0x080068c8
 8001e54:	20000788 	.word	0x20000788
 8001e58:	080068e4 	.word	0x080068e4
 8001e5c:	080068f8 	.word	0x080068f8

08001e60 <navigation_main_loop>:

void navigation_main_loop() {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
	float_t closest_distance;
	coord_t last_coord;
	last_coord.x = coord.x;
 8001e66:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <navigation_main_loop+0xd8>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	e9c7 2300 	strd	r2, r3, [r7]
	last_coord.y = coord.y;
 8001e70:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <navigation_main_loop+0xd8>)
 8001e72:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e76:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint8_t nearest_node = get_nearest_node(&last_coord, &closest_distance);
 8001e7a:	f107 0210 	add.w	r2, r7, #16
 8001e7e:	463b      	mov	r3, r7
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 fa6c 	bl	8002360 <get_nearest_node>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	76fb      	strb	r3, [r7, #27]
	// (50 ft + 5 meters)^2 = 0.0001581697 mi^2
	if (closest_distance < 0.0001581697 + landmarks[nearest_node].buffer_distance) {
 8001e8c:	7efb      	ldrb	r3, [r7, #27]
 8001e8e:	4a2b      	ldr	r2, [pc, #172]	; (8001f3c <navigation_main_loop+0xdc>)
 8001e90:	2158      	movs	r1, #88	; 0x58
 8001e92:	fb01 f303 	mul.w	r3, r1, r3
 8001e96:	4413      	add	r3, r2
 8001e98:	3350      	adds	r3, #80	; 0x50
 8001e9a:	ed93 7b00 	vldr	d7, [r3]
 8001e9e:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8001f30 <navigation_main_loop+0xd0>
 8001ea2:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001ea6:	ed97 7b04 	vldr	d7, [r7, #16]
 8001eaa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb2:	dd13      	ble.n	8001edc <navigation_main_loop+0x7c>
		if (visited_nodes[nearest_node] == 0) {
 8001eb4:	7efb      	ldrb	r3, [r7, #27]
 8001eb6:	4a22      	ldr	r2, [pc, #136]	; (8001f40 <navigation_main_loop+0xe0>)
 8001eb8:	5cd3      	ldrb	r3, [r2, r3]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10e      	bne.n	8001edc <navigation_main_loop+0x7c>
			visited_nodes[nearest_node] = 1;
 8001ebe:	7efb      	ldrb	r3, [r7, #27]
 8001ec0:	4a1f      	ldr	r2, [pc, #124]	; (8001f40 <navigation_main_loop+0xe0>)
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	54d1      	strb	r1, [r2, r3]
			// Call Brain function here
			printf("You are now near %s\n\r", landmarks[nearest_node].name);
 8001ec6:	7efb      	ldrb	r3, [r7, #27]
 8001ec8:	2258      	movs	r2, #88	; 0x58
 8001eca:	fb02 f303 	mul.w	r3, r2, r3
 8001ece:	3310      	adds	r3, #16
 8001ed0:	4a1a      	ldr	r2, [pc, #104]	; (8001f3c <navigation_main_loop+0xdc>)
 8001ed2:	4413      	add	r3, r2
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	481b      	ldr	r0, [pc, #108]	; (8001f44 <navigation_main_loop+0xe4>)
 8001ed8:	f003 fb9e 	bl	8005618 <iprintf>
		}
	}
	for (int i = 0; i < MAX_PATH_LENGTH; i++) {
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	e01b      	b.n	8001f1a <navigation_main_loop+0xba>
		if (path[i] == -1) {
 8001ee2:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <navigation_main_loop+0xe8>)
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eee:	d018      	beq.n	8001f22 <navigation_main_loop+0xc2>
			break;
		}
		path_distances[i] = squared_distance_to_node(&last_coord, path[i]);
 8001ef0:	4a15      	ldr	r2, [pc, #84]	; (8001f48 <navigation_main_loop+0xe8>)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	463b      	mov	r3, r7
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 fa54 	bl	80023ac <squared_distance_to_node>
 8001f04:	eeb0 7b40 	vmov.f64	d7, d0
 8001f08:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <navigation_main_loop+0xec>)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < MAX_PATH_LENGTH; i++) {
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	3301      	adds	r3, #1
 8001f18:	61fb      	str	r3, [r7, #28]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	2b13      	cmp	r3, #19
 8001f1e:	dde0      	ble.n	8001ee2 <navigation_main_loop+0x82>
	}
}
 8001f20:	e000      	b.n	8001f24 <navigation_main_loop+0xc4>
			break;
 8001f22:	bf00      	nop
}
 8001f24:	bf00      	nop
 8001f26:	3720      	adds	r7, #32
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	f3af 8000 	nop.w
 8001f30:	609fa9b3 	.word	0x609fa9b3
 8001f34:	3f24bb4b 	.word	0x3f24bb4b
 8001f38:	200018a0 	.word	0x200018a0
 8001f3c:	20000788 	.word	0x20000788
 8001f40:	200018bc 	.word	0x200018bc
 8001f44:	08006910 	.word	0x08006910
 8001f48:	200017e8 	.word	0x200017e8
 8001f4c:	20001548 	.word	0x20001548

08001f50 <process_buffer>:

// i = 0: First Half
// i = 1: Second Half
void process_buffer(int half_selection) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
	if (half_selection == 0) {
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d105      	bne.n	8001f6a <process_buffer+0x1a>
		lwgps_process(&gps, nav_rx_data, UART2_RX_DMA_BUFFER_SIZE / 2);
 8001f5e:	2205      	movs	r2, #5
 8001f60:	4910      	ldr	r1, [pc, #64]	; (8001fa4 <process_buffer+0x54>)
 8001f62:	4811      	ldr	r0, [pc, #68]	; (8001fa8 <process_buffer+0x58>)
 8001f64:	f7ff fe27 	bl	8001bb6 <lwgps_process>
 8001f68:	e004      	b.n	8001f74 <process_buffer+0x24>
	} else {
		lwgps_process(&gps, &nav_rx_data[5], UART2_RX_DMA_BUFFER_SIZE / 2);
 8001f6a:	2205      	movs	r2, #5
 8001f6c:	490f      	ldr	r1, [pc, #60]	; (8001fac <process_buffer+0x5c>)
 8001f6e:	480e      	ldr	r0, [pc, #56]	; (8001fa8 <process_buffer+0x58>)
 8001f70:	f7ff fe21 	bl	8001bb6 <lwgps_process>
	}

	//printf("Fix: %d\n\r", gps.fix);
	if (gps.fix == 0) {
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <process_buffer+0x58>)
 8001f76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00c      	beq.n	8001f9a <process_buffer+0x4a>
		return;
	}
	coord.x = gps.longitude;
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <process_buffer+0x58>)
 8001f82:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001f86:	490a      	ldr	r1, [pc, #40]	; (8001fb0 <process_buffer+0x60>)
 8001f88:	e9c1 2300 	strd	r2, r3, [r1]
	coord.y = gps.latitude;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <process_buffer+0x58>)
 8001f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f92:	4907      	ldr	r1, [pc, #28]	; (8001fb0 <process_buffer+0x60>)
 8001f94:	e9c1 2302 	strd	r2, r3, [r1, #8]

	return;
 8001f98:	e000      	b.n	8001f9c <process_buffer+0x4c>
		return;
 8001f9a:	bf00      	nop
	printf(" ");

	printf("Longitude: ");
	print_float(gps.longitude);
	printf("\n\r");
}
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	200018b0 	.word	0x200018b0
 8001fa8:	20001838 	.word	0x20001838
 8001fac:	200018b5 	.word	0x200018b5
 8001fb0:	200018a0 	.word	0x200018a0

08001fb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	process_buffer(1);
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	f7ff ffc7 	bl	8001f50 <process_buffer>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
	process_buffer(0);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f7ff ffbc 	bl	8001f50 <process_buffer>
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <left_child>:
#include "stdio.h"
#include <stdint.h>

static int parent(int i) { return (i - 1) / 2; }

static int left_child(int i) { return 2 * i + 1; }
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	3301      	adds	r3, #1
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <right_child>:

static int right_child(int i) { return 2 * i + 2; }
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3301      	adds	r3, #1
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	0000      	movs	r0, r0
	...

08002018 <calc_squared_distance>:

// Euclidean Geodesic Approximation with small distance assumption
float_t calc_squared_distance(float_t x1, float_t y1, float_t x2, float_t y2) {
 8002018:	b480      	push	{r7}
 800201a:	b08d      	sub	sp, #52	; 0x34
 800201c:	af00      	add	r7, sp, #0
 800201e:	ed87 0b06 	vstr	d0, [r7, #24]
 8002022:	ed87 1b04 	vstr	d1, [r7, #16]
 8002026:	ed87 2b02 	vstr	d2, [r7, #8]
 800202a:	ed87 3b00 	vstr	d3, [r7]
  // 12430 miles / 180 degrees
  float_t dy = 69.055555555 * (y1 - y2); // miles
 800202e:	ed97 6b04 	vldr	d6, [r7, #16]
 8002032:	ed97 7b00 	vldr	d7, [r7]
 8002036:	ee36 7b47 	vsub.f64	d7, d6, d7
 800203a:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8002080 <calc_squared_distance+0x68>
 800203e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002042:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  // 24901 miles / 360 degrees * DELTA_X_MULT
  // DELTA_X_MULT is cos(avg(upper_lat, lower_lat))
  float_t dx = 52.65342256 * (x1 - x2); // miles
 8002046:	ed97 6b06 	vldr	d6, [r7, #24]
 800204a:	ed97 7b02 	vldr	d7, [r7, #8]
 800204e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002052:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8002088 <calc_squared_distance+0x70>
 8002056:	ee27 7b06 	vmul.f64	d7, d7, d6
 800205a:	ed87 7b08 	vstr	d7, [r7, #32]
  return dy * dy + dx * dx;             // miles^2
 800205e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002062:	ee27 6b07 	vmul.f64	d6, d7, d7
 8002066:	ed97 7b08 	vldr	d7, [r7, #32]
 800206a:	ee27 7b07 	vmul.f64	d7, d7, d7
 800206e:	ee36 7b07 	vadd.f64	d7, d6, d7
}
 8002072:	eeb0 0b47 	vmov.f64	d0, d7
 8002076:	3734      	adds	r7, #52	; 0x34
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	38e2f583 	.word	0x38e2f583
 8002084:	4051438e 	.word	0x4051438e
 8002088:	59b6d595 	.word	0x59b6d595
 800208c:	404a53a3 	.word	0x404a53a3

08002090 <k_d_search>:

void k_d_search(coord_t* coord, uint8_t root, int depth, uint8_t* closest_node, float_t* closest_distance) {
 8002090:	b580      	push	{r7, lr}
 8002092:	ed2d 8b02 	vpush	{d8}
 8002096:	b08a      	sub	sp, #40	; 0x28
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	460b      	mov	r3, r1
 80020a2:	72fb      	strb	r3, [r7, #11]
    if (root >= MAX_LEN_K_D_TREE) {
 80020a4:	7afb      	ldrb	r3, [r7, #11]
 80020a6:	2b3b      	cmp	r3, #59	; 0x3b
 80020a8:	f200 8147 	bhi.w	800233a <k_d_search+0x2aa>
        return;
    }
    if (k_d_tree[root] >= LEN_LANDMARKS) {
 80020ac:	7afb      	ldrb	r3, [r7, #11]
 80020ae:	4aaa      	ldr	r2, [pc, #680]	; (8002358 <k_d_search+0x2c8>)
 80020b0:	5cd3      	ldrb	r3, [r2, r3]
 80020b2:	2b27      	cmp	r3, #39	; 0x27
 80020b4:	f200 8143 	bhi.w	800233e <k_d_search+0x2ae>
        return;
    }
    int axis = depth % 2;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	bfb8      	it	lt
 80020c2:	425b      	neglt	r3, r3
 80020c4:	61bb      	str	r3, [r7, #24]
    int path_taken; // 0 for left, 1 for right
    if (axis == 0) {
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d134      	bne.n	8002136 <k_d_search+0xa6>
        if (coord->x <= landmarks[k_d_tree[root]].x) {
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	ed93 6b00 	vldr	d6, [r3]
 80020d2:	7afb      	ldrb	r3, [r7, #11]
 80020d4:	4aa0      	ldr	r2, [pc, #640]	; (8002358 <k_d_search+0x2c8>)
 80020d6:	5cd3      	ldrb	r3, [r2, r3]
 80020d8:	4619      	mov	r1, r3
 80020da:	4aa0      	ldr	r2, [pc, #640]	; (800235c <k_d_search+0x2cc>)
 80020dc:	2358      	movs	r3, #88	; 0x58
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	ed93 7b00 	vldr	d7, [r3]
 80020e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80020ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f0:	d810      	bhi.n	8002114 <k_d_search+0x84>
            k_d_search(coord, left_child(root), depth+1, closest_node, closest_distance);
 80020f2:	7afb      	ldrb	r3, [r7, #11]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff73 	bl	8001fe0 <left_child>
 80020fa:	4603      	mov	r3, r0
 80020fc:	b2d9      	uxtb	r1, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f7ff ffc1 	bl	8002090 <k_d_search>
            path_taken = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	e045      	b.n	80021a0 <k_d_search+0x110>
        } else {
            k_d_search(coord, right_child(root), depth+1, closest_node, closest_distance);
 8002114:	7afb      	ldrb	r3, [r7, #11]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ff6f 	bl	8001ffa <right_child>
 800211c:	4603      	mov	r3, r0
 800211e:	b2d9      	uxtb	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f7ff ffb0 	bl	8002090 <k_d_search>
            path_taken = 1;
 8002130:	2301      	movs	r3, #1
 8002132:	61fb      	str	r3, [r7, #28]
 8002134:	e034      	b.n	80021a0 <k_d_search+0x110>
        }
    } else {
        if (coord->y <= landmarks[k_d_tree[root]].y) {
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	ed93 6b02 	vldr	d6, [r3, #8]
 800213c:	7afb      	ldrb	r3, [r7, #11]
 800213e:	4a86      	ldr	r2, [pc, #536]	; (8002358 <k_d_search+0x2c8>)
 8002140:	5cd3      	ldrb	r3, [r2, r3]
 8002142:	4619      	mov	r1, r3
 8002144:	4a85      	ldr	r2, [pc, #532]	; (800235c <k_d_search+0x2cc>)
 8002146:	2358      	movs	r3, #88	; 0x58
 8002148:	fb01 f303 	mul.w	r3, r1, r3
 800214c:	4413      	add	r3, r2
 800214e:	3308      	adds	r3, #8
 8002150:	ed93 7b00 	vldr	d7, [r3]
 8002154:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215c:	d810      	bhi.n	8002180 <k_d_search+0xf0>
            k_d_search(coord, left_child(root), depth+1, closest_node, closest_distance);
 800215e:	7afb      	ldrb	r3, [r7, #11]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff3d 	bl	8001fe0 <left_child>
 8002166:	4603      	mov	r3, r0
 8002168:	b2d9      	uxtb	r1, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f7ff ff8b 	bl	8002090 <k_d_search>
            path_taken = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	e00f      	b.n	80021a0 <k_d_search+0x110>
        } else {
            k_d_search(coord, right_child(root), depth+1, closest_node, closest_distance);
 8002180:	7afb      	ldrb	r3, [r7, #11]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ff39 	bl	8001ffa <right_child>
 8002188:	4603      	mov	r3, r0
 800218a:	b2d9      	uxtb	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f7ff ff7a 	bl	8002090 <k_d_search>
            path_taken = 1;
 800219c:	2301      	movs	r3, #1
 800219e:	61fb      	str	r3, [r7, #28]
        }
    }
    float_t current_distance = calc_squared_distance(coord->x, coord->y, landmarks[k_d_tree[root]].x, landmarks[k_d_tree[root]].y);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	ed93 7b00 	vldr	d7, [r3]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	ed93 6b02 	vldr	d6, [r3, #8]
 80021ac:	7afb      	ldrb	r3, [r7, #11]
 80021ae:	4a6a      	ldr	r2, [pc, #424]	; (8002358 <k_d_search+0x2c8>)
 80021b0:	5cd3      	ldrb	r3, [r2, r3]
 80021b2:	4619      	mov	r1, r3
 80021b4:	4a69      	ldr	r2, [pc, #420]	; (800235c <k_d_search+0x2cc>)
 80021b6:	2358      	movs	r3, #88	; 0x58
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	4413      	add	r3, r2
 80021be:	ed93 5b00 	vldr	d5, [r3]
 80021c2:	7afb      	ldrb	r3, [r7, #11]
 80021c4:	4a64      	ldr	r2, [pc, #400]	; (8002358 <k_d_search+0x2c8>)
 80021c6:	5cd3      	ldrb	r3, [r2, r3]
 80021c8:	4619      	mov	r1, r3
 80021ca:	4a64      	ldr	r2, [pc, #400]	; (800235c <k_d_search+0x2cc>)
 80021cc:	2358      	movs	r3, #88	; 0x58
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	3308      	adds	r3, #8
 80021d6:	ed93 4b00 	vldr	d4, [r3]
 80021da:	eeb0 3b44 	vmov.f64	d3, d4
 80021de:	eeb0 2b45 	vmov.f64	d2, d5
 80021e2:	eeb0 1b46 	vmov.f64	d1, d6
 80021e6:	eeb0 0b47 	vmov.f64	d0, d7
 80021ea:	f7ff ff15 	bl	8002018 <calc_squared_distance>
 80021ee:	ed87 0b04 	vstr	d0, [r7, #16]
    if (current_distance < *closest_distance) {
 80021f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f4:	ed93 7b00 	vldr	d7, [r3]
 80021f8:	ed97 6b04 	vldr	d6, [r7, #16]
 80021fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002204:	d507      	bpl.n	8002216 <k_d_search+0x186>
        *closest_distance = current_distance;
 8002206:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002208:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800220c:	e9c1 2300 	strd	r2, r3, [r1]
        *closest_node = root;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	7afa      	ldrb	r2, [r7, #11]
 8002214:	701a      	strb	r2, [r3, #0]
    }
    // Start unwinding
    // If leaf node, skip
    if (left_child(root) >= MAX_LEN_K_D_TREE) {
 8002216:	7afb      	ldrb	r3, [r7, #11]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fee1 	bl	8001fe0 <left_child>
 800221e:	4603      	mov	r3, r0
 8002220:	2b3b      	cmp	r3, #59	; 0x3b
 8002222:	f300 808e 	bgt.w	8002342 <k_d_search+0x2b2>
    }
    // Distance is from point to plane
    // Note the plane is not infinite in length
    // However, it is hard to compute shortest distance to finite plane
    //  But, if k-d tree split by median of every point, can be treated as infinite plane
    if (axis == 0) {
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d142      	bne.n	80022b2 <k_d_search+0x222>
        // Check if closest distance is greater than perpendicular distance to splitting plane
        if (*closest_distance > calc_squared_distance(coord->x, 0, landmarks[k_d_tree[root]].x, 0)) {
 800222c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222e:	ed93 8b00 	vldr	d8, [r3]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	ed93 7b00 	vldr	d7, [r3]
 8002238:	7afb      	ldrb	r3, [r7, #11]
 800223a:	4a47      	ldr	r2, [pc, #284]	; (8002358 <k_d_search+0x2c8>)
 800223c:	5cd3      	ldrb	r3, [r2, r3]
 800223e:	4619      	mov	r1, r3
 8002240:	4a46      	ldr	r2, [pc, #280]	; (800235c <k_d_search+0x2cc>)
 8002242:	2358      	movs	r3, #88	; 0x58
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	ed93 6b00 	vldr	d6, [r3]
 800224e:	ed9f 3b40 	vldr	d3, [pc, #256]	; 8002350 <k_d_search+0x2c0>
 8002252:	eeb0 2b46 	vmov.f64	d2, d6
 8002256:	ed9f 1b3e 	vldr	d1, [pc, #248]	; 8002350 <k_d_search+0x2c0>
 800225a:	eeb0 0b47 	vmov.f64	d0, d7
 800225e:	f7ff fedb 	bl	8002018 <calc_squared_distance>
 8002262:	eeb0 7b40 	vmov.f64	d7, d0
 8002266:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800226a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226e:	dd69      	ble.n	8002344 <k_d_search+0x2b4>
            if (path_taken == 0) {
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10e      	bne.n	8002294 <k_d_search+0x204>
                k_d_search(coord, right_child(root), depth+1, closest_node, closest_distance);
 8002276:	7afb      	ldrb	r3, [r7, #11]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff febe 	bl	8001ffa <right_child>
 800227e:	4603      	mov	r3, r0
 8002280:	b2d9      	uxtb	r1, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f7ff feff 	bl	8002090 <k_d_search>
 8002292:	e057      	b.n	8002344 <k_d_search+0x2b4>
            } else {
                k_d_search(coord, left_child(root), depth+1, closest_node, closest_distance);
 8002294:	7afb      	ldrb	r3, [r7, #11]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fea2 	bl	8001fe0 <left_child>
 800229c:	4603      	mov	r3, r0
 800229e:	b2d9      	uxtb	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f7ff fef0 	bl	8002090 <k_d_search>
 80022b0:	e048      	b.n	8002344 <k_d_search+0x2b4>
            }
        }
    } else {
        if (*closest_distance > calc_squared_distance(0, coord->y, 0, landmarks[k_d_tree[root]].y)) {
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	ed93 8b00 	vldr	d8, [r3]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	ed93 7b02 	vldr	d7, [r3, #8]
 80022be:	7afb      	ldrb	r3, [r7, #11]
 80022c0:	4a25      	ldr	r2, [pc, #148]	; (8002358 <k_d_search+0x2c8>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	4619      	mov	r1, r3
 80022c6:	4a25      	ldr	r2, [pc, #148]	; (800235c <k_d_search+0x2cc>)
 80022c8:	2358      	movs	r3, #88	; 0x58
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	3308      	adds	r3, #8
 80022d2:	ed93 6b00 	vldr	d6, [r3]
 80022d6:	eeb0 3b46 	vmov.f64	d3, d6
 80022da:	ed9f 2b1d 	vldr	d2, [pc, #116]	; 8002350 <k_d_search+0x2c0>
 80022de:	eeb0 1b47 	vmov.f64	d1, d7
 80022e2:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8002350 <k_d_search+0x2c0>
 80022e6:	f7ff fe97 	bl	8002018 <calc_squared_distance>
 80022ea:	eeb0 7b40 	vmov.f64	d7, d0
 80022ee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80022f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f6:	dd25      	ble.n	8002344 <k_d_search+0x2b4>
            if (path_taken == 0) {
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10e      	bne.n	800231c <k_d_search+0x28c>
                k_d_search(coord, right_child(root), depth+1, closest_node, closest_distance);
 80022fe:	7afb      	ldrb	r3, [r7, #11]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fe7a 	bl	8001ffa <right_child>
 8002306:	4603      	mov	r3, r0
 8002308:	b2d9      	uxtb	r1, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f7ff febb 	bl	8002090 <k_d_search>
 800231a:	e013      	b.n	8002344 <k_d_search+0x2b4>
            } else {
                k_d_search(coord, left_child(root), depth+1, closest_node, closest_distance);
 800231c:	7afb      	ldrb	r3, [r7, #11]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fe5e 	bl	8001fe0 <left_child>
 8002324:	4603      	mov	r3, r0
 8002326:	b2d9      	uxtb	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f7ff feac 	bl	8002090 <k_d_search>
 8002338:	e004      	b.n	8002344 <k_d_search+0x2b4>
        return;
 800233a:	bf00      	nop
 800233c:	e002      	b.n	8002344 <k_d_search+0x2b4>
        return;
 800233e:	bf00      	nop
 8002340:	e000      	b.n	8002344 <k_d_search+0x2b4>
        return;
 8002342:	bf00      	nop
            }
        }
    }
}
 8002344:	3720      	adds	r7, #32
 8002346:	46bd      	mov	sp, r7
 8002348:	ecbd 8b02 	vpop	{d8}
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
	...
 8002358:	20000004 	.word	0x20000004
 800235c:	20000788 	.word	0x20000788

08002360 <get_nearest_node>:

uint8_t get_nearest_node(coord_t* coord, float_t* closest_distance) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af02      	add	r7, sp, #8
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
    *closest_distance = MAX_DISTANCE;
 800236a:	6839      	ldr	r1, [r7, #0]
 800236c:	a30d      	add	r3, pc, #52	; (adr r3, 80023a4 <get_nearest_node+0x44>)
 800236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002372:	e9c1 2300 	strd	r2, r3, [r1]
    uint8_t closest_node = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
    k_d_search(coord, 0, 0, &closest_node, closest_distance);
 800237a:	f107 020f 	add.w	r2, r7, #15
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	4613      	mov	r3, r2
 8002384:	2200      	movs	r2, #0
 8002386:	2100      	movs	r1, #0
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff fe81 	bl	8002090 <k_d_search>

    return k_d_tree[closest_node];
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	461a      	mov	r2, r3
 8002392:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <get_nearest_node+0x40>)
 8002394:	5c9b      	ldrb	r3, [r3, r2]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000004 	.word	0x20000004
 80023a4:	00000000 	.word	0x00000000
 80023a8:	412e8480 	.word	0x412e8480

080023ac <squared_distance_to_node>:

float_t squared_distance_to_node(coord_t* coord, uint8_t node) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	70fb      	strb	r3, [r7, #3]
    return calc_squared_distance(coord->x, coord->y, landmarks[node].x, landmarks[node].y);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	ed93 7b00 	vldr	d7, [r3]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	ed93 6b02 	vldr	d6, [r3, #8]
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	4a10      	ldr	r2, [pc, #64]	; (8002408 <squared_distance_to_node+0x5c>)
 80023c8:	2158      	movs	r1, #88	; 0x58
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	ed93 5b00 	vldr	d5, [r3]
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	4a0c      	ldr	r2, [pc, #48]	; (8002408 <squared_distance_to_node+0x5c>)
 80023d8:	2158      	movs	r1, #88	; 0x58
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	4413      	add	r3, r2
 80023e0:	3308      	adds	r3, #8
 80023e2:	ed93 4b00 	vldr	d4, [r3]
 80023e6:	eeb0 3b44 	vmov.f64	d3, d4
 80023ea:	eeb0 2b45 	vmov.f64	d2, d5
 80023ee:	eeb0 1b46 	vmov.f64	d1, d6
 80023f2:	eeb0 0b47 	vmov.f64	d0, d7
 80023f6:	f7ff fe0f 	bl	8002018 <calc_squared_distance>
 80023fa:	eeb0 7b40 	vmov.f64	d7, d0
}
 80023fe:	eeb0 0b47 	vmov.f64	d0, d7
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000788 	.word	0x20000788

0800240c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800240c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002444 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002410:	480d      	ldr	r0, [pc, #52]	; (8002448 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002412:	490e      	ldr	r1, [pc, #56]	; (800244c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002414:	4a0e      	ldr	r2, [pc, #56]	; (8002450 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002418:	e002      	b.n	8002420 <LoopCopyDataInit>

0800241a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800241c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800241e:	3304      	adds	r3, #4

08002420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002424:	d3f9      	bcc.n	800241a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002426:	4a0b      	ldr	r2, [pc, #44]	; (8002454 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002428:	4c0b      	ldr	r4, [pc, #44]	; (8002458 <LoopFillZerobss+0x26>)
  movs r3, #0
 800242a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800242c:	e001      	b.n	8002432 <LoopFillZerobss>

0800242e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800242e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002430:	3204      	adds	r2, #4

08002432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002434:	d3fb      	bcc.n	800242e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002436:	f7fe fd71 	bl	8000f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800243a:	f003 f8c1 	bl	80055c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800243e:	f7fe f93b 	bl	80006b8 <main>
  bx  lr    
 8002442:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002444:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800244c:	20001654 	.word	0x20001654
  ldr r2, =_sidata
 8002450:	080069f0 	.word	0x080069f0
  ldr r2, =_sbss
 8002454:	20001658 	.word	0x20001658
  ldr r4, =_ebss
 8002458:	200018f8 	.word	0x200018f8

0800245c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800245c:	e7fe      	b.n	800245c <ADC_IRQHandler>

0800245e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002462:	2003      	movs	r0, #3
 8002464:	f000 f928 	bl	80026b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002468:	2000      	movs	r0, #0
 800246a:	f000 f805 	bl	8002478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800246e:	f7fe fb83 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002480:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_InitTick+0x54>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_InitTick+0x58>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	4619      	mov	r1, r3
 800248a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800248e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002492:	fbb2 f3f3 	udiv	r3, r2, r3
 8002496:	4618      	mov	r0, r3
 8002498:	f000 f943 	bl	8002722 <HAL_SYSTICK_Config>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e00e      	b.n	80024c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b0f      	cmp	r3, #15
 80024aa:	d80a      	bhi.n	80024c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024ac:	2200      	movs	r2, #0
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024b4:	f000 f90b 	bl	80026ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024b8:	4a06      	ldr	r2, [pc, #24]	; (80024d4 <HAL_InitTick+0x5c>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	e000      	b.n	80024c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000000 	.word	0x20000000
 80024d0:	200015ec 	.word	0x200015ec
 80024d4:	200015e8 	.word	0x200015e8

080024d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_IncTick+0x20>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_IncTick+0x24>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4413      	add	r3, r2
 80024e8:	4a04      	ldr	r2, [pc, #16]	; (80024fc <HAL_IncTick+0x24>)
 80024ea:	6013      	str	r3, [r2, #0]
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	200015ec 	.word	0x200015ec
 80024fc:	200018e4 	.word	0x200018e4

08002500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return uwTick;
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <HAL_GetTick+0x14>)
 8002506:	681b      	ldr	r3, [r3, #0]
}
 8002508:	4618      	mov	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	200018e4 	.word	0x200018e4

08002518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <__NVIC_SetPriorityGrouping+0x40>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002534:	4013      	ands	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <__NVIC_SetPriorityGrouping+0x44>)
 8002542:	4313      	orrs	r3, r2
 8002544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002546:	4a04      	ldr	r2, [pc, #16]	; (8002558 <__NVIC_SetPriorityGrouping+0x40>)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	60d3      	str	r3, [r2, #12]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00
 800255c:	05fa0000 	.word	0x05fa0000

08002560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <__NVIC_GetPriorityGrouping+0x18>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	f003 0307 	and.w	r3, r3, #7
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	2b00      	cmp	r3, #0
 800258c:	db0b      	blt.n	80025a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	f003 021f 	and.w	r2, r3, #31
 8002594:	4907      	ldr	r1, [pc, #28]	; (80025b4 <__NVIC_EnableIRQ+0x38>)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	2001      	movs	r0, #1
 800259e:	fa00 f202 	lsl.w	r2, r0, r2
 80025a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	e000e100 	.word	0xe000e100

080025b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	6039      	str	r1, [r7, #0]
 80025c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	db0a      	blt.n	80025e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	490c      	ldr	r1, [pc, #48]	; (8002604 <__NVIC_SetPriority+0x4c>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	0112      	lsls	r2, r2, #4
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	440b      	add	r3, r1
 80025dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e0:	e00a      	b.n	80025f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	4908      	ldr	r1, [pc, #32]	; (8002608 <__NVIC_SetPriority+0x50>)
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	3b04      	subs	r3, #4
 80025f0:	0112      	lsls	r2, r2, #4
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	440b      	add	r3, r1
 80025f6:	761a      	strb	r2, [r3, #24]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000e100 	.word	0xe000e100
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800260c:	b480      	push	{r7}
 800260e:	b089      	sub	sp, #36	; 0x24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f1c3 0307 	rsb	r3, r3, #7
 8002626:	2b04      	cmp	r3, #4
 8002628:	bf28      	it	cs
 800262a:	2304      	movcs	r3, #4
 800262c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3304      	adds	r3, #4
 8002632:	2b06      	cmp	r3, #6
 8002634:	d902      	bls.n	800263c <NVIC_EncodePriority+0x30>
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3b03      	subs	r3, #3
 800263a:	e000      	b.n	800263e <NVIC_EncodePriority+0x32>
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002640:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43da      	mvns	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	401a      	ands	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002654:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	43d9      	mvns	r1, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002664:	4313      	orrs	r3, r2
         );
}
 8002666:	4618      	mov	r0, r3
 8002668:	3724      	adds	r7, #36	; 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002684:	d301      	bcc.n	800268a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002686:	2301      	movs	r3, #1
 8002688:	e00f      	b.n	80026aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800268a:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <SysTick_Config+0x40>)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002692:	210f      	movs	r1, #15
 8002694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002698:	f7ff ff8e 	bl	80025b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <SysTick_Config+0x40>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026a2:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <SysTick_Config+0x40>)
 80026a4:	2207      	movs	r2, #7
 80026a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	e000e010 	.word	0xe000e010

080026b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff ff29 	bl	8002518 <__NVIC_SetPriorityGrouping>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e0:	f7ff ff3e 	bl	8002560 <__NVIC_GetPriorityGrouping>
 80026e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	6978      	ldr	r0, [r7, #20]
 80026ec:	f7ff ff8e 	bl	800260c <NVIC_EncodePriority>
 80026f0:	4602      	mov	r2, r0
 80026f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff5d 	bl	80025b8 <__NVIC_SetPriority>
}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff31 	bl	800257c <__NVIC_EnableIRQ>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ffa2 	bl	8002674 <SysTick_Config>
 8002730:	4603      	mov	r3, r0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002740:	f3bf 8f5f 	dmb	sy
}
 8002744:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002746:	4b07      	ldr	r3, [pc, #28]	; (8002764 <HAL_MPU_Disable+0x28>)
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	4a06      	ldr	r2, [pc, #24]	; (8002764 <HAL_MPU_Disable+0x28>)
 800274c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002750:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_MPU_Disable+0x2c>)
 8002754:	2200      	movs	r2, #0
 8002756:	605a      	str	r2, [r3, #4]
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	e000ed00 	.word	0xe000ed00
 8002768:	e000ed90 	.word	0xe000ed90

0800276c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002774:	4a0b      	ldr	r2, [pc, #44]	; (80027a4 <HAL_MPU_Enable+0x38>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <HAL_MPU_Enable+0x3c>)
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	4a09      	ldr	r2, [pc, #36]	; (80027a8 <HAL_MPU_Enable+0x3c>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002788:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800278a:	f3bf 8f4f 	dsb	sy
}
 800278e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002790:	f3bf 8f6f 	isb	sy
}
 8002794:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000ed90 	.word	0xe000ed90
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	785a      	ldrb	r2, [r3, #1]
 80027b8:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <HAL_MPU_ConfigRegion+0x84>)
 80027ba:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d029      	beq.n	8002818 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80027c4:	4a1a      	ldr	r2, [pc, #104]	; (8002830 <HAL_MPU_ConfigRegion+0x84>)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	7b1b      	ldrb	r3, [r3, #12]
 80027d0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7adb      	ldrb	r3, [r3, #11]
 80027d6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	7a9b      	ldrb	r3, [r3, #10]
 80027de:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80027e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	7b5b      	ldrb	r3, [r3, #13]
 80027e6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80027e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	7b9b      	ldrb	r3, [r3, #14]
 80027ee:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80027f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	7bdb      	ldrb	r3, [r3, #15]
 80027f6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80027f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	7a5b      	ldrb	r3, [r3, #9]
 80027fe:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002800:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	7a1b      	ldrb	r3, [r3, #8]
 8002806:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002808:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	7812      	ldrb	r2, [r2, #0]
 800280e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002810:	4a07      	ldr	r2, [pc, #28]	; (8002830 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002812:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002814:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002816:	e005      	b.n	8002824 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002818:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_MPU_ConfigRegion+0x84>)
 800281a:	2200      	movs	r2, #0
 800281c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800281e:	4b04      	ldr	r3, [pc, #16]	; (8002830 <HAL_MPU_ConfigRegion+0x84>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000ed90 	.word	0xe000ed90

08002834 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002840:	f7ff fe5e 	bl	8002500 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e099      	b.n	8002984 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002870:	e00f      	b.n	8002892 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002872:	f7ff fe45 	bl	8002500 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b05      	cmp	r3, #5
 800287e:	d908      	bls.n	8002892 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2220      	movs	r2, #32
 8002884:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2203      	movs	r2, #3
 800288a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e078      	b.n	8002984 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1e8      	bne.n	8002872 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	4b38      	ldr	r3, [pc, #224]	; (800298c <HAL_DMA_Init+0x158>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d107      	bne.n	80028fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	4313      	orrs	r3, r2
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f023 0307 	bic.w	r3, r3, #7
 8002912:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	4313      	orrs	r3, r2
 800291c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	2b04      	cmp	r3, #4
 8002924:	d117      	bne.n	8002956 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00e      	beq.n	8002956 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fa77 	bl	8002e2c <DMA_CheckFifoParam>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2240      	movs	r2, #64	; 0x40
 8002948:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002952:	2301      	movs	r3, #1
 8002954:	e016      	b.n	8002984 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fa2e 	bl	8002dc0 <DMA_CalcBaseAndBitshift>
 8002964:	4603      	mov	r3, r0
 8002966:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296c:	223f      	movs	r2, #63	; 0x3f
 800296e:	409a      	lsls	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	e010803f 	.word	0xe010803f

08002990 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <HAL_DMA_Start_IT+0x26>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e048      	b.n	8002a48 <HAL_DMA_Start_IT+0xb8>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d137      	bne.n	8002a3a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2202      	movs	r2, #2
 80029ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f9c0 	bl	8002d64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	223f      	movs	r2, #63	; 0x3f
 80029ea:	409a      	lsls	r2, r3
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0216 	orr.w	r2, r2, #22
 80029fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a0e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0208 	orr.w	r2, r2, #8
 8002a26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	e005      	b.n	8002a46 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a42:	2302      	movs	r3, #2
 8002a44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002a5c:	4b8e      	ldr	r3, [pc, #568]	; (8002c98 <HAL_DMA_IRQHandler+0x248>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a8e      	ldr	r2, [pc, #568]	; (8002c9c <HAL_DMA_IRQHandler+0x24c>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	0a9b      	lsrs	r3, r3, #10
 8002a68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d01a      	beq.n	8002abc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d013      	beq.n	8002abc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0204 	bic.w	r2, r2, #4
 8002aa2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa8:	2208      	movs	r2, #8
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab4:	f043 0201 	orr.w	r2, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d012      	beq.n	8002af2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ade:	2201      	movs	r2, #1
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aea:	f043 0202 	orr.w	r2, r3, #2
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af6:	2204      	movs	r2, #4
 8002af8:	409a      	lsls	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d012      	beq.n	8002b28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00b      	beq.n	8002b28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b14:	2204      	movs	r2, #4
 8002b16:	409a      	lsls	r2, r3
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b20:	f043 0204 	orr.w	r2, r3, #4
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d043      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d03c      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4a:	2210      	movs	r2, #16
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d018      	beq.n	8002b92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d108      	bne.n	8002b80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d024      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	4798      	blx	r3
 8002b7e:	e01f      	b.n	8002bc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01b      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	4798      	blx	r3
 8002b90:	e016      	b.n	8002bc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d107      	bne.n	8002bb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0208 	bic.w	r2, r2, #8
 8002bae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 808f 	beq.w	8002cf0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8087 	beq.w	8002cf0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be6:	2220      	movs	r2, #32
 8002be8:	409a      	lsls	r2, r3
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d136      	bne.n	8002c68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0216 	bic.w	r2, r2, #22
 8002c08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d103      	bne.n	8002c2a <HAL_DMA_IRQHandler+0x1da>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d007      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0208 	bic.w	r2, r2, #8
 8002c38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3e:	223f      	movs	r2, #63	; 0x3f
 8002c40:	409a      	lsls	r2, r3
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d07e      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4798      	blx	r3
        }
        return;
 8002c66:	e079      	b.n	8002d5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d01d      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10d      	bne.n	8002ca0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d031      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	4798      	blx	r3
 8002c94:	e02c      	b.n	8002cf0 <HAL_DMA_IRQHandler+0x2a0>
 8002c96:	bf00      	nop
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d023      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	4798      	blx	r3
 8002cb0:	e01e      	b.n	8002cf0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10f      	bne.n	8002ce0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0210 	bic.w	r2, r2, #16
 8002cce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d032      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d022      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2205      	movs	r2, #5
 8002d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0201 	bic.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d307      	bcc.n	8002d38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f2      	bne.n	8002d1c <HAL_DMA_IRQHandler+0x2cc>
 8002d36:	e000      	b.n	8002d3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	4798      	blx	r3
 8002d5a:	e000      	b.n	8002d5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d5c:	bf00      	nop
    }
  }
}
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b40      	cmp	r3, #64	; 0x40
 8002d90:	d108      	bne.n	8002da4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002da2:	e007      	b.n	8002db4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	60da      	str	r2, [r3, #12]
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	3b10      	subs	r3, #16
 8002dd0:	4a13      	ldr	r2, [pc, #76]	; (8002e20 <DMA_CalcBaseAndBitshift+0x60>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dda:	4a12      	ldr	r2, [pc, #72]	; (8002e24 <DMA_CalcBaseAndBitshift+0x64>)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4413      	add	r3, r2
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d908      	bls.n	8002e00 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <DMA_CalcBaseAndBitshift+0x68>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	1d1a      	adds	r2, r3, #4
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	659a      	str	r2, [r3, #88]	; 0x58
 8002dfe:	e006      	b.n	8002e0e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <DMA_CalcBaseAndBitshift+0x68>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	aaaaaaab 	.word	0xaaaaaaab
 8002e24:	08006940 	.word	0x08006940
 8002e28:	fffffc00 	.word	0xfffffc00

08002e2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d11f      	bne.n	8002e86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b03      	cmp	r3, #3
 8002e4a:	d856      	bhi.n	8002efa <DMA_CheckFifoParam+0xce>
 8002e4c:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <DMA_CheckFifoParam+0x28>)
 8002e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e52:	bf00      	nop
 8002e54:	08002e65 	.word	0x08002e65
 8002e58:	08002e77 	.word	0x08002e77
 8002e5c:	08002e65 	.word	0x08002e65
 8002e60:	08002efb 	.word	0x08002efb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d046      	beq.n	8002efe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e74:	e043      	b.n	8002efe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e7e:	d140      	bne.n	8002f02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e84:	e03d      	b.n	8002f02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e8e:	d121      	bne.n	8002ed4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d837      	bhi.n	8002f06 <DMA_CheckFifoParam+0xda>
 8002e96:	a201      	add	r2, pc, #4	; (adr r2, 8002e9c <DMA_CheckFifoParam+0x70>)
 8002e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9c:	08002ead 	.word	0x08002ead
 8002ea0:	08002eb3 	.word	0x08002eb3
 8002ea4:	08002ead 	.word	0x08002ead
 8002ea8:	08002ec5 	.word	0x08002ec5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb0:	e030      	b.n	8002f14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d025      	beq.n	8002f0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec2:	e022      	b.n	8002f0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ecc:	d11f      	bne.n	8002f0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ed2:	e01c      	b.n	8002f0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d903      	bls.n	8002ee2 <DMA_CheckFifoParam+0xb6>
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d003      	beq.n	8002ee8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ee0:	e018      	b.n	8002f14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee6:	e015      	b.n	8002f14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00e      	beq.n	8002f12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef8:	e00b      	b.n	8002f12 <DMA_CheckFifoParam+0xe6>
      break;
 8002efa:	bf00      	nop
 8002efc:	e00a      	b.n	8002f14 <DMA_CheckFifoParam+0xe8>
      break;
 8002efe:	bf00      	nop
 8002f00:	e008      	b.n	8002f14 <DMA_CheckFifoParam+0xe8>
      break;
 8002f02:	bf00      	nop
 8002f04:	e006      	b.n	8002f14 <DMA_CheckFifoParam+0xe8>
      break;
 8002f06:	bf00      	nop
 8002f08:	e004      	b.n	8002f14 <DMA_CheckFifoParam+0xe8>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e002      	b.n	8002f14 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f0e:	bf00      	nop
 8002f10:	e000      	b.n	8002f14 <DMA_CheckFifoParam+0xe8>
      break;
 8002f12:	bf00      	nop
    }
  } 
  
  return status; 
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop

08002f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b089      	sub	sp, #36	; 0x24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f36:	2300      	movs	r3, #0
 8002f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	e175      	b.n	8003230 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f44:	2201      	movs	r2, #1
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	f040 8164 	bne.w	800322a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d005      	beq.n	8002f7a <HAL_GPIO_Init+0x56>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d130      	bne.n	8002fdc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	2203      	movs	r2, #3
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	f003 0201 	and.w	r2, r3, #1
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d017      	beq.n	8003018 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d123      	bne.n	800306c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	08da      	lsrs	r2, r3, #3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3208      	adds	r2, #8
 800302c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	220f      	movs	r2, #15
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	08da      	lsrs	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3208      	adds	r2, #8
 8003066:	69b9      	ldr	r1, [r7, #24]
 8003068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	2203      	movs	r2, #3
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0203 	and.w	r2, r3, #3
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80be 	beq.w	800322a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ae:	4b66      	ldr	r3, [pc, #408]	; (8003248 <HAL_GPIO_Init+0x324>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	4a65      	ldr	r2, [pc, #404]	; (8003248 <HAL_GPIO_Init+0x324>)
 80030b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030b8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ba:	4b63      	ldr	r3, [pc, #396]	; (8003248 <HAL_GPIO_Init+0x324>)
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80030c6:	4a61      	ldr	r2, [pc, #388]	; (800324c <HAL_GPIO_Init+0x328>)
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	089b      	lsrs	r3, r3, #2
 80030cc:	3302      	adds	r3, #2
 80030ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	220f      	movs	r2, #15
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a58      	ldr	r2, [pc, #352]	; (8003250 <HAL_GPIO_Init+0x32c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d037      	beq.n	8003162 <HAL_GPIO_Init+0x23e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a57      	ldr	r2, [pc, #348]	; (8003254 <HAL_GPIO_Init+0x330>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d031      	beq.n	800315e <HAL_GPIO_Init+0x23a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a56      	ldr	r2, [pc, #344]	; (8003258 <HAL_GPIO_Init+0x334>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d02b      	beq.n	800315a <HAL_GPIO_Init+0x236>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a55      	ldr	r2, [pc, #340]	; (800325c <HAL_GPIO_Init+0x338>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d025      	beq.n	8003156 <HAL_GPIO_Init+0x232>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a54      	ldr	r2, [pc, #336]	; (8003260 <HAL_GPIO_Init+0x33c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d01f      	beq.n	8003152 <HAL_GPIO_Init+0x22e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a53      	ldr	r2, [pc, #332]	; (8003264 <HAL_GPIO_Init+0x340>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d019      	beq.n	800314e <HAL_GPIO_Init+0x22a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a52      	ldr	r2, [pc, #328]	; (8003268 <HAL_GPIO_Init+0x344>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_GPIO_Init+0x226>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a51      	ldr	r2, [pc, #324]	; (800326c <HAL_GPIO_Init+0x348>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00d      	beq.n	8003146 <HAL_GPIO_Init+0x222>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a50      	ldr	r2, [pc, #320]	; (8003270 <HAL_GPIO_Init+0x34c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d007      	beq.n	8003142 <HAL_GPIO_Init+0x21e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a4f      	ldr	r2, [pc, #316]	; (8003274 <HAL_GPIO_Init+0x350>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d101      	bne.n	800313e <HAL_GPIO_Init+0x21a>
 800313a:	2309      	movs	r3, #9
 800313c:	e012      	b.n	8003164 <HAL_GPIO_Init+0x240>
 800313e:	230a      	movs	r3, #10
 8003140:	e010      	b.n	8003164 <HAL_GPIO_Init+0x240>
 8003142:	2308      	movs	r3, #8
 8003144:	e00e      	b.n	8003164 <HAL_GPIO_Init+0x240>
 8003146:	2307      	movs	r3, #7
 8003148:	e00c      	b.n	8003164 <HAL_GPIO_Init+0x240>
 800314a:	2306      	movs	r3, #6
 800314c:	e00a      	b.n	8003164 <HAL_GPIO_Init+0x240>
 800314e:	2305      	movs	r3, #5
 8003150:	e008      	b.n	8003164 <HAL_GPIO_Init+0x240>
 8003152:	2304      	movs	r3, #4
 8003154:	e006      	b.n	8003164 <HAL_GPIO_Init+0x240>
 8003156:	2303      	movs	r3, #3
 8003158:	e004      	b.n	8003164 <HAL_GPIO_Init+0x240>
 800315a:	2302      	movs	r3, #2
 800315c:	e002      	b.n	8003164 <HAL_GPIO_Init+0x240>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <HAL_GPIO_Init+0x240>
 8003162:	2300      	movs	r3, #0
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	f002 0203 	and.w	r2, r2, #3
 800316a:	0092      	lsls	r2, r2, #2
 800316c:	4093      	lsls	r3, r2
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4313      	orrs	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003174:	4935      	ldr	r1, [pc, #212]	; (800324c <HAL_GPIO_Init+0x328>)
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	3302      	adds	r3, #2
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003182:	4b3d      	ldr	r3, [pc, #244]	; (8003278 <HAL_GPIO_Init+0x354>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	43db      	mvns	r3, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4013      	ands	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031a6:	4a34      	ldr	r2, [pc, #208]	; (8003278 <HAL_GPIO_Init+0x354>)
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031ac:	4b32      	ldr	r3, [pc, #200]	; (8003278 <HAL_GPIO_Init+0x354>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031d0:	4a29      	ldr	r2, [pc, #164]	; (8003278 <HAL_GPIO_Init+0x354>)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031d6:	4b28      	ldr	r3, [pc, #160]	; (8003278 <HAL_GPIO_Init+0x354>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	43db      	mvns	r3, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4013      	ands	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031fa:	4a1f      	ldr	r2, [pc, #124]	; (8003278 <HAL_GPIO_Init+0x354>)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003200:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <HAL_GPIO_Init+0x354>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003224:	4a14      	ldr	r2, [pc, #80]	; (8003278 <HAL_GPIO_Init+0x354>)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3301      	adds	r3, #1
 800322e:	61fb      	str	r3, [r7, #28]
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	2b0f      	cmp	r3, #15
 8003234:	f67f ae86 	bls.w	8002f44 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	3724      	adds	r7, #36	; 0x24
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40023800 	.word	0x40023800
 800324c:	40013800 	.word	0x40013800
 8003250:	40020000 	.word	0x40020000
 8003254:	40020400 	.word	0x40020400
 8003258:	40020800 	.word	0x40020800
 800325c:	40020c00 	.word	0x40020c00
 8003260:	40021000 	.word	0x40021000
 8003264:	40021400 	.word	0x40021400
 8003268:	40021800 	.word	0x40021800
 800326c:	40021c00 	.word	0x40021c00
 8003270:	40022000 	.word	0x40022000
 8003274:	40022400 	.word	0x40022400
 8003278:	40013c00 	.word	0x40013c00

0800327c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	807b      	strh	r3, [r7, #2]
 8003288:	4613      	mov	r3, r2
 800328a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800328c:	787b      	ldrb	r3, [r7, #1]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003292:	887a      	ldrh	r2, [r7, #2]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003298:	e003      	b.n	80032a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800329a:	887b      	ldrh	r3, [r7, #2]
 800329c:	041a      	lsls	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	619a      	str	r2, [r3, #24]
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a04      	ldr	r2, [pc, #16]	; (80032cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032be:	6013      	str	r3, [r2, #0]
}
 80032c0:	bf00      	nop
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40007000 	.word	0x40007000

080032d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80032d6:	2300      	movs	r3, #0
 80032d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032da:	4b23      	ldr	r3, [pc, #140]	; (8003368 <HAL_PWREx_EnableOverDrive+0x98>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	4a22      	ldr	r2, [pc, #136]	; (8003368 <HAL_PWREx_EnableOverDrive+0x98>)
 80032e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e4:	6413      	str	r3, [r2, #64]	; 0x40
 80032e6:	4b20      	ldr	r3, [pc, #128]	; (8003368 <HAL_PWREx_EnableOverDrive+0x98>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032f2:	4b1e      	ldr	r3, [pc, #120]	; (800336c <HAL_PWREx_EnableOverDrive+0x9c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1d      	ldr	r2, [pc, #116]	; (800336c <HAL_PWREx_EnableOverDrive+0x9c>)
 80032f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032fe:	f7ff f8ff 	bl	8002500 <HAL_GetTick>
 8003302:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003304:	e009      	b.n	800331a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003306:	f7ff f8fb 	bl	8002500 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003314:	d901      	bls.n	800331a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e022      	b.n	8003360 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800331a:	4b14      	ldr	r3, [pc, #80]	; (800336c <HAL_PWREx_EnableOverDrive+0x9c>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003326:	d1ee      	bne.n	8003306 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003328:	4b10      	ldr	r3, [pc, #64]	; (800336c <HAL_PWREx_EnableOverDrive+0x9c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0f      	ldr	r2, [pc, #60]	; (800336c <HAL_PWREx_EnableOverDrive+0x9c>)
 800332e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003332:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003334:	f7ff f8e4 	bl	8002500 <HAL_GetTick>
 8003338:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800333a:	e009      	b.n	8003350 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800333c:	f7ff f8e0 	bl	8002500 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800334a:	d901      	bls.n	8003350 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e007      	b.n	8003360 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003350:	4b06      	ldr	r3, [pc, #24]	; (800336c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800335c:	d1ee      	bne.n	800333c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40023800 	.word	0x40023800
 800336c:	40007000 	.word	0x40007000

08003370 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003378:	2300      	movs	r3, #0
 800337a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e29b      	b.n	80038be <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8087 	beq.w	80034a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003394:	4b96      	ldr	r3, [pc, #600]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 030c 	and.w	r3, r3, #12
 800339c:	2b04      	cmp	r3, #4
 800339e:	d00c      	beq.n	80033ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a0:	4b93      	ldr	r3, [pc, #588]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 030c 	and.w	r3, r3, #12
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d112      	bne.n	80033d2 <HAL_RCC_OscConfig+0x62>
 80033ac:	4b90      	ldr	r3, [pc, #576]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b8:	d10b      	bne.n	80033d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ba:	4b8d      	ldr	r3, [pc, #564]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d06c      	beq.n	80034a0 <HAL_RCC_OscConfig+0x130>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d168      	bne.n	80034a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e275      	b.n	80038be <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033da:	d106      	bne.n	80033ea <HAL_RCC_OscConfig+0x7a>
 80033dc:	4b84      	ldr	r3, [pc, #528]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a83      	ldr	r2, [pc, #524]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 80033e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	e02e      	b.n	8003448 <HAL_RCC_OscConfig+0xd8>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x9c>
 80033f2:	4b7f      	ldr	r3, [pc, #508]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a7e      	ldr	r2, [pc, #504]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 80033f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b7c      	ldr	r3, [pc, #496]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a7b      	ldr	r2, [pc, #492]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 8003404:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e01d      	b.n	8003448 <HAL_RCC_OscConfig+0xd8>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003414:	d10c      	bne.n	8003430 <HAL_RCC_OscConfig+0xc0>
 8003416:	4b76      	ldr	r3, [pc, #472]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a75      	ldr	r2, [pc, #468]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 800341c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	4b73      	ldr	r3, [pc, #460]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a72      	ldr	r2, [pc, #456]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 8003428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	e00b      	b.n	8003448 <HAL_RCC_OscConfig+0xd8>
 8003430:	4b6f      	ldr	r3, [pc, #444]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a6e      	ldr	r2, [pc, #440]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 8003436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	4b6c      	ldr	r3, [pc, #432]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a6b      	ldr	r2, [pc, #428]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 8003442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d013      	beq.n	8003478 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7ff f856 	bl	8002500 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003458:	f7ff f852 	bl	8002500 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	; 0x64
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e229      	b.n	80038be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	4b61      	ldr	r3, [pc, #388]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0xe8>
 8003476:	e014      	b.n	80034a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003478:	f7ff f842 	bl	8002500 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003480:	f7ff f83e 	bl	8002500 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b64      	cmp	r3, #100	; 0x64
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e215      	b.n	80038be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003492:	4b57      	ldr	r3, [pc, #348]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0x110>
 800349e:	e000      	b.n	80034a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d069      	beq.n	8003582 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ae:	4b50      	ldr	r3, [pc, #320]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00b      	beq.n	80034d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ba:	4b4d      	ldr	r3, [pc, #308]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d11c      	bne.n	8003500 <HAL_RCC_OscConfig+0x190>
 80034c6:	4b4a      	ldr	r3, [pc, #296]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d116      	bne.n	8003500 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d2:	4b47      	ldr	r3, [pc, #284]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d005      	beq.n	80034ea <HAL_RCC_OscConfig+0x17a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d001      	beq.n	80034ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e1e9      	b.n	80038be <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ea:	4b41      	ldr	r3, [pc, #260]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	493d      	ldr	r1, [pc, #244]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fe:	e040      	b.n	8003582 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d023      	beq.n	8003550 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003508:	4b39      	ldr	r3, [pc, #228]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a38      	ldr	r2, [pc, #224]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fe fff4 	bl	8002500 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351c:	f7fe fff0 	bl	8002500 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e1c7      	b.n	80038be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352e:	4b30      	ldr	r3, [pc, #192]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353a:	4b2d      	ldr	r3, [pc, #180]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4929      	ldr	r1, [pc, #164]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 800354a:	4313      	orrs	r3, r2
 800354c:	600b      	str	r3, [r1, #0]
 800354e:	e018      	b.n	8003582 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003550:	4b27      	ldr	r3, [pc, #156]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a26      	ldr	r2, [pc, #152]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 8003556:	f023 0301 	bic.w	r3, r3, #1
 800355a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355c:	f7fe ffd0 	bl	8002500 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003564:	f7fe ffcc 	bl	8002500 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e1a3      	b.n	80038be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003576:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d038      	beq.n	8003600 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d019      	beq.n	80035ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003596:	4b16      	ldr	r3, [pc, #88]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 8003598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359a:	4a15      	ldr	r2, [pc, #84]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a2:	f7fe ffad 	bl	8002500 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035aa:	f7fe ffa9 	bl	8002500 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e180      	b.n	80038be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035bc:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 80035be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x23a>
 80035c8:	e01a      	b.n	8003600 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ca:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 80035cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ce:	4a08      	ldr	r2, [pc, #32]	; (80035f0 <HAL_RCC_OscConfig+0x280>)
 80035d0:	f023 0301 	bic.w	r3, r3, #1
 80035d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d6:	f7fe ff93 	bl	8002500 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035dc:	e00a      	b.n	80035f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035de:	f7fe ff8f 	bl	8002500 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d903      	bls.n	80035f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e166      	b.n	80038be <HAL_RCC_OscConfig+0x54e>
 80035f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f4:	4b92      	ldr	r3, [pc, #584]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 80035f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1ee      	bne.n	80035de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80a4 	beq.w	8003756 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800360e:	4b8c      	ldr	r3, [pc, #560]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10d      	bne.n	8003636 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800361a:	4b89      	ldr	r3, [pc, #548]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	4a88      	ldr	r2, [pc, #544]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 8003620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003624:	6413      	str	r3, [r2, #64]	; 0x40
 8003626:	4b86      	ldr	r3, [pc, #536]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003632:	2301      	movs	r3, #1
 8003634:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003636:	4b83      	ldr	r3, [pc, #524]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363e:	2b00      	cmp	r3, #0
 8003640:	d118      	bne.n	8003674 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003642:	4b80      	ldr	r3, [pc, #512]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a7f      	ldr	r2, [pc, #508]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 8003648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800364e:	f7fe ff57 	bl	8002500 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003656:	f7fe ff53 	bl	8002500 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b64      	cmp	r3, #100	; 0x64
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e12a      	b.n	80038be <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003668:	4b76      	ldr	r3, [pc, #472]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d106      	bne.n	800368a <HAL_RCC_OscConfig+0x31a>
 800367c:	4b70      	ldr	r3, [pc, #448]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003680:	4a6f      	ldr	r2, [pc, #444]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	6713      	str	r3, [r2, #112]	; 0x70
 8003688:	e02d      	b.n	80036e6 <HAL_RCC_OscConfig+0x376>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x33c>
 8003692:	4b6b      	ldr	r3, [pc, #428]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	4a6a      	ldr	r2, [pc, #424]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	6713      	str	r3, [r2, #112]	; 0x70
 800369e:	4b68      	ldr	r3, [pc, #416]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	4a67      	ldr	r2, [pc, #412]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 80036a4:	f023 0304 	bic.w	r3, r3, #4
 80036a8:	6713      	str	r3, [r2, #112]	; 0x70
 80036aa:	e01c      	b.n	80036e6 <HAL_RCC_OscConfig+0x376>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2b05      	cmp	r3, #5
 80036b2:	d10c      	bne.n	80036ce <HAL_RCC_OscConfig+0x35e>
 80036b4:	4b62      	ldr	r3, [pc, #392]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	4a61      	ldr	r2, [pc, #388]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 80036ba:	f043 0304 	orr.w	r3, r3, #4
 80036be:	6713      	str	r3, [r2, #112]	; 0x70
 80036c0:	4b5f      	ldr	r3, [pc, #380]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	4a5e      	ldr	r2, [pc, #376]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6713      	str	r3, [r2, #112]	; 0x70
 80036cc:	e00b      	b.n	80036e6 <HAL_RCC_OscConfig+0x376>
 80036ce:	4b5c      	ldr	r3, [pc, #368]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	4a5b      	ldr	r2, [pc, #364]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	6713      	str	r3, [r2, #112]	; 0x70
 80036da:	4b59      	ldr	r3, [pc, #356]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	4a58      	ldr	r2, [pc, #352]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 80036e0:	f023 0304 	bic.w	r3, r3, #4
 80036e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d015      	beq.n	800371a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ee:	f7fe ff07 	bl	8002500 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f4:	e00a      	b.n	800370c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f6:	f7fe ff03 	bl	8002500 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	f241 3288 	movw	r2, #5000	; 0x1388
 8003704:	4293      	cmp	r3, r2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e0d8      	b.n	80038be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370c:	4b4c      	ldr	r3, [pc, #304]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0ee      	beq.n	80036f6 <HAL_RCC_OscConfig+0x386>
 8003718:	e014      	b.n	8003744 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371a:	f7fe fef1 	bl	8002500 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003720:	e00a      	b.n	8003738 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003722:	f7fe feed 	bl	8002500 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003730:	4293      	cmp	r3, r2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e0c2      	b.n	80038be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003738:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ee      	bne.n	8003722 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003744:	7dfb      	ldrb	r3, [r7, #23]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d105      	bne.n	8003756 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800374a:	4b3d      	ldr	r3, [pc, #244]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	4a3c      	ldr	r2, [pc, #240]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 8003750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003754:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 80ae 	beq.w	80038bc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003760:	4b37      	ldr	r3, [pc, #220]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 030c 	and.w	r3, r3, #12
 8003768:	2b08      	cmp	r3, #8
 800376a:	d06d      	beq.n	8003848 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d14b      	bne.n	800380c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003774:	4b32      	ldr	r3, [pc, #200]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a31      	ldr	r2, [pc, #196]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 800377a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800377e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fe febe 	bl	8002500 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003788:	f7fe feba 	bl	8002500 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e091      	b.n	80038be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379a:	4b29      	ldr	r3, [pc, #164]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69da      	ldr	r2, [r3, #28]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	019b      	lsls	r3, r3, #6
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	085b      	lsrs	r3, r3, #1
 80037be:	3b01      	subs	r3, #1
 80037c0:	041b      	lsls	r3, r3, #16
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	061b      	lsls	r3, r3, #24
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	071b      	lsls	r3, r3, #28
 80037d2:	491b      	ldr	r1, [pc, #108]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a18      	ldr	r2, [pc, #96]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 80037de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7fe fe8c 	bl	8002500 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fe fe88 	bl	8002500 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e05f      	b.n	80038be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fe:	4b10      	ldr	r3, [pc, #64]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0x47c>
 800380a:	e057      	b.n	80038bc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380c:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a0b      	ldr	r2, [pc, #44]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 8003812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003818:	f7fe fe72 	bl	8002500 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003820:	f7fe fe6e 	bl	8002500 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e045      	b.n	80038be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003832:	4b03      	ldr	r3, [pc, #12]	; (8003840 <HAL_RCC_OscConfig+0x4d0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x4b0>
 800383e:	e03d      	b.n	80038bc <HAL_RCC_OscConfig+0x54c>
 8003840:	40023800 	.word	0x40023800
 8003844:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003848:	4b1f      	ldr	r3, [pc, #124]	; (80038c8 <HAL_RCC_OscConfig+0x558>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d030      	beq.n	80038b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d129      	bne.n	80038b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d122      	bne.n	80038b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003878:	4013      	ands	r3, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800387e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003880:	4293      	cmp	r3, r2
 8003882:	d119      	bne.n	80038b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	085b      	lsrs	r3, r3, #1
 8003890:	3b01      	subs	r3, #1
 8003892:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d10f      	bne.n	80038b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d107      	bne.n	80038b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40023800 	.word	0x40023800

080038cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e0d0      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038e4:	4b6a      	ldr	r3, [pc, #424]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 030f 	and.w	r3, r3, #15
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d910      	bls.n	8003914 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f2:	4b67      	ldr	r3, [pc, #412]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 020f 	bic.w	r2, r3, #15
 80038fa:	4965      	ldr	r1, [pc, #404]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	4313      	orrs	r3, r2
 8003900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003902:	4b63      	ldr	r3, [pc, #396]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0b8      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d020      	beq.n	8003962 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800392c:	4b59      	ldr	r3, [pc, #356]	; (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a58      	ldr	r2, [pc, #352]	; (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 8003932:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003936:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003944:	4b53      	ldr	r3, [pc, #332]	; (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4a52      	ldr	r2, [pc, #328]	; (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 800394a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800394e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003950:	4b50      	ldr	r3, [pc, #320]	; (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	494d      	ldr	r1, [pc, #308]	; (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d040      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d107      	bne.n	8003986 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003976:	4b47      	ldr	r3, [pc, #284]	; (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d115      	bne.n	80039ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e07f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d107      	bne.n	800399e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398e:	4b41      	ldr	r3, [pc, #260]	; (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e073      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399e:	4b3d      	ldr	r3, [pc, #244]	; (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e06b      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ae:	4b39      	ldr	r3, [pc, #228]	; (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f023 0203 	bic.w	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4936      	ldr	r1, [pc, #216]	; (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c0:	f7fe fd9e 	bl	8002500 <HAL_GetTick>
 80039c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c6:	e00a      	b.n	80039de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c8:	f7fe fd9a 	bl	8002500 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e053      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039de:	4b2d      	ldr	r3, [pc, #180]	; (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 020c 	and.w	r2, r3, #12
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d1eb      	bne.n	80039c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039f0:	4b27      	ldr	r3, [pc, #156]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d210      	bcs.n	8003a20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b24      	ldr	r3, [pc, #144]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 020f 	bic.w	r2, r3, #15
 8003a06:	4922      	ldr	r1, [pc, #136]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b20      	ldr	r3, [pc, #128]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e032      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4916      	ldr	r1, [pc, #88]	; (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a4a:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	490e      	ldr	r1, [pc, #56]	; (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a5e:	f000 f821 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8003a62:	4602      	mov	r2, r0
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	091b      	lsrs	r3, r3, #4
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	490a      	ldr	r1, [pc, #40]	; (8003a98 <HAL_RCC_ClockConfig+0x1cc>)
 8003a70:	5ccb      	ldrb	r3, [r1, r3]
 8003a72:	fa22 f303 	lsr.w	r3, r2, r3
 8003a76:	4a09      	ldr	r2, [pc, #36]	; (8003a9c <HAL_RCC_ClockConfig+0x1d0>)
 8003a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a7a:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <HAL_RCC_ClockConfig+0x1d4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fe fcfa 	bl	8002478 <HAL_InitTick>

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40023c00 	.word	0x40023c00
 8003a94:	40023800 	.word	0x40023800
 8003a98:	08006928 	.word	0x08006928
 8003a9c:	20000000 	.word	0x20000000
 8003aa0:	200015e8 	.word	0x200015e8

08003aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa8:	b094      	sub	sp, #80	; 0x50
 8003aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	647b      	str	r3, [r7, #68]	; 0x44
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003abc:	4b79      	ldr	r3, [pc, #484]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d00d      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	f200 80e1 	bhi.w	8003c90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d003      	beq.n	8003ade <HAL_RCC_GetSysClockFreq+0x3a>
 8003ad6:	e0db      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ad8:	4b73      	ldr	r3, [pc, #460]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ada:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003adc:	e0db      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ade:	4b73      	ldr	r3, [pc, #460]	; (8003cac <HAL_RCC_GetSysClockFreq+0x208>)
 8003ae0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ae2:	e0d8      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ae4:	4b6f      	ldr	r3, [pc, #444]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aec:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003aee:	4b6d      	ldr	r3, [pc, #436]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d063      	beq.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003afa:	4b6a      	ldr	r3, [pc, #424]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	099b      	lsrs	r3, r3, #6
 8003b00:	2200      	movs	r2, #0
 8003b02:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b0e:	2300      	movs	r3, #0
 8003b10:	637b      	str	r3, [r7, #52]	; 0x34
 8003b12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b16:	4622      	mov	r2, r4
 8003b18:	462b      	mov	r3, r5
 8003b1a:	f04f 0000 	mov.w	r0, #0
 8003b1e:	f04f 0100 	mov.w	r1, #0
 8003b22:	0159      	lsls	r1, r3, #5
 8003b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b28:	0150      	lsls	r0, r2, #5
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4621      	mov	r1, r4
 8003b30:	1a51      	subs	r1, r2, r1
 8003b32:	6139      	str	r1, [r7, #16]
 8003b34:	4629      	mov	r1, r5
 8003b36:	eb63 0301 	sbc.w	r3, r3, r1
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b48:	4659      	mov	r1, fp
 8003b4a:	018b      	lsls	r3, r1, #6
 8003b4c:	4651      	mov	r1, sl
 8003b4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b52:	4651      	mov	r1, sl
 8003b54:	018a      	lsls	r2, r1, #6
 8003b56:	4651      	mov	r1, sl
 8003b58:	ebb2 0801 	subs.w	r8, r2, r1
 8003b5c:	4659      	mov	r1, fp
 8003b5e:	eb63 0901 	sbc.w	r9, r3, r1
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b76:	4690      	mov	r8, r2
 8003b78:	4699      	mov	r9, r3
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	eb18 0303 	adds.w	r3, r8, r3
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	462b      	mov	r3, r5
 8003b84:	eb49 0303 	adc.w	r3, r9, r3
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b96:	4629      	mov	r1, r5
 8003b98:	024b      	lsls	r3, r1, #9
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	024a      	lsls	r2, r1, #9
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003baa:	2200      	movs	r2, #0
 8003bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bb4:	f7fc fb94 	bl	80002e0 <__aeabi_uldivmod>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc0:	e058      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc2:	4b38      	ldr	r3, [pc, #224]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	099b      	lsrs	r3, r3, #6
 8003bc8:	2200      	movs	r2, #0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	4611      	mov	r1, r2
 8003bce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bd2:	623b      	str	r3, [r7, #32]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bdc:	4642      	mov	r2, r8
 8003bde:	464b      	mov	r3, r9
 8003be0:	f04f 0000 	mov.w	r0, #0
 8003be4:	f04f 0100 	mov.w	r1, #0
 8003be8:	0159      	lsls	r1, r3, #5
 8003bea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bee:	0150      	lsls	r0, r2, #5
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4641      	mov	r1, r8
 8003bf6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c14:	ebb2 040a 	subs.w	r4, r2, sl
 8003c18:	eb63 050b 	sbc.w	r5, r3, fp
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	00eb      	lsls	r3, r5, #3
 8003c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c2a:	00e2      	lsls	r2, r4, #3
 8003c2c:	4614      	mov	r4, r2
 8003c2e:	461d      	mov	r5, r3
 8003c30:	4643      	mov	r3, r8
 8003c32:	18e3      	adds	r3, r4, r3
 8003c34:	603b      	str	r3, [r7, #0]
 8003c36:	464b      	mov	r3, r9
 8003c38:	eb45 0303 	adc.w	r3, r5, r3
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	f04f 0300 	mov.w	r3, #0
 8003c46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	028b      	lsls	r3, r1, #10
 8003c4e:	4621      	mov	r1, r4
 8003c50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c54:	4621      	mov	r1, r4
 8003c56:	028a      	lsls	r2, r1, #10
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5e:	2200      	movs	r2, #0
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	61fa      	str	r2, [r7, #28]
 8003c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c68:	f7fc fb3a 	bl	80002e0 <__aeabi_uldivmod>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4613      	mov	r3, r2
 8003c72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c74:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	0c1b      	lsrs	r3, r3, #16
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	3301      	adds	r3, #1
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003c84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c8e:	e002      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c90:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3750      	adds	r7, #80	; 0x50
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	00f42400 	.word	0x00f42400
 8003cac:	007a1200 	.word	0x007a1200

08003cb0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb4:	4b03      	ldr	r3, [pc, #12]	; (8003cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	20000000 	.word	0x20000000

08003cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ccc:	f7ff fff0 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	0a9b      	lsrs	r3, r3, #10
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	4903      	ldr	r1, [pc, #12]	; (8003cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cde:	5ccb      	ldrb	r3, [r1, r3]
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	08006938 	.word	0x08006938

08003cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cf4:	f7ff ffdc 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	0b5b      	lsrs	r3, r3, #13
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4903      	ldr	r1, [pc, #12]	; (8003d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40023800 	.word	0x40023800
 8003d14:	08006938 	.word	0x08006938

08003d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d012      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d40:	4b69      	ldr	r3, [pc, #420]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	4a68      	ldr	r2, [pc, #416]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d4a:	6093      	str	r3, [r2, #8]
 8003d4c:	4b66      	ldr	r3, [pc, #408]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d54:	4964      	ldr	r1, [pc, #400]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d62:	2301      	movs	r3, #1
 8003d64:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d017      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d72:	4b5d      	ldr	r3, [pc, #372]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d80:	4959      	ldr	r1, [pc, #356]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d90:	d101      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d92:	2301      	movs	r3, #1
 8003d94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d017      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dae:	4b4e      	ldr	r3, [pc, #312]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003db4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	494a      	ldr	r1, [pc, #296]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003dea:	2301      	movs	r3, #1
 8003dec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 808b 	beq.w	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dfc:	4b3a      	ldr	r3, [pc, #232]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	4a39      	ldr	r2, [pc, #228]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e06:	6413      	str	r3, [r2, #64]	; 0x40
 8003e08:	4b37      	ldr	r3, [pc, #220]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e14:	4b35      	ldr	r3, [pc, #212]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a34      	ldr	r2, [pc, #208]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e20:	f7fe fb6e 	bl	8002500 <HAL_GetTick>
 8003e24:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e28:	f7fe fb6a 	bl	8002500 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b64      	cmp	r3, #100	; 0x64
 8003e34:	d901      	bls.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e38f      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e3a:	4b2c      	ldr	r3, [pc, #176]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e46:	4b28      	ldr	r3, [pc, #160]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e4e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d035      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d02e      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e64:	4b20      	ldr	r3, [pc, #128]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e6c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e72:	4a1d      	ldr	r2, [pc, #116]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e78:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7e:	4a1a      	ldr	r2, [pc, #104]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e86:	4a18      	ldr	r2, [pc, #96]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e8c:	4b16      	ldr	r3, [pc, #88]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d114      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7fe fb32 	bl	8002500 <HAL_GetTick>
 8003e9c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9e:	e00a      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea0:	f7fe fb2e 	bl	8002500 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e351      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0ee      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ece:	d111      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ed0:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ede:	400b      	ands	r3, r1
 8003ee0:	4901      	ldr	r1, [pc, #4]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	608b      	str	r3, [r1, #8]
 8003ee6:	e00b      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	40007000 	.word	0x40007000
 8003ef0:	0ffffcff 	.word	0x0ffffcff
 8003ef4:	4bac      	ldr	r3, [pc, #688]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4aab      	ldr	r2, [pc, #684]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003efa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003efe:	6093      	str	r3, [r2, #8]
 8003f00:	4ba9      	ldr	r3, [pc, #676]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f0c:	49a6      	ldr	r1, [pc, #664]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0310 	and.w	r3, r3, #16
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d010      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f1e:	4ba2      	ldr	r3, [pc, #648]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f24:	4aa0      	ldr	r2, [pc, #640]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f2e:	4b9e      	ldr	r3, [pc, #632]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f30:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	499b      	ldr	r1, [pc, #620]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f4c:	4b96      	ldr	r3, [pc, #600]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f5a:	4993      	ldr	r1, [pc, #588]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f6e:	4b8e      	ldr	r3, [pc, #568]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f7c:	498a      	ldr	r1, [pc, #552]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f90:	4b85      	ldr	r3, [pc, #532]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f9e:	4982      	ldr	r1, [pc, #520]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fb2:	4b7d      	ldr	r3, [pc, #500]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc0:	4979      	ldr	r1, [pc, #484]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fd4:	4b74      	ldr	r3, [pc, #464]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	f023 0203 	bic.w	r2, r3, #3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe2:	4971      	ldr	r1, [pc, #452]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ff6:	4b6c      	ldr	r3, [pc, #432]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffc:	f023 020c 	bic.w	r2, r3, #12
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004004:	4968      	ldr	r1, [pc, #416]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004018:	4b63      	ldr	r3, [pc, #396]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004026:	4960      	ldr	r1, [pc, #384]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800403a:	4b5b      	ldr	r3, [pc, #364]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004040:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004048:	4957      	ldr	r1, [pc, #348]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800405c:	4b52      	ldr	r3, [pc, #328]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004062:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406a:	494f      	ldr	r1, [pc, #316]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800407e:	4b4a      	ldr	r3, [pc, #296]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004084:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408c:	4946      	ldr	r1, [pc, #280]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040a0:	4b41      	ldr	r3, [pc, #260]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ae:	493e      	ldr	r1, [pc, #248]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80040c2:	4b39      	ldr	r3, [pc, #228]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d0:	4935      	ldr	r1, [pc, #212]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040e4:	4b30      	ldr	r3, [pc, #192]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040f2:	492d      	ldr	r1, [pc, #180]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d011      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004106:	4b28      	ldr	r3, [pc, #160]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004114:	4924      	ldr	r1, [pc, #144]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004120:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004124:	d101      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004126:	2301      	movs	r3, #1
 8004128:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004136:	2301      	movs	r3, #1
 8004138:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004146:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004154:	4914      	ldr	r1, [pc, #80]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00b      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004168:	4b0f      	ldr	r3, [pc, #60]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004178:	490b      	ldr	r1, [pc, #44]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00f      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800418c:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800418e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004192:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800419c:	4902      	ldr	r1, [pc, #8]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041a4:	e002      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x494>
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00b      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041b8:	4b8a      	ldr	r3, [pc, #552]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	4986      	ldr	r1, [pc, #536]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00b      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80041dc:	4b81      	ldr	r3, [pc, #516]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ec:	497d      	ldr	r1, [pc, #500]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d006      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 80d6 	beq.w	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004208:	4b76      	ldr	r3, [pc, #472]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a75      	ldr	r2, [pc, #468]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004212:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004214:	f7fe f974 	bl	8002500 <HAL_GetTick>
 8004218:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800421c:	f7fe f970 	bl	8002500 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	; 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e195      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800422e:	4b6d      	ldr	r3, [pc, #436]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d021      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424a:	2b00      	cmp	r3, #0
 800424c:	d11d      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800424e:	4b65      	ldr	r3, [pc, #404]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004254:	0c1b      	lsrs	r3, r3, #16
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800425c:	4b61      	ldr	r3, [pc, #388]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800425e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004262:	0e1b      	lsrs	r3, r3, #24
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	019a      	lsls	r2, r3, #6
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	041b      	lsls	r3, r3, #16
 8004274:	431a      	orrs	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	061b      	lsls	r3, r3, #24
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	071b      	lsls	r3, r3, #28
 8004282:	4958      	ldr	r1, [pc, #352]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d004      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800429e:	d00a      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d02e      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042b4:	d129      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042b6:	4b4b      	ldr	r3, [pc, #300]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042c4:	4b47      	ldr	r3, [pc, #284]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ca:	0f1b      	lsrs	r3, r3, #28
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	019a      	lsls	r2, r3, #6
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	041b      	lsls	r3, r3, #16
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	061b      	lsls	r3, r3, #24
 80042e4:	431a      	orrs	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	071b      	lsls	r3, r3, #28
 80042ea:	493e      	ldr	r1, [pc, #248]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042f2:	4b3c      	ldr	r3, [pc, #240]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042f8:	f023 021f 	bic.w	r2, r3, #31
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	3b01      	subs	r3, #1
 8004302:	4938      	ldr	r1, [pc, #224]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d01d      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004316:	4b33      	ldr	r3, [pc, #204]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800431c:	0e1b      	lsrs	r3, r3, #24
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004324:	4b2f      	ldr	r3, [pc, #188]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800432a:	0f1b      	lsrs	r3, r3, #28
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	019a      	lsls	r2, r3, #6
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	041b      	lsls	r3, r3, #16
 800433e:	431a      	orrs	r2, r3
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	061b      	lsls	r3, r3, #24
 8004344:	431a      	orrs	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	071b      	lsls	r3, r3, #28
 800434a:	4926      	ldr	r1, [pc, #152]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d011      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	019a      	lsls	r2, r3, #6
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	041b      	lsls	r3, r3, #16
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	061b      	lsls	r3, r3, #24
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	071b      	lsls	r3, r3, #28
 800437a:	491a      	ldr	r1, [pc, #104]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004382:	4b18      	ldr	r3, [pc, #96]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a17      	ldr	r2, [pc, #92]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004388:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800438c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800438e:	f7fe f8b7 	bl	8002500 <HAL_GetTick>
 8004392:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004394:	e008      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004396:	f7fe f8b3 	bl	8002500 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b64      	cmp	r3, #100	; 0x64
 80043a2:	d901      	bls.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e0d8      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043a8:	4b0e      	ldr	r3, [pc, #56]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0f0      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	f040 80ce 	bne.w	8004558 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043bc:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a08      	ldr	r2, [pc, #32]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c8:	f7fe f89a 	bl	8002500 <HAL_GetTick>
 80043cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043ce:	e00b      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043d0:	f7fe f896 	bl	8002500 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b64      	cmp	r3, #100	; 0x64
 80043dc:	d904      	bls.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e0bb      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80043e2:	bf00      	nop
 80043e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043e8:	4b5e      	ldr	r3, [pc, #376]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f4:	d0ec      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004412:	2b00      	cmp	r3, #0
 8004414:	d02e      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	2b00      	cmp	r3, #0
 800441c:	d12a      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800441e:	4b51      	ldr	r3, [pc, #324]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004424:	0c1b      	lsrs	r3, r3, #16
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800442c:	4b4d      	ldr	r3, [pc, #308]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	0f1b      	lsrs	r3, r3, #28
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	019a      	lsls	r2, r3, #6
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	041b      	lsls	r3, r3, #16
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	061b      	lsls	r3, r3, #24
 800444c:	431a      	orrs	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	071b      	lsls	r3, r3, #28
 8004452:	4944      	ldr	r1, [pc, #272]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800445a:	4b42      	ldr	r3, [pc, #264]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800445c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004460:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	3b01      	subs	r3, #1
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	493d      	ldr	r1, [pc, #244]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d022      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004488:	d11d      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800448a:	4b36      	ldr	r3, [pc, #216]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	0e1b      	lsrs	r3, r3, #24
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004498:	4b32      	ldr	r3, [pc, #200]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800449a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449e:	0f1b      	lsrs	r3, r3, #28
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	019a      	lsls	r2, r3, #6
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	041b      	lsls	r3, r3, #16
 80044b2:	431a      	orrs	r2, r3
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	061b      	lsls	r3, r3, #24
 80044b8:	431a      	orrs	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	071b      	lsls	r3, r3, #28
 80044be:	4929      	ldr	r1, [pc, #164]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d028      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044d2:	4b24      	ldr	r3, [pc, #144]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d8:	0e1b      	lsrs	r3, r3, #24
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044e0:	4b20      	ldr	r3, [pc, #128]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e6:	0c1b      	lsrs	r3, r3, #16
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	019a      	lsls	r2, r3, #6
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	041b      	lsls	r3, r3, #16
 80044f8:	431a      	orrs	r2, r3
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	061b      	lsls	r3, r3, #24
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	071b      	lsls	r3, r3, #28
 8004506:	4917      	ldr	r1, [pc, #92]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800450e:	4b15      	ldr	r3, [pc, #84]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004514:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	4911      	ldr	r1, [pc, #68]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004524:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a0e      	ldr	r2, [pc, #56]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800452a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800452e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004530:	f7fd ffe6 	bl	8002500 <HAL_GetTick>
 8004534:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004536:	e008      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004538:	f7fd ffe2 	bl	8002500 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b64      	cmp	r3, #100	; 0x64
 8004544:	d901      	bls.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e007      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800454a:	4b06      	ldr	r3, [pc, #24]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004552:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004556:	d1ef      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3720      	adds	r7, #32
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40023800 	.word	0x40023800

08004568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e040      	b.n	80045fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fc fb18 	bl	8000bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2224      	movs	r2, #36	; 0x24
 8004594:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0201 	bic.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f9ce 	bl	8004948 <UART_SetConfig>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e022      	b.n	80045fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fc26 	bl	8004e10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 fcad 	bl	8004f54 <UART_CheckIdleState>
 80045fa:	4603      	mov	r3, r0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08a      	sub	sp, #40	; 0x28
 8004608:	af02      	add	r7, sp, #8
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	4613      	mov	r3, r2
 8004612:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004618:	2b20      	cmp	r3, #32
 800461a:	d171      	bne.n	8004700 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_UART_Transmit+0x24>
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e06a      	b.n	8004702 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2221      	movs	r2, #33	; 0x21
 8004638:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800463a:	f7fd ff61 	bl	8002500 <HAL_GetTick>
 800463e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	88fa      	ldrh	r2, [r7, #6]
 8004644:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	88fa      	ldrh	r2, [r7, #6]
 800464c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004658:	d108      	bne.n	800466c <HAL_UART_Transmit+0x68>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d104      	bne.n	800466c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004662:	2300      	movs	r3, #0
 8004664:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	e003      	b.n	8004674 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004670:	2300      	movs	r3, #0
 8004672:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004674:	e02c      	b.n	80046d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2200      	movs	r2, #0
 800467e:	2180      	movs	r1, #128	; 0x80
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 fcb4 	bl	8004fee <UART_WaitOnFlagUntilTimeout>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e038      	b.n	8004702 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10b      	bne.n	80046ae <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	3302      	adds	r3, #2
 80046aa:	61bb      	str	r3, [r7, #24]
 80046ac:	e007      	b.n	80046be <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	781a      	ldrb	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	3301      	adds	r3, #1
 80046bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1cc      	bne.n	8004676 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2200      	movs	r2, #0
 80046e4:	2140      	movs	r1, #64	; 0x40
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 fc81 	bl	8004fee <UART_WaitOnFlagUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e005      	b.n	8004702 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e000      	b.n	8004702 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004700:	2302      	movs	r3, #2
  }
}
 8004702:	4618      	mov	r0, r3
 8004704:	3720      	adds	r7, #32
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b08a      	sub	sp, #40	; 0x28
 800470e:	af02      	add	r7, sp, #8
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	603b      	str	r3, [r7, #0]
 8004716:	4613      	mov	r3, r2
 8004718:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004720:	2b20      	cmp	r3, #32
 8004722:	f040 80b1 	bne.w	8004888 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <HAL_UART_Receive+0x28>
 800472c:	88fb      	ldrh	r3, [r7, #6]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e0a9      	b.n	800488a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2222      	movs	r2, #34	; 0x22
 8004742:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800474c:	f7fd fed8 	bl	8002500 <HAL_GetTick>
 8004750:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	88fa      	ldrh	r2, [r7, #6]
 8004756:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	88fa      	ldrh	r2, [r7, #6]
 800475e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476a:	d10e      	bne.n	800478a <HAL_UART_Receive+0x80>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d105      	bne.n	8004780 <HAL_UART_Receive+0x76>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f240 12ff 	movw	r2, #511	; 0x1ff
 800477a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800477e:	e02d      	b.n	80047dc <HAL_UART_Receive+0xd2>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	22ff      	movs	r2, #255	; 0xff
 8004784:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004788:	e028      	b.n	80047dc <HAL_UART_Receive+0xd2>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10d      	bne.n	80047ae <HAL_UART_Receive+0xa4>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d104      	bne.n	80047a4 <HAL_UART_Receive+0x9a>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	22ff      	movs	r2, #255	; 0xff
 800479e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047a2:	e01b      	b.n	80047dc <HAL_UART_Receive+0xd2>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	227f      	movs	r2, #127	; 0x7f
 80047a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047ac:	e016      	b.n	80047dc <HAL_UART_Receive+0xd2>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047b6:	d10d      	bne.n	80047d4 <HAL_UART_Receive+0xca>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d104      	bne.n	80047ca <HAL_UART_Receive+0xc0>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	227f      	movs	r2, #127	; 0x7f
 80047c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047c8:	e008      	b.n	80047dc <HAL_UART_Receive+0xd2>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	223f      	movs	r2, #63	; 0x3f
 80047ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047d2:	e003      	b.n	80047dc <HAL_UART_Receive+0xd2>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047e2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ec:	d108      	bne.n	8004800 <HAL_UART_Receive+0xf6>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d104      	bne.n	8004800 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	e003      	b.n	8004808 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004804:	2300      	movs	r3, #0
 8004806:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004808:	e032      	b.n	8004870 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2200      	movs	r2, #0
 8004812:	2120      	movs	r1, #32
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 fbea 	bl	8004fee <UART_WaitOnFlagUntilTimeout>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e032      	b.n	800488a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10c      	bne.n	8004844 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	b29a      	uxth	r2, r3
 8004832:	8a7b      	ldrh	r3, [r7, #18]
 8004834:	4013      	ands	r3, r2
 8004836:	b29a      	uxth	r2, r3
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	3302      	adds	r3, #2
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	e00c      	b.n	800485e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	b2da      	uxtb	r2, r3
 800484c:	8a7b      	ldrh	r3, [r7, #18]
 800484e:	b2db      	uxtb	r3, r3
 8004850:	4013      	ands	r3, r2
 8004852:	b2da      	uxtb	r2, r3
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	3301      	adds	r3, #1
 800485c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1c6      	bne.n	800480a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	e000      	b.n	800488a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004888:	2302      	movs	r3, #2
  }
}
 800488a:	4618      	mov	r0, r3
 800488c:	3720      	adds	r7, #32
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b08a      	sub	sp, #40	; 0x28
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	4613      	mov	r3, r2
 800489e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048a6:	2b20      	cmp	r3, #32
 80048a8:	d132      	bne.n	8004910 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <HAL_UART_Receive_DMA+0x24>
 80048b0:	88fb      	ldrh	r3, [r7, #6]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e02b      	b.n	8004912 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d018      	beq.n	8004900 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	613b      	str	r3, [r7, #16]
   return(result);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	623b      	str	r3, [r7, #32]
 80048ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	69f9      	ldr	r1, [r7, #28]
 80048f2:	6a3a      	ldr	r2, [r7, #32]
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e6      	bne.n	80048ce <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004900:	88fb      	ldrh	r3, [r7, #6]
 8004902:	461a      	mov	r2, r3
 8004904:	68b9      	ldr	r1, [r7, #8]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 fc38 	bl	800517c <UART_Start_Receive_DMA>
 800490c:	4603      	mov	r3, r0
 800490e:	e000      	b.n	8004912 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004910:	2302      	movs	r3, #2
  }
}
 8004912:	4618      	mov	r0, r3
 8004914:	3728      	adds	r7, #40	; 0x28
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	460b      	mov	r3, r1
 8004938:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004950:	2300      	movs	r3, #0
 8004952:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4ba6      	ldr	r3, [pc, #664]	; (8004c0c <UART_SetConfig+0x2c4>)
 8004974:	4013      	ands	r3, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6812      	ldr	r2, [r2, #0]
 800497a:	6979      	ldr	r1, [r7, #20]
 800497c:	430b      	orrs	r3, r1
 800497e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a94      	ldr	r2, [pc, #592]	; (8004c10 <UART_SetConfig+0x2c8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d120      	bne.n	8004a06 <UART_SetConfig+0xbe>
 80049c4:	4b93      	ldr	r3, [pc, #588]	; (8004c14 <UART_SetConfig+0x2cc>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d816      	bhi.n	8004a00 <UART_SetConfig+0xb8>
 80049d2:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <UART_SetConfig+0x90>)
 80049d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d8:	080049e9 	.word	0x080049e9
 80049dc:	080049f5 	.word	0x080049f5
 80049e0:	080049ef 	.word	0x080049ef
 80049e4:	080049fb 	.word	0x080049fb
 80049e8:	2301      	movs	r3, #1
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	e150      	b.n	8004c90 <UART_SetConfig+0x348>
 80049ee:	2302      	movs	r3, #2
 80049f0:	77fb      	strb	r3, [r7, #31]
 80049f2:	e14d      	b.n	8004c90 <UART_SetConfig+0x348>
 80049f4:	2304      	movs	r3, #4
 80049f6:	77fb      	strb	r3, [r7, #31]
 80049f8:	e14a      	b.n	8004c90 <UART_SetConfig+0x348>
 80049fa:	2308      	movs	r3, #8
 80049fc:	77fb      	strb	r3, [r7, #31]
 80049fe:	e147      	b.n	8004c90 <UART_SetConfig+0x348>
 8004a00:	2310      	movs	r3, #16
 8004a02:	77fb      	strb	r3, [r7, #31]
 8004a04:	e144      	b.n	8004c90 <UART_SetConfig+0x348>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a83      	ldr	r2, [pc, #524]	; (8004c18 <UART_SetConfig+0x2d0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d132      	bne.n	8004a76 <UART_SetConfig+0x12e>
 8004a10:	4b80      	ldr	r3, [pc, #512]	; (8004c14 <UART_SetConfig+0x2cc>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a16:	f003 030c 	and.w	r3, r3, #12
 8004a1a:	2b0c      	cmp	r3, #12
 8004a1c:	d828      	bhi.n	8004a70 <UART_SetConfig+0x128>
 8004a1e:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <UART_SetConfig+0xdc>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004a59 	.word	0x08004a59
 8004a28:	08004a71 	.word	0x08004a71
 8004a2c:	08004a71 	.word	0x08004a71
 8004a30:	08004a71 	.word	0x08004a71
 8004a34:	08004a65 	.word	0x08004a65
 8004a38:	08004a71 	.word	0x08004a71
 8004a3c:	08004a71 	.word	0x08004a71
 8004a40:	08004a71 	.word	0x08004a71
 8004a44:	08004a5f 	.word	0x08004a5f
 8004a48:	08004a71 	.word	0x08004a71
 8004a4c:	08004a71 	.word	0x08004a71
 8004a50:	08004a71 	.word	0x08004a71
 8004a54:	08004a6b 	.word	0x08004a6b
 8004a58:	2300      	movs	r3, #0
 8004a5a:	77fb      	strb	r3, [r7, #31]
 8004a5c:	e118      	b.n	8004c90 <UART_SetConfig+0x348>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	77fb      	strb	r3, [r7, #31]
 8004a62:	e115      	b.n	8004c90 <UART_SetConfig+0x348>
 8004a64:	2304      	movs	r3, #4
 8004a66:	77fb      	strb	r3, [r7, #31]
 8004a68:	e112      	b.n	8004c90 <UART_SetConfig+0x348>
 8004a6a:	2308      	movs	r3, #8
 8004a6c:	77fb      	strb	r3, [r7, #31]
 8004a6e:	e10f      	b.n	8004c90 <UART_SetConfig+0x348>
 8004a70:	2310      	movs	r3, #16
 8004a72:	77fb      	strb	r3, [r7, #31]
 8004a74:	e10c      	b.n	8004c90 <UART_SetConfig+0x348>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a68      	ldr	r2, [pc, #416]	; (8004c1c <UART_SetConfig+0x2d4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d120      	bne.n	8004ac2 <UART_SetConfig+0x17a>
 8004a80:	4b64      	ldr	r3, [pc, #400]	; (8004c14 <UART_SetConfig+0x2cc>)
 8004a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a86:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a8a:	2b30      	cmp	r3, #48	; 0x30
 8004a8c:	d013      	beq.n	8004ab6 <UART_SetConfig+0x16e>
 8004a8e:	2b30      	cmp	r3, #48	; 0x30
 8004a90:	d814      	bhi.n	8004abc <UART_SetConfig+0x174>
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	d009      	beq.n	8004aaa <UART_SetConfig+0x162>
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d810      	bhi.n	8004abc <UART_SetConfig+0x174>
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <UART_SetConfig+0x15c>
 8004a9e:	2b10      	cmp	r3, #16
 8004aa0:	d006      	beq.n	8004ab0 <UART_SetConfig+0x168>
 8004aa2:	e00b      	b.n	8004abc <UART_SetConfig+0x174>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e0f2      	b.n	8004c90 <UART_SetConfig+0x348>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	77fb      	strb	r3, [r7, #31]
 8004aae:	e0ef      	b.n	8004c90 <UART_SetConfig+0x348>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	77fb      	strb	r3, [r7, #31]
 8004ab4:	e0ec      	b.n	8004c90 <UART_SetConfig+0x348>
 8004ab6:	2308      	movs	r3, #8
 8004ab8:	77fb      	strb	r3, [r7, #31]
 8004aba:	e0e9      	b.n	8004c90 <UART_SetConfig+0x348>
 8004abc:	2310      	movs	r3, #16
 8004abe:	77fb      	strb	r3, [r7, #31]
 8004ac0:	e0e6      	b.n	8004c90 <UART_SetConfig+0x348>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a56      	ldr	r2, [pc, #344]	; (8004c20 <UART_SetConfig+0x2d8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d120      	bne.n	8004b0e <UART_SetConfig+0x1c6>
 8004acc:	4b51      	ldr	r3, [pc, #324]	; (8004c14 <UART_SetConfig+0x2cc>)
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ad6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ad8:	d013      	beq.n	8004b02 <UART_SetConfig+0x1ba>
 8004ada:	2bc0      	cmp	r3, #192	; 0xc0
 8004adc:	d814      	bhi.n	8004b08 <UART_SetConfig+0x1c0>
 8004ade:	2b80      	cmp	r3, #128	; 0x80
 8004ae0:	d009      	beq.n	8004af6 <UART_SetConfig+0x1ae>
 8004ae2:	2b80      	cmp	r3, #128	; 0x80
 8004ae4:	d810      	bhi.n	8004b08 <UART_SetConfig+0x1c0>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <UART_SetConfig+0x1a8>
 8004aea:	2b40      	cmp	r3, #64	; 0x40
 8004aec:	d006      	beq.n	8004afc <UART_SetConfig+0x1b4>
 8004aee:	e00b      	b.n	8004b08 <UART_SetConfig+0x1c0>
 8004af0:	2300      	movs	r3, #0
 8004af2:	77fb      	strb	r3, [r7, #31]
 8004af4:	e0cc      	b.n	8004c90 <UART_SetConfig+0x348>
 8004af6:	2302      	movs	r3, #2
 8004af8:	77fb      	strb	r3, [r7, #31]
 8004afa:	e0c9      	b.n	8004c90 <UART_SetConfig+0x348>
 8004afc:	2304      	movs	r3, #4
 8004afe:	77fb      	strb	r3, [r7, #31]
 8004b00:	e0c6      	b.n	8004c90 <UART_SetConfig+0x348>
 8004b02:	2308      	movs	r3, #8
 8004b04:	77fb      	strb	r3, [r7, #31]
 8004b06:	e0c3      	b.n	8004c90 <UART_SetConfig+0x348>
 8004b08:	2310      	movs	r3, #16
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e0c0      	b.n	8004c90 <UART_SetConfig+0x348>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a44      	ldr	r2, [pc, #272]	; (8004c24 <UART_SetConfig+0x2dc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d125      	bne.n	8004b64 <UART_SetConfig+0x21c>
 8004b18:	4b3e      	ldr	r3, [pc, #248]	; (8004c14 <UART_SetConfig+0x2cc>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b26:	d017      	beq.n	8004b58 <UART_SetConfig+0x210>
 8004b28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b2c:	d817      	bhi.n	8004b5e <UART_SetConfig+0x216>
 8004b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b32:	d00b      	beq.n	8004b4c <UART_SetConfig+0x204>
 8004b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b38:	d811      	bhi.n	8004b5e <UART_SetConfig+0x216>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <UART_SetConfig+0x1fe>
 8004b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b42:	d006      	beq.n	8004b52 <UART_SetConfig+0x20a>
 8004b44:	e00b      	b.n	8004b5e <UART_SetConfig+0x216>
 8004b46:	2300      	movs	r3, #0
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	e0a1      	b.n	8004c90 <UART_SetConfig+0x348>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e09e      	b.n	8004c90 <UART_SetConfig+0x348>
 8004b52:	2304      	movs	r3, #4
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	e09b      	b.n	8004c90 <UART_SetConfig+0x348>
 8004b58:	2308      	movs	r3, #8
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	e098      	b.n	8004c90 <UART_SetConfig+0x348>
 8004b5e:	2310      	movs	r3, #16
 8004b60:	77fb      	strb	r3, [r7, #31]
 8004b62:	e095      	b.n	8004c90 <UART_SetConfig+0x348>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a2f      	ldr	r2, [pc, #188]	; (8004c28 <UART_SetConfig+0x2e0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d125      	bne.n	8004bba <UART_SetConfig+0x272>
 8004b6e:	4b29      	ldr	r3, [pc, #164]	; (8004c14 <UART_SetConfig+0x2cc>)
 8004b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b7c:	d017      	beq.n	8004bae <UART_SetConfig+0x266>
 8004b7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b82:	d817      	bhi.n	8004bb4 <UART_SetConfig+0x26c>
 8004b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b88:	d00b      	beq.n	8004ba2 <UART_SetConfig+0x25a>
 8004b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b8e:	d811      	bhi.n	8004bb4 <UART_SetConfig+0x26c>
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <UART_SetConfig+0x254>
 8004b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b98:	d006      	beq.n	8004ba8 <UART_SetConfig+0x260>
 8004b9a:	e00b      	b.n	8004bb4 <UART_SetConfig+0x26c>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	77fb      	strb	r3, [r7, #31]
 8004ba0:	e076      	b.n	8004c90 <UART_SetConfig+0x348>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	77fb      	strb	r3, [r7, #31]
 8004ba6:	e073      	b.n	8004c90 <UART_SetConfig+0x348>
 8004ba8:	2304      	movs	r3, #4
 8004baa:	77fb      	strb	r3, [r7, #31]
 8004bac:	e070      	b.n	8004c90 <UART_SetConfig+0x348>
 8004bae:	2308      	movs	r3, #8
 8004bb0:	77fb      	strb	r3, [r7, #31]
 8004bb2:	e06d      	b.n	8004c90 <UART_SetConfig+0x348>
 8004bb4:	2310      	movs	r3, #16
 8004bb6:	77fb      	strb	r3, [r7, #31]
 8004bb8:	e06a      	b.n	8004c90 <UART_SetConfig+0x348>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a1b      	ldr	r2, [pc, #108]	; (8004c2c <UART_SetConfig+0x2e4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d138      	bne.n	8004c36 <UART_SetConfig+0x2ee>
 8004bc4:	4b13      	ldr	r3, [pc, #76]	; (8004c14 <UART_SetConfig+0x2cc>)
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004bce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bd2:	d017      	beq.n	8004c04 <UART_SetConfig+0x2bc>
 8004bd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bd8:	d82a      	bhi.n	8004c30 <UART_SetConfig+0x2e8>
 8004bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bde:	d00b      	beq.n	8004bf8 <UART_SetConfig+0x2b0>
 8004be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be4:	d824      	bhi.n	8004c30 <UART_SetConfig+0x2e8>
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <UART_SetConfig+0x2aa>
 8004bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bee:	d006      	beq.n	8004bfe <UART_SetConfig+0x2b6>
 8004bf0:	e01e      	b.n	8004c30 <UART_SetConfig+0x2e8>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	77fb      	strb	r3, [r7, #31]
 8004bf6:	e04b      	b.n	8004c90 <UART_SetConfig+0x348>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e048      	b.n	8004c90 <UART_SetConfig+0x348>
 8004bfe:	2304      	movs	r3, #4
 8004c00:	77fb      	strb	r3, [r7, #31]
 8004c02:	e045      	b.n	8004c90 <UART_SetConfig+0x348>
 8004c04:	2308      	movs	r3, #8
 8004c06:	77fb      	strb	r3, [r7, #31]
 8004c08:	e042      	b.n	8004c90 <UART_SetConfig+0x348>
 8004c0a:	bf00      	nop
 8004c0c:	efff69f3 	.word	0xefff69f3
 8004c10:	40011000 	.word	0x40011000
 8004c14:	40023800 	.word	0x40023800
 8004c18:	40004400 	.word	0x40004400
 8004c1c:	40004800 	.word	0x40004800
 8004c20:	40004c00 	.word	0x40004c00
 8004c24:	40005000 	.word	0x40005000
 8004c28:	40011400 	.word	0x40011400
 8004c2c:	40007800 	.word	0x40007800
 8004c30:	2310      	movs	r3, #16
 8004c32:	77fb      	strb	r3, [r7, #31]
 8004c34:	e02c      	b.n	8004c90 <UART_SetConfig+0x348>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a72      	ldr	r2, [pc, #456]	; (8004e04 <UART_SetConfig+0x4bc>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d125      	bne.n	8004c8c <UART_SetConfig+0x344>
 8004c40:	4b71      	ldr	r3, [pc, #452]	; (8004e08 <UART_SetConfig+0x4c0>)
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c4a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c4e:	d017      	beq.n	8004c80 <UART_SetConfig+0x338>
 8004c50:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c54:	d817      	bhi.n	8004c86 <UART_SetConfig+0x33e>
 8004c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c5a:	d00b      	beq.n	8004c74 <UART_SetConfig+0x32c>
 8004c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c60:	d811      	bhi.n	8004c86 <UART_SetConfig+0x33e>
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <UART_SetConfig+0x326>
 8004c66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c6a:	d006      	beq.n	8004c7a <UART_SetConfig+0x332>
 8004c6c:	e00b      	b.n	8004c86 <UART_SetConfig+0x33e>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e00d      	b.n	8004c90 <UART_SetConfig+0x348>
 8004c74:	2302      	movs	r3, #2
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e00a      	b.n	8004c90 <UART_SetConfig+0x348>
 8004c7a:	2304      	movs	r3, #4
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e007      	b.n	8004c90 <UART_SetConfig+0x348>
 8004c80:	2308      	movs	r3, #8
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e004      	b.n	8004c90 <UART_SetConfig+0x348>
 8004c86:	2310      	movs	r3, #16
 8004c88:	77fb      	strb	r3, [r7, #31]
 8004c8a:	e001      	b.n	8004c90 <UART_SetConfig+0x348>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c98:	d15b      	bne.n	8004d52 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004c9a:	7ffb      	ldrb	r3, [r7, #31]
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d828      	bhi.n	8004cf2 <UART_SetConfig+0x3aa>
 8004ca0:	a201      	add	r2, pc, #4	; (adr r2, 8004ca8 <UART_SetConfig+0x360>)
 8004ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca6:	bf00      	nop
 8004ca8:	08004ccd 	.word	0x08004ccd
 8004cac:	08004cd5 	.word	0x08004cd5
 8004cb0:	08004cdd 	.word	0x08004cdd
 8004cb4:	08004cf3 	.word	0x08004cf3
 8004cb8:	08004ce3 	.word	0x08004ce3
 8004cbc:	08004cf3 	.word	0x08004cf3
 8004cc0:	08004cf3 	.word	0x08004cf3
 8004cc4:	08004cf3 	.word	0x08004cf3
 8004cc8:	08004ceb 	.word	0x08004ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ccc:	f7fe fffc 	bl	8003cc8 <HAL_RCC_GetPCLK1Freq>
 8004cd0:	61b8      	str	r0, [r7, #24]
        break;
 8004cd2:	e013      	b.n	8004cfc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cd4:	f7ff f80c 	bl	8003cf0 <HAL_RCC_GetPCLK2Freq>
 8004cd8:	61b8      	str	r0, [r7, #24]
        break;
 8004cda:	e00f      	b.n	8004cfc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cdc:	4b4b      	ldr	r3, [pc, #300]	; (8004e0c <UART_SetConfig+0x4c4>)
 8004cde:	61bb      	str	r3, [r7, #24]
        break;
 8004ce0:	e00c      	b.n	8004cfc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce2:	f7fe fedf 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8004ce6:	61b8      	str	r0, [r7, #24]
        break;
 8004ce8:	e008      	b.n	8004cfc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cee:	61bb      	str	r3, [r7, #24]
        break;
 8004cf0:	e004      	b.n	8004cfc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	77bb      	strb	r3, [r7, #30]
        break;
 8004cfa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d074      	beq.n	8004dec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	005a      	lsls	r2, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	085b      	lsrs	r3, r3, #1
 8004d0c:	441a      	add	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	2b0f      	cmp	r3, #15
 8004d1c:	d916      	bls.n	8004d4c <UART_SetConfig+0x404>
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d24:	d212      	bcs.n	8004d4c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f023 030f 	bic.w	r3, r3, #15
 8004d2e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	085b      	lsrs	r3, r3, #1
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	89fb      	ldrh	r3, [r7, #14]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	89fa      	ldrh	r2, [r7, #14]
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	e04f      	b.n	8004dec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	77bb      	strb	r3, [r7, #30]
 8004d50:	e04c      	b.n	8004dec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d52:	7ffb      	ldrb	r3, [r7, #31]
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d828      	bhi.n	8004daa <UART_SetConfig+0x462>
 8004d58:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <UART_SetConfig+0x418>)
 8004d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5e:	bf00      	nop
 8004d60:	08004d85 	.word	0x08004d85
 8004d64:	08004d8d 	.word	0x08004d8d
 8004d68:	08004d95 	.word	0x08004d95
 8004d6c:	08004dab 	.word	0x08004dab
 8004d70:	08004d9b 	.word	0x08004d9b
 8004d74:	08004dab 	.word	0x08004dab
 8004d78:	08004dab 	.word	0x08004dab
 8004d7c:	08004dab 	.word	0x08004dab
 8004d80:	08004da3 	.word	0x08004da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d84:	f7fe ffa0 	bl	8003cc8 <HAL_RCC_GetPCLK1Freq>
 8004d88:	61b8      	str	r0, [r7, #24]
        break;
 8004d8a:	e013      	b.n	8004db4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d8c:	f7fe ffb0 	bl	8003cf0 <HAL_RCC_GetPCLK2Freq>
 8004d90:	61b8      	str	r0, [r7, #24]
        break;
 8004d92:	e00f      	b.n	8004db4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d94:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <UART_SetConfig+0x4c4>)
 8004d96:	61bb      	str	r3, [r7, #24]
        break;
 8004d98:	e00c      	b.n	8004db4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d9a:	f7fe fe83 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8004d9e:	61b8      	str	r0, [r7, #24]
        break;
 8004da0:	e008      	b.n	8004db4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da6:	61bb      	str	r3, [r7, #24]
        break;
 8004da8:	e004      	b.n	8004db4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	77bb      	strb	r3, [r7, #30]
        break;
 8004db2:	bf00      	nop
    }

    if (pclk != 0U)
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d018      	beq.n	8004dec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	085a      	lsrs	r2, r3, #1
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	441a      	add	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	2b0f      	cmp	r3, #15
 8004dd2:	d909      	bls.n	8004de8 <UART_SetConfig+0x4a0>
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dda:	d205      	bcs.n	8004de8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60da      	str	r2, [r3, #12]
 8004de6:	e001      	b.n	8004dec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004df8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3720      	adds	r7, #32
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	40007c00 	.word	0x40007c00
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	00f42400 	.word	0x00f42400

08004e10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00a      	beq.n	8004e3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	f003 0308 	and.w	r3, r3, #8
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	f003 0310 	and.w	r3, r3, #16
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01a      	beq.n	8004f26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f0e:	d10a      	bne.n	8004f26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	605a      	str	r2, [r3, #4]
  }
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f64:	f7fd facc 	bl	8002500 <HAL_GetTick>
 8004f68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0308 	and.w	r3, r3, #8
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d10e      	bne.n	8004f96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f831 	bl	8004fee <UART_WaitOnFlagUntilTimeout>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e027      	b.n	8004fe6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d10e      	bne.n	8004fc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f81b 	bl	8004fee <UART_WaitOnFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e011      	b.n	8004fe6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b09c      	sub	sp, #112	; 0x70
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	60f8      	str	r0, [r7, #12]
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	603b      	str	r3, [r7, #0]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ffe:	e0a7      	b.n	8005150 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005006:	f000 80a3 	beq.w	8005150 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500a:	f7fd fa79 	bl	8002500 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005016:	429a      	cmp	r2, r3
 8005018:	d302      	bcc.n	8005020 <UART_WaitOnFlagUntilTimeout+0x32>
 800501a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800501c:	2b00      	cmp	r3, #0
 800501e:	d13f      	bne.n	80050a0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800502e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005030:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005034:	667b      	str	r3, [r7, #100]	; 0x64
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800503e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005040:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005042:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005044:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800504c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e6      	bne.n	8005020 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3308      	adds	r3, #8
 8005058:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505c:	e853 3f00 	ldrex	r3, [r3]
 8005060:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005064:	f023 0301 	bic.w	r3, r3, #1
 8005068:	663b      	str	r3, [r7, #96]	; 0x60
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3308      	adds	r3, #8
 8005070:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005072:	64ba      	str	r2, [r7, #72]	; 0x48
 8005074:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800507a:	e841 2300 	strex	r3, r2, [r1]
 800507e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1e5      	bne.n	8005052 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2220      	movs	r2, #32
 800508a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2220      	movs	r2, #32
 8005090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e068      	b.n	8005172 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0304 	and.w	r3, r3, #4
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d050      	beq.n	8005150 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050bc:	d148      	bne.n	8005150 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e6:	637b      	str	r3, [r7, #52]	; 0x34
 80050e8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1e6      	bne.n	80050c8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3308      	adds	r3, #8
 8005100:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	613b      	str	r3, [r7, #16]
   return(result);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f023 0301 	bic.w	r3, r3, #1
 8005110:	66bb      	str	r3, [r7, #104]	; 0x68
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3308      	adds	r3, #8
 8005118:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800511a:	623a      	str	r2, [r7, #32]
 800511c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	69f9      	ldr	r1, [r7, #28]
 8005120:	6a3a      	ldr	r2, [r7, #32]
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	61bb      	str	r3, [r7, #24]
   return(result);
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e5      	bne.n	80050fa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2220      	movs	r2, #32
 8005132:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2220      	movs	r2, #32
 8005138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e010      	b.n	8005172 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	69da      	ldr	r2, [r3, #28]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	4013      	ands	r3, r2
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	429a      	cmp	r2, r3
 800515e:	bf0c      	ite	eq
 8005160:	2301      	moveq	r3, #1
 8005162:	2300      	movne	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	461a      	mov	r2, r3
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	429a      	cmp	r2, r3
 800516c:	f43f af48 	beq.w	8005000 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3770      	adds	r7, #112	; 0x70
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b096      	sub	sp, #88	; 0x58
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	4613      	mov	r3, r2
 8005188:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	88fa      	ldrh	r2, [r7, #6]
 8005194:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2222      	movs	r2, #34	; 0x22
 80051a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d028      	beq.n	8005202 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b4:	4a3e      	ldr	r2, [pc, #248]	; (80052b0 <UART_Start_Receive_DMA+0x134>)
 80051b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051bc:	4a3d      	ldr	r2, [pc, #244]	; (80052b4 <UART_Start_Receive_DMA+0x138>)
 80051be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051c4:	4a3c      	ldr	r2, [pc, #240]	; (80052b8 <UART_Start_Receive_DMA+0x13c>)
 80051c6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051cc:	2200      	movs	r2, #0
 80051ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3324      	adds	r3, #36	; 0x24
 80051da:	4619      	mov	r1, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e0:	461a      	mov	r2, r3
 80051e2:	88fb      	ldrh	r3, [r7, #6]
 80051e4:	f7fd fbd4 	bl	8002990 <HAL_DMA_Start_IT>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d009      	beq.n	8005202 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2210      	movs	r2, #16
 80051f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e051      	b.n	80052a6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d018      	beq.n	800523c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800521e:	657b      	str	r3, [r7, #84]	; 0x54
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005228:	64bb      	str	r3, [r7, #72]	; 0x48
 800522a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800522e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e6      	bne.n	800520a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3308      	adds	r3, #8
 8005242:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	653b      	str	r3, [r7, #80]	; 0x50
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3308      	adds	r3, #8
 800525a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800525c:	637a      	str	r2, [r7, #52]	; 0x34
 800525e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005264:	e841 2300 	strex	r3, r2, [r1]
 8005268:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800526a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e5      	bne.n	800523c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3308      	adds	r3, #8
 8005276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	e853 3f00 	ldrex	r3, [r3]
 800527e:	613b      	str	r3, [r7, #16]
   return(result);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3308      	adds	r3, #8
 800528e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005290:	623a      	str	r2, [r7, #32]
 8005292:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	69f9      	ldr	r1, [r7, #28]
 8005296:	6a3a      	ldr	r2, [r7, #32]
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	61bb      	str	r3, [r7, #24]
   return(result);
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e5      	bne.n	8005270 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3758      	adds	r7, #88	; 0x58
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	080053d1 	.word	0x080053d1
 80052b4:	080054f9 	.word	0x080054f9
 80052b8:	08005537 	.word	0x08005537

080052bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80052bc:	b480      	push	{r7}
 80052be:	b089      	sub	sp, #36	; 0x24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	e853 3f00 	ldrex	r3, [r3]
 80052d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80052d8:	61fb      	str	r3, [r7, #28]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	61bb      	str	r3, [r7, #24]
 80052e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	6979      	ldr	r1, [r7, #20]
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	613b      	str	r3, [r7, #16]
   return(result);
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e6      	bne.n	80052c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2220      	movs	r2, #32
 80052fa:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80052fc:	bf00      	nop
 80052fe:	3724      	adds	r7, #36	; 0x24
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005308:	b480      	push	{r7}
 800530a:	b095      	sub	sp, #84	; 0x54
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005324:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800532e:	643b      	str	r3, [r7, #64]	; 0x40
 8005330:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005334:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800533c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e6      	bne.n	8005310 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3308      	adds	r3, #8
 8005348:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	61fb      	str	r3, [r7, #28]
   return(result);
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	64bb      	str	r3, [r7, #72]	; 0x48
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3308      	adds	r3, #8
 8005360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005364:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800536a:	e841 2300 	strex	r3, r2, [r1]
 800536e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e5      	bne.n	8005342 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537a:	2b01      	cmp	r3, #1
 800537c:	d118      	bne.n	80053b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	e853 3f00 	ldrex	r3, [r3]
 800538a:	60bb      	str	r3, [r7, #8]
   return(result);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f023 0310 	bic.w	r3, r3, #16
 8005392:	647b      	str	r3, [r7, #68]	; 0x44
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	461a      	mov	r2, r3
 800539a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800539c:	61bb      	str	r3, [r7, #24]
 800539e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a0:	6979      	ldr	r1, [r7, #20]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	e841 2300 	strex	r3, r2, [r1]
 80053a8:	613b      	str	r3, [r7, #16]
   return(result);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e6      	bne.n	800537e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80053c4:	bf00      	nop
 80053c6:	3754      	adds	r7, #84	; 0x54
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b09c      	sub	sp, #112	; 0x70
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053e6:	d071      	beq.n	80054cc <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80053e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005404:	66bb      	str	r3, [r7, #104]	; 0x68
 8005406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800540e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005410:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005412:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005414:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005416:	e841 2300 	strex	r3, r2, [r1]
 800541a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800541c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1e6      	bne.n	80053f0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3308      	adds	r3, #8
 8005428:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	e853 3f00 	ldrex	r3, [r3]
 8005430:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005434:	f023 0301 	bic.w	r3, r3, #1
 8005438:	667b      	str	r3, [r7, #100]	; 0x64
 800543a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3308      	adds	r3, #8
 8005440:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005442:	647a      	str	r2, [r7, #68]	; 0x44
 8005444:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005446:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005448:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800544a:	e841 2300 	strex	r3, r2, [r1]
 800544e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1e5      	bne.n	8005422 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3308      	adds	r3, #8
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	623b      	str	r3, [r7, #32]
   return(result);
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800546c:	663b      	str	r3, [r7, #96]	; 0x60
 800546e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3308      	adds	r3, #8
 8005474:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005476:	633a      	str	r2, [r7, #48]	; 0x30
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800547c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e5      	bne.n	8005456 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800548a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548c:	2220      	movs	r2, #32
 800548e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005496:	2b01      	cmp	r3, #1
 8005498:	d118      	bne.n	80054cc <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800549a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0310 	bic.w	r3, r3, #16
 80054ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
 80054b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054b8:	61fb      	str	r3, [r7, #28]
 80054ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	69b9      	ldr	r1, [r7, #24]
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	617b      	str	r3, [r7, #20]
   return(result);
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e6      	bne.n	800549a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ce:	2200      	movs	r2, #0
 80054d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d107      	bne.n	80054ea <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054e0:	4619      	mov	r1, r3
 80054e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80054e4:	f7ff fa23 	bl	800492e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054e8:	e002      	b.n	80054f0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80054ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80054ec:	f7fc fd62 	bl	8001fb4 <HAL_UART_RxCpltCallback>
}
 80054f0:	bf00      	nop
 80054f2:	3770      	adds	r7, #112	; 0x70
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005504:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005510:	2b01      	cmp	r3, #1
 8005512:	d109      	bne.n	8005528 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800551a:	085b      	lsrs	r3, r3, #1
 800551c:	b29b      	uxth	r3, r3
 800551e:	4619      	mov	r1, r3
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f7ff fa04 	bl	800492e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005526:	e002      	b.n	800552e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f7fc fd4e 	bl	8001fca <HAL_UART_RxHalfCpltCallback>
}
 800552e:	bf00      	nop
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b086      	sub	sp, #24
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005542:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005548:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005550:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555c:	2b80      	cmp	r3, #128	; 0x80
 800555e:	d109      	bne.n	8005574 <UART_DMAError+0x3e>
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	2b21      	cmp	r3, #33	; 0x21
 8005564:	d106      	bne.n	8005574 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2200      	movs	r2, #0
 800556a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800556e:	6978      	ldr	r0, [r7, #20]
 8005570:	f7ff fea4 	bl	80052bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557e:	2b40      	cmp	r3, #64	; 0x40
 8005580:	d109      	bne.n	8005596 <UART_DMAError+0x60>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b22      	cmp	r3, #34	; 0x22
 8005586:	d106      	bne.n	8005596 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	2200      	movs	r2, #0
 800558c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005590:	6978      	ldr	r0, [r7, #20]
 8005592:	f7ff feb9 	bl	8005308 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800559c:	f043 0210 	orr.w	r2, r3, #16
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055a6:	6978      	ldr	r0, [r7, #20]
 80055a8:	f7ff f9b7 	bl	800491a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ac:	bf00      	nop
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <__errno>:
 80055b4:	4b01      	ldr	r3, [pc, #4]	; (80055bc <__errno+0x8>)
 80055b6:	6818      	ldr	r0, [r3, #0]
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	200015f0 	.word	0x200015f0

080055c0 <__libc_init_array>:
 80055c0:	b570      	push	{r4, r5, r6, lr}
 80055c2:	4d0d      	ldr	r5, [pc, #52]	; (80055f8 <__libc_init_array+0x38>)
 80055c4:	4c0d      	ldr	r4, [pc, #52]	; (80055fc <__libc_init_array+0x3c>)
 80055c6:	1b64      	subs	r4, r4, r5
 80055c8:	10a4      	asrs	r4, r4, #2
 80055ca:	2600      	movs	r6, #0
 80055cc:	42a6      	cmp	r6, r4
 80055ce:	d109      	bne.n	80055e4 <__libc_init_array+0x24>
 80055d0:	4d0b      	ldr	r5, [pc, #44]	; (8005600 <__libc_init_array+0x40>)
 80055d2:	4c0c      	ldr	r4, [pc, #48]	; (8005604 <__libc_init_array+0x44>)
 80055d4:	f001 f8ee 	bl	80067b4 <_init>
 80055d8:	1b64      	subs	r4, r4, r5
 80055da:	10a4      	asrs	r4, r4, #2
 80055dc:	2600      	movs	r6, #0
 80055de:	42a6      	cmp	r6, r4
 80055e0:	d105      	bne.n	80055ee <__libc_init_array+0x2e>
 80055e2:	bd70      	pop	{r4, r5, r6, pc}
 80055e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055e8:	4798      	blx	r3
 80055ea:	3601      	adds	r6, #1
 80055ec:	e7ee      	b.n	80055cc <__libc_init_array+0xc>
 80055ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f2:	4798      	blx	r3
 80055f4:	3601      	adds	r6, #1
 80055f6:	e7f2      	b.n	80055de <__libc_init_array+0x1e>
 80055f8:	080069e8 	.word	0x080069e8
 80055fc:	080069e8 	.word	0x080069e8
 8005600:	080069e8 	.word	0x080069e8
 8005604:	080069ec 	.word	0x080069ec

08005608 <memset>:
 8005608:	4402      	add	r2, r0
 800560a:	4603      	mov	r3, r0
 800560c:	4293      	cmp	r3, r2
 800560e:	d100      	bne.n	8005612 <memset+0xa>
 8005610:	4770      	bx	lr
 8005612:	f803 1b01 	strb.w	r1, [r3], #1
 8005616:	e7f9      	b.n	800560c <memset+0x4>

08005618 <iprintf>:
 8005618:	b40f      	push	{r0, r1, r2, r3}
 800561a:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <iprintf+0x2c>)
 800561c:	b513      	push	{r0, r1, r4, lr}
 800561e:	681c      	ldr	r4, [r3, #0]
 8005620:	b124      	cbz	r4, 800562c <iprintf+0x14>
 8005622:	69a3      	ldr	r3, [r4, #24]
 8005624:	b913      	cbnz	r3, 800562c <iprintf+0x14>
 8005626:	4620      	mov	r0, r4
 8005628:	f000 fad8 	bl	8005bdc <__sinit>
 800562c:	ab05      	add	r3, sp, #20
 800562e:	9a04      	ldr	r2, [sp, #16]
 8005630:	68a1      	ldr	r1, [r4, #8]
 8005632:	9301      	str	r3, [sp, #4]
 8005634:	4620      	mov	r0, r4
 8005636:	f000 fce9 	bl	800600c <_vfiprintf_r>
 800563a:	b002      	add	sp, #8
 800563c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005640:	b004      	add	sp, #16
 8005642:	4770      	bx	lr
 8005644:	200015f0 	.word	0x200015f0

08005648 <putchar>:
 8005648:	4b09      	ldr	r3, [pc, #36]	; (8005670 <putchar+0x28>)
 800564a:	b513      	push	{r0, r1, r4, lr}
 800564c:	681c      	ldr	r4, [r3, #0]
 800564e:	4601      	mov	r1, r0
 8005650:	b134      	cbz	r4, 8005660 <putchar+0x18>
 8005652:	69a3      	ldr	r3, [r4, #24]
 8005654:	b923      	cbnz	r3, 8005660 <putchar+0x18>
 8005656:	9001      	str	r0, [sp, #4]
 8005658:	4620      	mov	r0, r4
 800565a:	f000 fabf 	bl	8005bdc <__sinit>
 800565e:	9901      	ldr	r1, [sp, #4]
 8005660:	68a2      	ldr	r2, [r4, #8]
 8005662:	4620      	mov	r0, r4
 8005664:	b002      	add	sp, #8
 8005666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800566a:	f000 bf93 	b.w	8006594 <_putc_r>
 800566e:	bf00      	nop
 8005670:	200015f0 	.word	0x200015f0

08005674 <setvbuf>:
 8005674:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005678:	461d      	mov	r5, r3
 800567a:	4b5d      	ldr	r3, [pc, #372]	; (80057f0 <setvbuf+0x17c>)
 800567c:	681f      	ldr	r7, [r3, #0]
 800567e:	4604      	mov	r4, r0
 8005680:	460e      	mov	r6, r1
 8005682:	4690      	mov	r8, r2
 8005684:	b127      	cbz	r7, 8005690 <setvbuf+0x1c>
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	b913      	cbnz	r3, 8005690 <setvbuf+0x1c>
 800568a:	4638      	mov	r0, r7
 800568c:	f000 faa6 	bl	8005bdc <__sinit>
 8005690:	4b58      	ldr	r3, [pc, #352]	; (80057f4 <setvbuf+0x180>)
 8005692:	429c      	cmp	r4, r3
 8005694:	d167      	bne.n	8005766 <setvbuf+0xf2>
 8005696:	687c      	ldr	r4, [r7, #4]
 8005698:	f1b8 0f02 	cmp.w	r8, #2
 800569c:	d006      	beq.n	80056ac <setvbuf+0x38>
 800569e:	f1b8 0f01 	cmp.w	r8, #1
 80056a2:	f200 809f 	bhi.w	80057e4 <setvbuf+0x170>
 80056a6:	2d00      	cmp	r5, #0
 80056a8:	f2c0 809c 	blt.w	80057e4 <setvbuf+0x170>
 80056ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056ae:	07db      	lsls	r3, r3, #31
 80056b0:	d405      	bmi.n	80056be <setvbuf+0x4a>
 80056b2:	89a3      	ldrh	r3, [r4, #12]
 80056b4:	0598      	lsls	r0, r3, #22
 80056b6:	d402      	bmi.n	80056be <setvbuf+0x4a>
 80056b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056ba:	f000 fb2d 	bl	8005d18 <__retarget_lock_acquire_recursive>
 80056be:	4621      	mov	r1, r4
 80056c0:	4638      	mov	r0, r7
 80056c2:	f000 f9f7 	bl	8005ab4 <_fflush_r>
 80056c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056c8:	b141      	cbz	r1, 80056dc <setvbuf+0x68>
 80056ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056ce:	4299      	cmp	r1, r3
 80056d0:	d002      	beq.n	80056d8 <setvbuf+0x64>
 80056d2:	4638      	mov	r0, r7
 80056d4:	f000 fb90 	bl	8005df8 <_free_r>
 80056d8:	2300      	movs	r3, #0
 80056da:	6363      	str	r3, [r4, #52]	; 0x34
 80056dc:	2300      	movs	r3, #0
 80056de:	61a3      	str	r3, [r4, #24]
 80056e0:	6063      	str	r3, [r4, #4]
 80056e2:	89a3      	ldrh	r3, [r4, #12]
 80056e4:	0619      	lsls	r1, r3, #24
 80056e6:	d503      	bpl.n	80056f0 <setvbuf+0x7c>
 80056e8:	6921      	ldr	r1, [r4, #16]
 80056ea:	4638      	mov	r0, r7
 80056ec:	f000 fb84 	bl	8005df8 <_free_r>
 80056f0:	89a3      	ldrh	r3, [r4, #12]
 80056f2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80056f6:	f023 0303 	bic.w	r3, r3, #3
 80056fa:	f1b8 0f02 	cmp.w	r8, #2
 80056fe:	81a3      	strh	r3, [r4, #12]
 8005700:	d06c      	beq.n	80057dc <setvbuf+0x168>
 8005702:	ab01      	add	r3, sp, #4
 8005704:	466a      	mov	r2, sp
 8005706:	4621      	mov	r1, r4
 8005708:	4638      	mov	r0, r7
 800570a:	f000 fb07 	bl	8005d1c <__swhatbuf_r>
 800570e:	89a3      	ldrh	r3, [r4, #12]
 8005710:	4318      	orrs	r0, r3
 8005712:	81a0      	strh	r0, [r4, #12]
 8005714:	2d00      	cmp	r5, #0
 8005716:	d130      	bne.n	800577a <setvbuf+0x106>
 8005718:	9d00      	ldr	r5, [sp, #0]
 800571a:	4628      	mov	r0, r5
 800571c:	f000 fb64 	bl	8005de8 <malloc>
 8005720:	4606      	mov	r6, r0
 8005722:	2800      	cmp	r0, #0
 8005724:	d155      	bne.n	80057d2 <setvbuf+0x15e>
 8005726:	f8dd 9000 	ldr.w	r9, [sp]
 800572a:	45a9      	cmp	r9, r5
 800572c:	d14a      	bne.n	80057c4 <setvbuf+0x150>
 800572e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005732:	2200      	movs	r2, #0
 8005734:	60a2      	str	r2, [r4, #8]
 8005736:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800573a:	6022      	str	r2, [r4, #0]
 800573c:	6122      	str	r2, [r4, #16]
 800573e:	2201      	movs	r2, #1
 8005740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005744:	6162      	str	r2, [r4, #20]
 8005746:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005748:	f043 0302 	orr.w	r3, r3, #2
 800574c:	07d2      	lsls	r2, r2, #31
 800574e:	81a3      	strh	r3, [r4, #12]
 8005750:	d405      	bmi.n	800575e <setvbuf+0xea>
 8005752:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005756:	d102      	bne.n	800575e <setvbuf+0xea>
 8005758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800575a:	f000 fade 	bl	8005d1a <__retarget_lock_release_recursive>
 800575e:	4628      	mov	r0, r5
 8005760:	b003      	add	sp, #12
 8005762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005766:	4b24      	ldr	r3, [pc, #144]	; (80057f8 <setvbuf+0x184>)
 8005768:	429c      	cmp	r4, r3
 800576a:	d101      	bne.n	8005770 <setvbuf+0xfc>
 800576c:	68bc      	ldr	r4, [r7, #8]
 800576e:	e793      	b.n	8005698 <setvbuf+0x24>
 8005770:	4b22      	ldr	r3, [pc, #136]	; (80057fc <setvbuf+0x188>)
 8005772:	429c      	cmp	r4, r3
 8005774:	bf08      	it	eq
 8005776:	68fc      	ldreq	r4, [r7, #12]
 8005778:	e78e      	b.n	8005698 <setvbuf+0x24>
 800577a:	2e00      	cmp	r6, #0
 800577c:	d0cd      	beq.n	800571a <setvbuf+0xa6>
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	b913      	cbnz	r3, 8005788 <setvbuf+0x114>
 8005782:	4638      	mov	r0, r7
 8005784:	f000 fa2a 	bl	8005bdc <__sinit>
 8005788:	f1b8 0f01 	cmp.w	r8, #1
 800578c:	bf08      	it	eq
 800578e:	89a3      	ldrheq	r3, [r4, #12]
 8005790:	6026      	str	r6, [r4, #0]
 8005792:	bf04      	itt	eq
 8005794:	f043 0301 	orreq.w	r3, r3, #1
 8005798:	81a3      	strheq	r3, [r4, #12]
 800579a:	89a2      	ldrh	r2, [r4, #12]
 800579c:	f012 0308 	ands.w	r3, r2, #8
 80057a0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80057a4:	d01c      	beq.n	80057e0 <setvbuf+0x16c>
 80057a6:	07d3      	lsls	r3, r2, #31
 80057a8:	bf41      	itttt	mi
 80057aa:	2300      	movmi	r3, #0
 80057ac:	426d      	negmi	r5, r5
 80057ae:	60a3      	strmi	r3, [r4, #8]
 80057b0:	61a5      	strmi	r5, [r4, #24]
 80057b2:	bf58      	it	pl
 80057b4:	60a5      	strpl	r5, [r4, #8]
 80057b6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80057b8:	f015 0501 	ands.w	r5, r5, #1
 80057bc:	d115      	bne.n	80057ea <setvbuf+0x176>
 80057be:	f412 7f00 	tst.w	r2, #512	; 0x200
 80057c2:	e7c8      	b.n	8005756 <setvbuf+0xe2>
 80057c4:	4648      	mov	r0, r9
 80057c6:	f000 fb0f 	bl	8005de8 <malloc>
 80057ca:	4606      	mov	r6, r0
 80057cc:	2800      	cmp	r0, #0
 80057ce:	d0ae      	beq.n	800572e <setvbuf+0xba>
 80057d0:	464d      	mov	r5, r9
 80057d2:	89a3      	ldrh	r3, [r4, #12]
 80057d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d8:	81a3      	strh	r3, [r4, #12]
 80057da:	e7d0      	b.n	800577e <setvbuf+0x10a>
 80057dc:	2500      	movs	r5, #0
 80057de:	e7a8      	b.n	8005732 <setvbuf+0xbe>
 80057e0:	60a3      	str	r3, [r4, #8]
 80057e2:	e7e8      	b.n	80057b6 <setvbuf+0x142>
 80057e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80057e8:	e7b9      	b.n	800575e <setvbuf+0xea>
 80057ea:	2500      	movs	r5, #0
 80057ec:	e7b7      	b.n	800575e <setvbuf+0xea>
 80057ee:	bf00      	nop
 80057f0:	200015f0 	.word	0x200015f0
 80057f4:	0800696c 	.word	0x0800696c
 80057f8:	0800698c 	.word	0x0800698c
 80057fc:	0800694c 	.word	0x0800694c

08005800 <strncmp>:
 8005800:	b510      	push	{r4, lr}
 8005802:	b17a      	cbz	r2, 8005824 <strncmp+0x24>
 8005804:	4603      	mov	r3, r0
 8005806:	3901      	subs	r1, #1
 8005808:	1884      	adds	r4, r0, r2
 800580a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800580e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005812:	4290      	cmp	r0, r2
 8005814:	d101      	bne.n	800581a <strncmp+0x1a>
 8005816:	42a3      	cmp	r3, r4
 8005818:	d101      	bne.n	800581e <strncmp+0x1e>
 800581a:	1a80      	subs	r0, r0, r2
 800581c:	bd10      	pop	{r4, pc}
 800581e:	2800      	cmp	r0, #0
 8005820:	d1f3      	bne.n	800580a <strncmp+0xa>
 8005822:	e7fa      	b.n	800581a <strncmp+0x1a>
 8005824:	4610      	mov	r0, r2
 8005826:	e7f9      	b.n	800581c <strncmp+0x1c>

08005828 <__swbuf_r>:
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	460e      	mov	r6, r1
 800582c:	4614      	mov	r4, r2
 800582e:	4605      	mov	r5, r0
 8005830:	b118      	cbz	r0, 800583a <__swbuf_r+0x12>
 8005832:	6983      	ldr	r3, [r0, #24]
 8005834:	b90b      	cbnz	r3, 800583a <__swbuf_r+0x12>
 8005836:	f000 f9d1 	bl	8005bdc <__sinit>
 800583a:	4b21      	ldr	r3, [pc, #132]	; (80058c0 <__swbuf_r+0x98>)
 800583c:	429c      	cmp	r4, r3
 800583e:	d12b      	bne.n	8005898 <__swbuf_r+0x70>
 8005840:	686c      	ldr	r4, [r5, #4]
 8005842:	69a3      	ldr	r3, [r4, #24]
 8005844:	60a3      	str	r3, [r4, #8]
 8005846:	89a3      	ldrh	r3, [r4, #12]
 8005848:	071a      	lsls	r2, r3, #28
 800584a:	d52f      	bpl.n	80058ac <__swbuf_r+0x84>
 800584c:	6923      	ldr	r3, [r4, #16]
 800584e:	b36b      	cbz	r3, 80058ac <__swbuf_r+0x84>
 8005850:	6923      	ldr	r3, [r4, #16]
 8005852:	6820      	ldr	r0, [r4, #0]
 8005854:	1ac0      	subs	r0, r0, r3
 8005856:	6963      	ldr	r3, [r4, #20]
 8005858:	b2f6      	uxtb	r6, r6
 800585a:	4283      	cmp	r3, r0
 800585c:	4637      	mov	r7, r6
 800585e:	dc04      	bgt.n	800586a <__swbuf_r+0x42>
 8005860:	4621      	mov	r1, r4
 8005862:	4628      	mov	r0, r5
 8005864:	f000 f926 	bl	8005ab4 <_fflush_r>
 8005868:	bb30      	cbnz	r0, 80058b8 <__swbuf_r+0x90>
 800586a:	68a3      	ldr	r3, [r4, #8]
 800586c:	3b01      	subs	r3, #1
 800586e:	60a3      	str	r3, [r4, #8]
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	6022      	str	r2, [r4, #0]
 8005876:	701e      	strb	r6, [r3, #0]
 8005878:	6963      	ldr	r3, [r4, #20]
 800587a:	3001      	adds	r0, #1
 800587c:	4283      	cmp	r3, r0
 800587e:	d004      	beq.n	800588a <__swbuf_r+0x62>
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	07db      	lsls	r3, r3, #31
 8005884:	d506      	bpl.n	8005894 <__swbuf_r+0x6c>
 8005886:	2e0a      	cmp	r6, #10
 8005888:	d104      	bne.n	8005894 <__swbuf_r+0x6c>
 800588a:	4621      	mov	r1, r4
 800588c:	4628      	mov	r0, r5
 800588e:	f000 f911 	bl	8005ab4 <_fflush_r>
 8005892:	b988      	cbnz	r0, 80058b8 <__swbuf_r+0x90>
 8005894:	4638      	mov	r0, r7
 8005896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005898:	4b0a      	ldr	r3, [pc, #40]	; (80058c4 <__swbuf_r+0x9c>)
 800589a:	429c      	cmp	r4, r3
 800589c:	d101      	bne.n	80058a2 <__swbuf_r+0x7a>
 800589e:	68ac      	ldr	r4, [r5, #8]
 80058a0:	e7cf      	b.n	8005842 <__swbuf_r+0x1a>
 80058a2:	4b09      	ldr	r3, [pc, #36]	; (80058c8 <__swbuf_r+0xa0>)
 80058a4:	429c      	cmp	r4, r3
 80058a6:	bf08      	it	eq
 80058a8:	68ec      	ldreq	r4, [r5, #12]
 80058aa:	e7ca      	b.n	8005842 <__swbuf_r+0x1a>
 80058ac:	4621      	mov	r1, r4
 80058ae:	4628      	mov	r0, r5
 80058b0:	f000 f80c 	bl	80058cc <__swsetup_r>
 80058b4:	2800      	cmp	r0, #0
 80058b6:	d0cb      	beq.n	8005850 <__swbuf_r+0x28>
 80058b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80058bc:	e7ea      	b.n	8005894 <__swbuf_r+0x6c>
 80058be:	bf00      	nop
 80058c0:	0800696c 	.word	0x0800696c
 80058c4:	0800698c 	.word	0x0800698c
 80058c8:	0800694c 	.word	0x0800694c

080058cc <__swsetup_r>:
 80058cc:	4b32      	ldr	r3, [pc, #200]	; (8005998 <__swsetup_r+0xcc>)
 80058ce:	b570      	push	{r4, r5, r6, lr}
 80058d0:	681d      	ldr	r5, [r3, #0]
 80058d2:	4606      	mov	r6, r0
 80058d4:	460c      	mov	r4, r1
 80058d6:	b125      	cbz	r5, 80058e2 <__swsetup_r+0x16>
 80058d8:	69ab      	ldr	r3, [r5, #24]
 80058da:	b913      	cbnz	r3, 80058e2 <__swsetup_r+0x16>
 80058dc:	4628      	mov	r0, r5
 80058de:	f000 f97d 	bl	8005bdc <__sinit>
 80058e2:	4b2e      	ldr	r3, [pc, #184]	; (800599c <__swsetup_r+0xd0>)
 80058e4:	429c      	cmp	r4, r3
 80058e6:	d10f      	bne.n	8005908 <__swsetup_r+0x3c>
 80058e8:	686c      	ldr	r4, [r5, #4]
 80058ea:	89a3      	ldrh	r3, [r4, #12]
 80058ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058f0:	0719      	lsls	r1, r3, #28
 80058f2:	d42c      	bmi.n	800594e <__swsetup_r+0x82>
 80058f4:	06dd      	lsls	r5, r3, #27
 80058f6:	d411      	bmi.n	800591c <__swsetup_r+0x50>
 80058f8:	2309      	movs	r3, #9
 80058fa:	6033      	str	r3, [r6, #0]
 80058fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005900:	81a3      	strh	r3, [r4, #12]
 8005902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005906:	e03e      	b.n	8005986 <__swsetup_r+0xba>
 8005908:	4b25      	ldr	r3, [pc, #148]	; (80059a0 <__swsetup_r+0xd4>)
 800590a:	429c      	cmp	r4, r3
 800590c:	d101      	bne.n	8005912 <__swsetup_r+0x46>
 800590e:	68ac      	ldr	r4, [r5, #8]
 8005910:	e7eb      	b.n	80058ea <__swsetup_r+0x1e>
 8005912:	4b24      	ldr	r3, [pc, #144]	; (80059a4 <__swsetup_r+0xd8>)
 8005914:	429c      	cmp	r4, r3
 8005916:	bf08      	it	eq
 8005918:	68ec      	ldreq	r4, [r5, #12]
 800591a:	e7e6      	b.n	80058ea <__swsetup_r+0x1e>
 800591c:	0758      	lsls	r0, r3, #29
 800591e:	d512      	bpl.n	8005946 <__swsetup_r+0x7a>
 8005920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005922:	b141      	cbz	r1, 8005936 <__swsetup_r+0x6a>
 8005924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005928:	4299      	cmp	r1, r3
 800592a:	d002      	beq.n	8005932 <__swsetup_r+0x66>
 800592c:	4630      	mov	r0, r6
 800592e:	f000 fa63 	bl	8005df8 <_free_r>
 8005932:	2300      	movs	r3, #0
 8005934:	6363      	str	r3, [r4, #52]	; 0x34
 8005936:	89a3      	ldrh	r3, [r4, #12]
 8005938:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800593c:	81a3      	strh	r3, [r4, #12]
 800593e:	2300      	movs	r3, #0
 8005940:	6063      	str	r3, [r4, #4]
 8005942:	6923      	ldr	r3, [r4, #16]
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	89a3      	ldrh	r3, [r4, #12]
 8005948:	f043 0308 	orr.w	r3, r3, #8
 800594c:	81a3      	strh	r3, [r4, #12]
 800594e:	6923      	ldr	r3, [r4, #16]
 8005950:	b94b      	cbnz	r3, 8005966 <__swsetup_r+0x9a>
 8005952:	89a3      	ldrh	r3, [r4, #12]
 8005954:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800595c:	d003      	beq.n	8005966 <__swsetup_r+0x9a>
 800595e:	4621      	mov	r1, r4
 8005960:	4630      	mov	r0, r6
 8005962:	f000 fa01 	bl	8005d68 <__smakebuf_r>
 8005966:	89a0      	ldrh	r0, [r4, #12]
 8005968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800596c:	f010 0301 	ands.w	r3, r0, #1
 8005970:	d00a      	beq.n	8005988 <__swsetup_r+0xbc>
 8005972:	2300      	movs	r3, #0
 8005974:	60a3      	str	r3, [r4, #8]
 8005976:	6963      	ldr	r3, [r4, #20]
 8005978:	425b      	negs	r3, r3
 800597a:	61a3      	str	r3, [r4, #24]
 800597c:	6923      	ldr	r3, [r4, #16]
 800597e:	b943      	cbnz	r3, 8005992 <__swsetup_r+0xc6>
 8005980:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005984:	d1ba      	bne.n	80058fc <__swsetup_r+0x30>
 8005986:	bd70      	pop	{r4, r5, r6, pc}
 8005988:	0781      	lsls	r1, r0, #30
 800598a:	bf58      	it	pl
 800598c:	6963      	ldrpl	r3, [r4, #20]
 800598e:	60a3      	str	r3, [r4, #8]
 8005990:	e7f4      	b.n	800597c <__swsetup_r+0xb0>
 8005992:	2000      	movs	r0, #0
 8005994:	e7f7      	b.n	8005986 <__swsetup_r+0xba>
 8005996:	bf00      	nop
 8005998:	200015f0 	.word	0x200015f0
 800599c:	0800696c 	.word	0x0800696c
 80059a0:	0800698c 	.word	0x0800698c
 80059a4:	0800694c 	.word	0x0800694c

080059a8 <__sflush_r>:
 80059a8:	898a      	ldrh	r2, [r1, #12]
 80059aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ae:	4605      	mov	r5, r0
 80059b0:	0710      	lsls	r0, r2, #28
 80059b2:	460c      	mov	r4, r1
 80059b4:	d458      	bmi.n	8005a68 <__sflush_r+0xc0>
 80059b6:	684b      	ldr	r3, [r1, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	dc05      	bgt.n	80059c8 <__sflush_r+0x20>
 80059bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059be:	2b00      	cmp	r3, #0
 80059c0:	dc02      	bgt.n	80059c8 <__sflush_r+0x20>
 80059c2:	2000      	movs	r0, #0
 80059c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059ca:	2e00      	cmp	r6, #0
 80059cc:	d0f9      	beq.n	80059c2 <__sflush_r+0x1a>
 80059ce:	2300      	movs	r3, #0
 80059d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059d4:	682f      	ldr	r7, [r5, #0]
 80059d6:	602b      	str	r3, [r5, #0]
 80059d8:	d032      	beq.n	8005a40 <__sflush_r+0x98>
 80059da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059dc:	89a3      	ldrh	r3, [r4, #12]
 80059de:	075a      	lsls	r2, r3, #29
 80059e0:	d505      	bpl.n	80059ee <__sflush_r+0x46>
 80059e2:	6863      	ldr	r3, [r4, #4]
 80059e4:	1ac0      	subs	r0, r0, r3
 80059e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059e8:	b10b      	cbz	r3, 80059ee <__sflush_r+0x46>
 80059ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059ec:	1ac0      	subs	r0, r0, r3
 80059ee:	2300      	movs	r3, #0
 80059f0:	4602      	mov	r2, r0
 80059f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059f4:	6a21      	ldr	r1, [r4, #32]
 80059f6:	4628      	mov	r0, r5
 80059f8:	47b0      	blx	r6
 80059fa:	1c43      	adds	r3, r0, #1
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	d106      	bne.n	8005a0e <__sflush_r+0x66>
 8005a00:	6829      	ldr	r1, [r5, #0]
 8005a02:	291d      	cmp	r1, #29
 8005a04:	d82c      	bhi.n	8005a60 <__sflush_r+0xb8>
 8005a06:	4a2a      	ldr	r2, [pc, #168]	; (8005ab0 <__sflush_r+0x108>)
 8005a08:	40ca      	lsrs	r2, r1
 8005a0a:	07d6      	lsls	r6, r2, #31
 8005a0c:	d528      	bpl.n	8005a60 <__sflush_r+0xb8>
 8005a0e:	2200      	movs	r2, #0
 8005a10:	6062      	str	r2, [r4, #4]
 8005a12:	04d9      	lsls	r1, r3, #19
 8005a14:	6922      	ldr	r2, [r4, #16]
 8005a16:	6022      	str	r2, [r4, #0]
 8005a18:	d504      	bpl.n	8005a24 <__sflush_r+0x7c>
 8005a1a:	1c42      	adds	r2, r0, #1
 8005a1c:	d101      	bne.n	8005a22 <__sflush_r+0x7a>
 8005a1e:	682b      	ldr	r3, [r5, #0]
 8005a20:	b903      	cbnz	r3, 8005a24 <__sflush_r+0x7c>
 8005a22:	6560      	str	r0, [r4, #84]	; 0x54
 8005a24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a26:	602f      	str	r7, [r5, #0]
 8005a28:	2900      	cmp	r1, #0
 8005a2a:	d0ca      	beq.n	80059c2 <__sflush_r+0x1a>
 8005a2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a30:	4299      	cmp	r1, r3
 8005a32:	d002      	beq.n	8005a3a <__sflush_r+0x92>
 8005a34:	4628      	mov	r0, r5
 8005a36:	f000 f9df 	bl	8005df8 <_free_r>
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	6360      	str	r0, [r4, #52]	; 0x34
 8005a3e:	e7c1      	b.n	80059c4 <__sflush_r+0x1c>
 8005a40:	6a21      	ldr	r1, [r4, #32]
 8005a42:	2301      	movs	r3, #1
 8005a44:	4628      	mov	r0, r5
 8005a46:	47b0      	blx	r6
 8005a48:	1c41      	adds	r1, r0, #1
 8005a4a:	d1c7      	bne.n	80059dc <__sflush_r+0x34>
 8005a4c:	682b      	ldr	r3, [r5, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d0c4      	beq.n	80059dc <__sflush_r+0x34>
 8005a52:	2b1d      	cmp	r3, #29
 8005a54:	d001      	beq.n	8005a5a <__sflush_r+0xb2>
 8005a56:	2b16      	cmp	r3, #22
 8005a58:	d101      	bne.n	8005a5e <__sflush_r+0xb6>
 8005a5a:	602f      	str	r7, [r5, #0]
 8005a5c:	e7b1      	b.n	80059c2 <__sflush_r+0x1a>
 8005a5e:	89a3      	ldrh	r3, [r4, #12]
 8005a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a64:	81a3      	strh	r3, [r4, #12]
 8005a66:	e7ad      	b.n	80059c4 <__sflush_r+0x1c>
 8005a68:	690f      	ldr	r7, [r1, #16]
 8005a6a:	2f00      	cmp	r7, #0
 8005a6c:	d0a9      	beq.n	80059c2 <__sflush_r+0x1a>
 8005a6e:	0793      	lsls	r3, r2, #30
 8005a70:	680e      	ldr	r6, [r1, #0]
 8005a72:	bf08      	it	eq
 8005a74:	694b      	ldreq	r3, [r1, #20]
 8005a76:	600f      	str	r7, [r1, #0]
 8005a78:	bf18      	it	ne
 8005a7a:	2300      	movne	r3, #0
 8005a7c:	eba6 0807 	sub.w	r8, r6, r7
 8005a80:	608b      	str	r3, [r1, #8]
 8005a82:	f1b8 0f00 	cmp.w	r8, #0
 8005a86:	dd9c      	ble.n	80059c2 <__sflush_r+0x1a>
 8005a88:	6a21      	ldr	r1, [r4, #32]
 8005a8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a8c:	4643      	mov	r3, r8
 8005a8e:	463a      	mov	r2, r7
 8005a90:	4628      	mov	r0, r5
 8005a92:	47b0      	blx	r6
 8005a94:	2800      	cmp	r0, #0
 8005a96:	dc06      	bgt.n	8005aa6 <__sflush_r+0xfe>
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a9e:	81a3      	strh	r3, [r4, #12]
 8005aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005aa4:	e78e      	b.n	80059c4 <__sflush_r+0x1c>
 8005aa6:	4407      	add	r7, r0
 8005aa8:	eba8 0800 	sub.w	r8, r8, r0
 8005aac:	e7e9      	b.n	8005a82 <__sflush_r+0xda>
 8005aae:	bf00      	nop
 8005ab0:	20400001 	.word	0x20400001

08005ab4 <_fflush_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	690b      	ldr	r3, [r1, #16]
 8005ab8:	4605      	mov	r5, r0
 8005aba:	460c      	mov	r4, r1
 8005abc:	b913      	cbnz	r3, 8005ac4 <_fflush_r+0x10>
 8005abe:	2500      	movs	r5, #0
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	b118      	cbz	r0, 8005ace <_fflush_r+0x1a>
 8005ac6:	6983      	ldr	r3, [r0, #24]
 8005ac8:	b90b      	cbnz	r3, 8005ace <_fflush_r+0x1a>
 8005aca:	f000 f887 	bl	8005bdc <__sinit>
 8005ace:	4b14      	ldr	r3, [pc, #80]	; (8005b20 <_fflush_r+0x6c>)
 8005ad0:	429c      	cmp	r4, r3
 8005ad2:	d11b      	bne.n	8005b0c <_fflush_r+0x58>
 8005ad4:	686c      	ldr	r4, [r5, #4]
 8005ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0ef      	beq.n	8005abe <_fflush_r+0xa>
 8005ade:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ae0:	07d0      	lsls	r0, r2, #31
 8005ae2:	d404      	bmi.n	8005aee <_fflush_r+0x3a>
 8005ae4:	0599      	lsls	r1, r3, #22
 8005ae6:	d402      	bmi.n	8005aee <_fflush_r+0x3a>
 8005ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aea:	f000 f915 	bl	8005d18 <__retarget_lock_acquire_recursive>
 8005aee:	4628      	mov	r0, r5
 8005af0:	4621      	mov	r1, r4
 8005af2:	f7ff ff59 	bl	80059a8 <__sflush_r>
 8005af6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005af8:	07da      	lsls	r2, r3, #31
 8005afa:	4605      	mov	r5, r0
 8005afc:	d4e0      	bmi.n	8005ac0 <_fflush_r+0xc>
 8005afe:	89a3      	ldrh	r3, [r4, #12]
 8005b00:	059b      	lsls	r3, r3, #22
 8005b02:	d4dd      	bmi.n	8005ac0 <_fflush_r+0xc>
 8005b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b06:	f000 f908 	bl	8005d1a <__retarget_lock_release_recursive>
 8005b0a:	e7d9      	b.n	8005ac0 <_fflush_r+0xc>
 8005b0c:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <_fflush_r+0x70>)
 8005b0e:	429c      	cmp	r4, r3
 8005b10:	d101      	bne.n	8005b16 <_fflush_r+0x62>
 8005b12:	68ac      	ldr	r4, [r5, #8]
 8005b14:	e7df      	b.n	8005ad6 <_fflush_r+0x22>
 8005b16:	4b04      	ldr	r3, [pc, #16]	; (8005b28 <_fflush_r+0x74>)
 8005b18:	429c      	cmp	r4, r3
 8005b1a:	bf08      	it	eq
 8005b1c:	68ec      	ldreq	r4, [r5, #12]
 8005b1e:	e7da      	b.n	8005ad6 <_fflush_r+0x22>
 8005b20:	0800696c 	.word	0x0800696c
 8005b24:	0800698c 	.word	0x0800698c
 8005b28:	0800694c 	.word	0x0800694c

08005b2c <std>:
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	b510      	push	{r4, lr}
 8005b30:	4604      	mov	r4, r0
 8005b32:	e9c0 3300 	strd	r3, r3, [r0]
 8005b36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b3a:	6083      	str	r3, [r0, #8]
 8005b3c:	8181      	strh	r1, [r0, #12]
 8005b3e:	6643      	str	r3, [r0, #100]	; 0x64
 8005b40:	81c2      	strh	r2, [r0, #14]
 8005b42:	6183      	str	r3, [r0, #24]
 8005b44:	4619      	mov	r1, r3
 8005b46:	2208      	movs	r2, #8
 8005b48:	305c      	adds	r0, #92	; 0x5c
 8005b4a:	f7ff fd5d 	bl	8005608 <memset>
 8005b4e:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <std+0x38>)
 8005b50:	6263      	str	r3, [r4, #36]	; 0x24
 8005b52:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <std+0x3c>)
 8005b54:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b56:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <std+0x40>)
 8005b58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b5a:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <std+0x44>)
 8005b5c:	6224      	str	r4, [r4, #32]
 8005b5e:	6323      	str	r3, [r4, #48]	; 0x30
 8005b60:	bd10      	pop	{r4, pc}
 8005b62:	bf00      	nop
 8005b64:	08006645 	.word	0x08006645
 8005b68:	08006667 	.word	0x08006667
 8005b6c:	0800669f 	.word	0x0800669f
 8005b70:	080066c3 	.word	0x080066c3

08005b74 <_cleanup_r>:
 8005b74:	4901      	ldr	r1, [pc, #4]	; (8005b7c <_cleanup_r+0x8>)
 8005b76:	f000 b8af 	b.w	8005cd8 <_fwalk_reent>
 8005b7a:	bf00      	nop
 8005b7c:	08005ab5 	.word	0x08005ab5

08005b80 <__sfmoreglue>:
 8005b80:	b570      	push	{r4, r5, r6, lr}
 8005b82:	2268      	movs	r2, #104	; 0x68
 8005b84:	1e4d      	subs	r5, r1, #1
 8005b86:	4355      	muls	r5, r2
 8005b88:	460e      	mov	r6, r1
 8005b8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b8e:	f000 f99f 	bl	8005ed0 <_malloc_r>
 8005b92:	4604      	mov	r4, r0
 8005b94:	b140      	cbz	r0, 8005ba8 <__sfmoreglue+0x28>
 8005b96:	2100      	movs	r1, #0
 8005b98:	e9c0 1600 	strd	r1, r6, [r0]
 8005b9c:	300c      	adds	r0, #12
 8005b9e:	60a0      	str	r0, [r4, #8]
 8005ba0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ba4:	f7ff fd30 	bl	8005608 <memset>
 8005ba8:	4620      	mov	r0, r4
 8005baa:	bd70      	pop	{r4, r5, r6, pc}

08005bac <__sfp_lock_acquire>:
 8005bac:	4801      	ldr	r0, [pc, #4]	; (8005bb4 <__sfp_lock_acquire+0x8>)
 8005bae:	f000 b8b3 	b.w	8005d18 <__retarget_lock_acquire_recursive>
 8005bb2:	bf00      	nop
 8005bb4:	200018e9 	.word	0x200018e9

08005bb8 <__sfp_lock_release>:
 8005bb8:	4801      	ldr	r0, [pc, #4]	; (8005bc0 <__sfp_lock_release+0x8>)
 8005bba:	f000 b8ae 	b.w	8005d1a <__retarget_lock_release_recursive>
 8005bbe:	bf00      	nop
 8005bc0:	200018e9 	.word	0x200018e9

08005bc4 <__sinit_lock_acquire>:
 8005bc4:	4801      	ldr	r0, [pc, #4]	; (8005bcc <__sinit_lock_acquire+0x8>)
 8005bc6:	f000 b8a7 	b.w	8005d18 <__retarget_lock_acquire_recursive>
 8005bca:	bf00      	nop
 8005bcc:	200018ea 	.word	0x200018ea

08005bd0 <__sinit_lock_release>:
 8005bd0:	4801      	ldr	r0, [pc, #4]	; (8005bd8 <__sinit_lock_release+0x8>)
 8005bd2:	f000 b8a2 	b.w	8005d1a <__retarget_lock_release_recursive>
 8005bd6:	bf00      	nop
 8005bd8:	200018ea 	.word	0x200018ea

08005bdc <__sinit>:
 8005bdc:	b510      	push	{r4, lr}
 8005bde:	4604      	mov	r4, r0
 8005be0:	f7ff fff0 	bl	8005bc4 <__sinit_lock_acquire>
 8005be4:	69a3      	ldr	r3, [r4, #24]
 8005be6:	b11b      	cbz	r3, 8005bf0 <__sinit+0x14>
 8005be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bec:	f7ff bff0 	b.w	8005bd0 <__sinit_lock_release>
 8005bf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005bf4:	6523      	str	r3, [r4, #80]	; 0x50
 8005bf6:	4b13      	ldr	r3, [pc, #76]	; (8005c44 <__sinit+0x68>)
 8005bf8:	4a13      	ldr	r2, [pc, #76]	; (8005c48 <__sinit+0x6c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8005bfe:	42a3      	cmp	r3, r4
 8005c00:	bf04      	itt	eq
 8005c02:	2301      	moveq	r3, #1
 8005c04:	61a3      	streq	r3, [r4, #24]
 8005c06:	4620      	mov	r0, r4
 8005c08:	f000 f820 	bl	8005c4c <__sfp>
 8005c0c:	6060      	str	r0, [r4, #4]
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f000 f81c 	bl	8005c4c <__sfp>
 8005c14:	60a0      	str	r0, [r4, #8]
 8005c16:	4620      	mov	r0, r4
 8005c18:	f000 f818 	bl	8005c4c <__sfp>
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	60e0      	str	r0, [r4, #12]
 8005c20:	2104      	movs	r1, #4
 8005c22:	6860      	ldr	r0, [r4, #4]
 8005c24:	f7ff ff82 	bl	8005b2c <std>
 8005c28:	68a0      	ldr	r0, [r4, #8]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	2109      	movs	r1, #9
 8005c2e:	f7ff ff7d 	bl	8005b2c <std>
 8005c32:	68e0      	ldr	r0, [r4, #12]
 8005c34:	2202      	movs	r2, #2
 8005c36:	2112      	movs	r1, #18
 8005c38:	f7ff ff78 	bl	8005b2c <std>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	61a3      	str	r3, [r4, #24]
 8005c40:	e7d2      	b.n	8005be8 <__sinit+0xc>
 8005c42:	bf00      	nop
 8005c44:	08006948 	.word	0x08006948
 8005c48:	08005b75 	.word	0x08005b75

08005c4c <__sfp>:
 8005c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4e:	4607      	mov	r7, r0
 8005c50:	f7ff ffac 	bl	8005bac <__sfp_lock_acquire>
 8005c54:	4b1e      	ldr	r3, [pc, #120]	; (8005cd0 <__sfp+0x84>)
 8005c56:	681e      	ldr	r6, [r3, #0]
 8005c58:	69b3      	ldr	r3, [r6, #24]
 8005c5a:	b913      	cbnz	r3, 8005c62 <__sfp+0x16>
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	f7ff ffbd 	bl	8005bdc <__sinit>
 8005c62:	3648      	adds	r6, #72	; 0x48
 8005c64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	d503      	bpl.n	8005c74 <__sfp+0x28>
 8005c6c:	6833      	ldr	r3, [r6, #0]
 8005c6e:	b30b      	cbz	r3, 8005cb4 <__sfp+0x68>
 8005c70:	6836      	ldr	r6, [r6, #0]
 8005c72:	e7f7      	b.n	8005c64 <__sfp+0x18>
 8005c74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c78:	b9d5      	cbnz	r5, 8005cb0 <__sfp+0x64>
 8005c7a:	4b16      	ldr	r3, [pc, #88]	; (8005cd4 <__sfp+0x88>)
 8005c7c:	60e3      	str	r3, [r4, #12]
 8005c7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c82:	6665      	str	r5, [r4, #100]	; 0x64
 8005c84:	f000 f847 	bl	8005d16 <__retarget_lock_init_recursive>
 8005c88:	f7ff ff96 	bl	8005bb8 <__sfp_lock_release>
 8005c8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c94:	6025      	str	r5, [r4, #0]
 8005c96:	61a5      	str	r5, [r4, #24]
 8005c98:	2208      	movs	r2, #8
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ca0:	f7ff fcb2 	bl	8005608 <memset>
 8005ca4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ca8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005cac:	4620      	mov	r0, r4
 8005cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cb0:	3468      	adds	r4, #104	; 0x68
 8005cb2:	e7d9      	b.n	8005c68 <__sfp+0x1c>
 8005cb4:	2104      	movs	r1, #4
 8005cb6:	4638      	mov	r0, r7
 8005cb8:	f7ff ff62 	bl	8005b80 <__sfmoreglue>
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	6030      	str	r0, [r6, #0]
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d1d5      	bne.n	8005c70 <__sfp+0x24>
 8005cc4:	f7ff ff78 	bl	8005bb8 <__sfp_lock_release>
 8005cc8:	230c      	movs	r3, #12
 8005cca:	603b      	str	r3, [r7, #0]
 8005ccc:	e7ee      	b.n	8005cac <__sfp+0x60>
 8005cce:	bf00      	nop
 8005cd0:	08006948 	.word	0x08006948
 8005cd4:	ffff0001 	.word	0xffff0001

08005cd8 <_fwalk_reent>:
 8005cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cdc:	4606      	mov	r6, r0
 8005cde:	4688      	mov	r8, r1
 8005ce0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ce4:	2700      	movs	r7, #0
 8005ce6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cea:	f1b9 0901 	subs.w	r9, r9, #1
 8005cee:	d505      	bpl.n	8005cfc <_fwalk_reent+0x24>
 8005cf0:	6824      	ldr	r4, [r4, #0]
 8005cf2:	2c00      	cmp	r4, #0
 8005cf4:	d1f7      	bne.n	8005ce6 <_fwalk_reent+0xe>
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cfc:	89ab      	ldrh	r3, [r5, #12]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d907      	bls.n	8005d12 <_fwalk_reent+0x3a>
 8005d02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d06:	3301      	adds	r3, #1
 8005d08:	d003      	beq.n	8005d12 <_fwalk_reent+0x3a>
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	47c0      	blx	r8
 8005d10:	4307      	orrs	r7, r0
 8005d12:	3568      	adds	r5, #104	; 0x68
 8005d14:	e7e9      	b.n	8005cea <_fwalk_reent+0x12>

08005d16 <__retarget_lock_init_recursive>:
 8005d16:	4770      	bx	lr

08005d18 <__retarget_lock_acquire_recursive>:
 8005d18:	4770      	bx	lr

08005d1a <__retarget_lock_release_recursive>:
 8005d1a:	4770      	bx	lr

08005d1c <__swhatbuf_r>:
 8005d1c:	b570      	push	{r4, r5, r6, lr}
 8005d1e:	460e      	mov	r6, r1
 8005d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d24:	2900      	cmp	r1, #0
 8005d26:	b096      	sub	sp, #88	; 0x58
 8005d28:	4614      	mov	r4, r2
 8005d2a:	461d      	mov	r5, r3
 8005d2c:	da08      	bge.n	8005d40 <__swhatbuf_r+0x24>
 8005d2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	602a      	str	r2, [r5, #0]
 8005d36:	061a      	lsls	r2, r3, #24
 8005d38:	d410      	bmi.n	8005d5c <__swhatbuf_r+0x40>
 8005d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d3e:	e00e      	b.n	8005d5e <__swhatbuf_r+0x42>
 8005d40:	466a      	mov	r2, sp
 8005d42:	f000 fce5 	bl	8006710 <_fstat_r>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	dbf1      	blt.n	8005d2e <__swhatbuf_r+0x12>
 8005d4a:	9a01      	ldr	r2, [sp, #4]
 8005d4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d54:	425a      	negs	r2, r3
 8005d56:	415a      	adcs	r2, r3
 8005d58:	602a      	str	r2, [r5, #0]
 8005d5a:	e7ee      	b.n	8005d3a <__swhatbuf_r+0x1e>
 8005d5c:	2340      	movs	r3, #64	; 0x40
 8005d5e:	2000      	movs	r0, #0
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	b016      	add	sp, #88	; 0x58
 8005d64:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d68 <__smakebuf_r>:
 8005d68:	898b      	ldrh	r3, [r1, #12]
 8005d6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d6c:	079d      	lsls	r5, r3, #30
 8005d6e:	4606      	mov	r6, r0
 8005d70:	460c      	mov	r4, r1
 8005d72:	d507      	bpl.n	8005d84 <__smakebuf_r+0x1c>
 8005d74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d78:	6023      	str	r3, [r4, #0]
 8005d7a:	6123      	str	r3, [r4, #16]
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	6163      	str	r3, [r4, #20]
 8005d80:	b002      	add	sp, #8
 8005d82:	bd70      	pop	{r4, r5, r6, pc}
 8005d84:	ab01      	add	r3, sp, #4
 8005d86:	466a      	mov	r2, sp
 8005d88:	f7ff ffc8 	bl	8005d1c <__swhatbuf_r>
 8005d8c:	9900      	ldr	r1, [sp, #0]
 8005d8e:	4605      	mov	r5, r0
 8005d90:	4630      	mov	r0, r6
 8005d92:	f000 f89d 	bl	8005ed0 <_malloc_r>
 8005d96:	b948      	cbnz	r0, 8005dac <__smakebuf_r+0x44>
 8005d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d9c:	059a      	lsls	r2, r3, #22
 8005d9e:	d4ef      	bmi.n	8005d80 <__smakebuf_r+0x18>
 8005da0:	f023 0303 	bic.w	r3, r3, #3
 8005da4:	f043 0302 	orr.w	r3, r3, #2
 8005da8:	81a3      	strh	r3, [r4, #12]
 8005daa:	e7e3      	b.n	8005d74 <__smakebuf_r+0xc>
 8005dac:	4b0d      	ldr	r3, [pc, #52]	; (8005de4 <__smakebuf_r+0x7c>)
 8005dae:	62b3      	str	r3, [r6, #40]	; 0x28
 8005db0:	89a3      	ldrh	r3, [r4, #12]
 8005db2:	6020      	str	r0, [r4, #0]
 8005db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db8:	81a3      	strh	r3, [r4, #12]
 8005dba:	9b00      	ldr	r3, [sp, #0]
 8005dbc:	6163      	str	r3, [r4, #20]
 8005dbe:	9b01      	ldr	r3, [sp, #4]
 8005dc0:	6120      	str	r0, [r4, #16]
 8005dc2:	b15b      	cbz	r3, 8005ddc <__smakebuf_r+0x74>
 8005dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dc8:	4630      	mov	r0, r6
 8005dca:	f000 fcb3 	bl	8006734 <_isatty_r>
 8005dce:	b128      	cbz	r0, 8005ddc <__smakebuf_r+0x74>
 8005dd0:	89a3      	ldrh	r3, [r4, #12]
 8005dd2:	f023 0303 	bic.w	r3, r3, #3
 8005dd6:	f043 0301 	orr.w	r3, r3, #1
 8005dda:	81a3      	strh	r3, [r4, #12]
 8005ddc:	89a0      	ldrh	r0, [r4, #12]
 8005dde:	4305      	orrs	r5, r0
 8005de0:	81a5      	strh	r5, [r4, #12]
 8005de2:	e7cd      	b.n	8005d80 <__smakebuf_r+0x18>
 8005de4:	08005b75 	.word	0x08005b75

08005de8 <malloc>:
 8005de8:	4b02      	ldr	r3, [pc, #8]	; (8005df4 <malloc+0xc>)
 8005dea:	4601      	mov	r1, r0
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	f000 b86f 	b.w	8005ed0 <_malloc_r>
 8005df2:	bf00      	nop
 8005df4:	200015f0 	.word	0x200015f0

08005df8 <_free_r>:
 8005df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dfa:	2900      	cmp	r1, #0
 8005dfc:	d044      	beq.n	8005e88 <_free_r+0x90>
 8005dfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e02:	9001      	str	r0, [sp, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f1a1 0404 	sub.w	r4, r1, #4
 8005e0a:	bfb8      	it	lt
 8005e0c:	18e4      	addlt	r4, r4, r3
 8005e0e:	f000 fcb3 	bl	8006778 <__malloc_lock>
 8005e12:	4a1e      	ldr	r2, [pc, #120]	; (8005e8c <_free_r+0x94>)
 8005e14:	9801      	ldr	r0, [sp, #4]
 8005e16:	6813      	ldr	r3, [r2, #0]
 8005e18:	b933      	cbnz	r3, 8005e28 <_free_r+0x30>
 8005e1a:	6063      	str	r3, [r4, #4]
 8005e1c:	6014      	str	r4, [r2, #0]
 8005e1e:	b003      	add	sp, #12
 8005e20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e24:	f000 bcae 	b.w	8006784 <__malloc_unlock>
 8005e28:	42a3      	cmp	r3, r4
 8005e2a:	d908      	bls.n	8005e3e <_free_r+0x46>
 8005e2c:	6825      	ldr	r5, [r4, #0]
 8005e2e:	1961      	adds	r1, r4, r5
 8005e30:	428b      	cmp	r3, r1
 8005e32:	bf01      	itttt	eq
 8005e34:	6819      	ldreq	r1, [r3, #0]
 8005e36:	685b      	ldreq	r3, [r3, #4]
 8005e38:	1949      	addeq	r1, r1, r5
 8005e3a:	6021      	streq	r1, [r4, #0]
 8005e3c:	e7ed      	b.n	8005e1a <_free_r+0x22>
 8005e3e:	461a      	mov	r2, r3
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	b10b      	cbz	r3, 8005e48 <_free_r+0x50>
 8005e44:	42a3      	cmp	r3, r4
 8005e46:	d9fa      	bls.n	8005e3e <_free_r+0x46>
 8005e48:	6811      	ldr	r1, [r2, #0]
 8005e4a:	1855      	adds	r5, r2, r1
 8005e4c:	42a5      	cmp	r5, r4
 8005e4e:	d10b      	bne.n	8005e68 <_free_r+0x70>
 8005e50:	6824      	ldr	r4, [r4, #0]
 8005e52:	4421      	add	r1, r4
 8005e54:	1854      	adds	r4, r2, r1
 8005e56:	42a3      	cmp	r3, r4
 8005e58:	6011      	str	r1, [r2, #0]
 8005e5a:	d1e0      	bne.n	8005e1e <_free_r+0x26>
 8005e5c:	681c      	ldr	r4, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	6053      	str	r3, [r2, #4]
 8005e62:	4421      	add	r1, r4
 8005e64:	6011      	str	r1, [r2, #0]
 8005e66:	e7da      	b.n	8005e1e <_free_r+0x26>
 8005e68:	d902      	bls.n	8005e70 <_free_r+0x78>
 8005e6a:	230c      	movs	r3, #12
 8005e6c:	6003      	str	r3, [r0, #0]
 8005e6e:	e7d6      	b.n	8005e1e <_free_r+0x26>
 8005e70:	6825      	ldr	r5, [r4, #0]
 8005e72:	1961      	adds	r1, r4, r5
 8005e74:	428b      	cmp	r3, r1
 8005e76:	bf04      	itt	eq
 8005e78:	6819      	ldreq	r1, [r3, #0]
 8005e7a:	685b      	ldreq	r3, [r3, #4]
 8005e7c:	6063      	str	r3, [r4, #4]
 8005e7e:	bf04      	itt	eq
 8005e80:	1949      	addeq	r1, r1, r5
 8005e82:	6021      	streq	r1, [r4, #0]
 8005e84:	6054      	str	r4, [r2, #4]
 8005e86:	e7ca      	b.n	8005e1e <_free_r+0x26>
 8005e88:	b003      	add	sp, #12
 8005e8a:	bd30      	pop	{r4, r5, pc}
 8005e8c:	200018ec 	.word	0x200018ec

08005e90 <sbrk_aligned>:
 8005e90:	b570      	push	{r4, r5, r6, lr}
 8005e92:	4e0e      	ldr	r6, [pc, #56]	; (8005ecc <sbrk_aligned+0x3c>)
 8005e94:	460c      	mov	r4, r1
 8005e96:	6831      	ldr	r1, [r6, #0]
 8005e98:	4605      	mov	r5, r0
 8005e9a:	b911      	cbnz	r1, 8005ea2 <sbrk_aligned+0x12>
 8005e9c:	f000 fbc2 	bl	8006624 <_sbrk_r>
 8005ea0:	6030      	str	r0, [r6, #0]
 8005ea2:	4621      	mov	r1, r4
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	f000 fbbd 	bl	8006624 <_sbrk_r>
 8005eaa:	1c43      	adds	r3, r0, #1
 8005eac:	d00a      	beq.n	8005ec4 <sbrk_aligned+0x34>
 8005eae:	1cc4      	adds	r4, r0, #3
 8005eb0:	f024 0403 	bic.w	r4, r4, #3
 8005eb4:	42a0      	cmp	r0, r4
 8005eb6:	d007      	beq.n	8005ec8 <sbrk_aligned+0x38>
 8005eb8:	1a21      	subs	r1, r4, r0
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f000 fbb2 	bl	8006624 <_sbrk_r>
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d101      	bne.n	8005ec8 <sbrk_aligned+0x38>
 8005ec4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005ec8:	4620      	mov	r0, r4
 8005eca:	bd70      	pop	{r4, r5, r6, pc}
 8005ecc:	200018f0 	.word	0x200018f0

08005ed0 <_malloc_r>:
 8005ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed4:	1ccd      	adds	r5, r1, #3
 8005ed6:	f025 0503 	bic.w	r5, r5, #3
 8005eda:	3508      	adds	r5, #8
 8005edc:	2d0c      	cmp	r5, #12
 8005ede:	bf38      	it	cc
 8005ee0:	250c      	movcc	r5, #12
 8005ee2:	2d00      	cmp	r5, #0
 8005ee4:	4607      	mov	r7, r0
 8005ee6:	db01      	blt.n	8005eec <_malloc_r+0x1c>
 8005ee8:	42a9      	cmp	r1, r5
 8005eea:	d905      	bls.n	8005ef8 <_malloc_r+0x28>
 8005eec:	230c      	movs	r3, #12
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	2600      	movs	r6, #0
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ef8:	4e2e      	ldr	r6, [pc, #184]	; (8005fb4 <_malloc_r+0xe4>)
 8005efa:	f000 fc3d 	bl	8006778 <__malloc_lock>
 8005efe:	6833      	ldr	r3, [r6, #0]
 8005f00:	461c      	mov	r4, r3
 8005f02:	bb34      	cbnz	r4, 8005f52 <_malloc_r+0x82>
 8005f04:	4629      	mov	r1, r5
 8005f06:	4638      	mov	r0, r7
 8005f08:	f7ff ffc2 	bl	8005e90 <sbrk_aligned>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	4604      	mov	r4, r0
 8005f10:	d14d      	bne.n	8005fae <_malloc_r+0xde>
 8005f12:	6834      	ldr	r4, [r6, #0]
 8005f14:	4626      	mov	r6, r4
 8005f16:	2e00      	cmp	r6, #0
 8005f18:	d140      	bne.n	8005f9c <_malloc_r+0xcc>
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	4631      	mov	r1, r6
 8005f1e:	4638      	mov	r0, r7
 8005f20:	eb04 0803 	add.w	r8, r4, r3
 8005f24:	f000 fb7e 	bl	8006624 <_sbrk_r>
 8005f28:	4580      	cmp	r8, r0
 8005f2a:	d13a      	bne.n	8005fa2 <_malloc_r+0xd2>
 8005f2c:	6821      	ldr	r1, [r4, #0]
 8005f2e:	3503      	adds	r5, #3
 8005f30:	1a6d      	subs	r5, r5, r1
 8005f32:	f025 0503 	bic.w	r5, r5, #3
 8005f36:	3508      	adds	r5, #8
 8005f38:	2d0c      	cmp	r5, #12
 8005f3a:	bf38      	it	cc
 8005f3c:	250c      	movcc	r5, #12
 8005f3e:	4629      	mov	r1, r5
 8005f40:	4638      	mov	r0, r7
 8005f42:	f7ff ffa5 	bl	8005e90 <sbrk_aligned>
 8005f46:	3001      	adds	r0, #1
 8005f48:	d02b      	beq.n	8005fa2 <_malloc_r+0xd2>
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	442b      	add	r3, r5
 8005f4e:	6023      	str	r3, [r4, #0]
 8005f50:	e00e      	b.n	8005f70 <_malloc_r+0xa0>
 8005f52:	6822      	ldr	r2, [r4, #0]
 8005f54:	1b52      	subs	r2, r2, r5
 8005f56:	d41e      	bmi.n	8005f96 <_malloc_r+0xc6>
 8005f58:	2a0b      	cmp	r2, #11
 8005f5a:	d916      	bls.n	8005f8a <_malloc_r+0xba>
 8005f5c:	1961      	adds	r1, r4, r5
 8005f5e:	42a3      	cmp	r3, r4
 8005f60:	6025      	str	r5, [r4, #0]
 8005f62:	bf18      	it	ne
 8005f64:	6059      	strne	r1, [r3, #4]
 8005f66:	6863      	ldr	r3, [r4, #4]
 8005f68:	bf08      	it	eq
 8005f6a:	6031      	streq	r1, [r6, #0]
 8005f6c:	5162      	str	r2, [r4, r5]
 8005f6e:	604b      	str	r3, [r1, #4]
 8005f70:	4638      	mov	r0, r7
 8005f72:	f104 060b 	add.w	r6, r4, #11
 8005f76:	f000 fc05 	bl	8006784 <__malloc_unlock>
 8005f7a:	f026 0607 	bic.w	r6, r6, #7
 8005f7e:	1d23      	adds	r3, r4, #4
 8005f80:	1af2      	subs	r2, r6, r3
 8005f82:	d0b6      	beq.n	8005ef2 <_malloc_r+0x22>
 8005f84:	1b9b      	subs	r3, r3, r6
 8005f86:	50a3      	str	r3, [r4, r2]
 8005f88:	e7b3      	b.n	8005ef2 <_malloc_r+0x22>
 8005f8a:	6862      	ldr	r2, [r4, #4]
 8005f8c:	42a3      	cmp	r3, r4
 8005f8e:	bf0c      	ite	eq
 8005f90:	6032      	streq	r2, [r6, #0]
 8005f92:	605a      	strne	r2, [r3, #4]
 8005f94:	e7ec      	b.n	8005f70 <_malloc_r+0xa0>
 8005f96:	4623      	mov	r3, r4
 8005f98:	6864      	ldr	r4, [r4, #4]
 8005f9a:	e7b2      	b.n	8005f02 <_malloc_r+0x32>
 8005f9c:	4634      	mov	r4, r6
 8005f9e:	6876      	ldr	r6, [r6, #4]
 8005fa0:	e7b9      	b.n	8005f16 <_malloc_r+0x46>
 8005fa2:	230c      	movs	r3, #12
 8005fa4:	603b      	str	r3, [r7, #0]
 8005fa6:	4638      	mov	r0, r7
 8005fa8:	f000 fbec 	bl	8006784 <__malloc_unlock>
 8005fac:	e7a1      	b.n	8005ef2 <_malloc_r+0x22>
 8005fae:	6025      	str	r5, [r4, #0]
 8005fb0:	e7de      	b.n	8005f70 <_malloc_r+0xa0>
 8005fb2:	bf00      	nop
 8005fb4:	200018ec 	.word	0x200018ec

08005fb8 <__sfputc_r>:
 8005fb8:	6893      	ldr	r3, [r2, #8]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	b410      	push	{r4}
 8005fc0:	6093      	str	r3, [r2, #8]
 8005fc2:	da08      	bge.n	8005fd6 <__sfputc_r+0x1e>
 8005fc4:	6994      	ldr	r4, [r2, #24]
 8005fc6:	42a3      	cmp	r3, r4
 8005fc8:	db01      	blt.n	8005fce <__sfputc_r+0x16>
 8005fca:	290a      	cmp	r1, #10
 8005fcc:	d103      	bne.n	8005fd6 <__sfputc_r+0x1e>
 8005fce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fd2:	f7ff bc29 	b.w	8005828 <__swbuf_r>
 8005fd6:	6813      	ldr	r3, [r2, #0]
 8005fd8:	1c58      	adds	r0, r3, #1
 8005fda:	6010      	str	r0, [r2, #0]
 8005fdc:	7019      	strb	r1, [r3, #0]
 8005fde:	4608      	mov	r0, r1
 8005fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <__sfputs_r>:
 8005fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe8:	4606      	mov	r6, r0
 8005fea:	460f      	mov	r7, r1
 8005fec:	4614      	mov	r4, r2
 8005fee:	18d5      	adds	r5, r2, r3
 8005ff0:	42ac      	cmp	r4, r5
 8005ff2:	d101      	bne.n	8005ff8 <__sfputs_r+0x12>
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	e007      	b.n	8006008 <__sfputs_r+0x22>
 8005ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ffc:	463a      	mov	r2, r7
 8005ffe:	4630      	mov	r0, r6
 8006000:	f7ff ffda 	bl	8005fb8 <__sfputc_r>
 8006004:	1c43      	adds	r3, r0, #1
 8006006:	d1f3      	bne.n	8005ff0 <__sfputs_r+0xa>
 8006008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800600c <_vfiprintf_r>:
 800600c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006010:	460d      	mov	r5, r1
 8006012:	b09d      	sub	sp, #116	; 0x74
 8006014:	4614      	mov	r4, r2
 8006016:	4698      	mov	r8, r3
 8006018:	4606      	mov	r6, r0
 800601a:	b118      	cbz	r0, 8006024 <_vfiprintf_r+0x18>
 800601c:	6983      	ldr	r3, [r0, #24]
 800601e:	b90b      	cbnz	r3, 8006024 <_vfiprintf_r+0x18>
 8006020:	f7ff fddc 	bl	8005bdc <__sinit>
 8006024:	4b89      	ldr	r3, [pc, #548]	; (800624c <_vfiprintf_r+0x240>)
 8006026:	429d      	cmp	r5, r3
 8006028:	d11b      	bne.n	8006062 <_vfiprintf_r+0x56>
 800602a:	6875      	ldr	r5, [r6, #4]
 800602c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800602e:	07d9      	lsls	r1, r3, #31
 8006030:	d405      	bmi.n	800603e <_vfiprintf_r+0x32>
 8006032:	89ab      	ldrh	r3, [r5, #12]
 8006034:	059a      	lsls	r2, r3, #22
 8006036:	d402      	bmi.n	800603e <_vfiprintf_r+0x32>
 8006038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800603a:	f7ff fe6d 	bl	8005d18 <__retarget_lock_acquire_recursive>
 800603e:	89ab      	ldrh	r3, [r5, #12]
 8006040:	071b      	lsls	r3, r3, #28
 8006042:	d501      	bpl.n	8006048 <_vfiprintf_r+0x3c>
 8006044:	692b      	ldr	r3, [r5, #16]
 8006046:	b9eb      	cbnz	r3, 8006084 <_vfiprintf_r+0x78>
 8006048:	4629      	mov	r1, r5
 800604a:	4630      	mov	r0, r6
 800604c:	f7ff fc3e 	bl	80058cc <__swsetup_r>
 8006050:	b1c0      	cbz	r0, 8006084 <_vfiprintf_r+0x78>
 8006052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006054:	07dc      	lsls	r4, r3, #31
 8006056:	d50e      	bpl.n	8006076 <_vfiprintf_r+0x6a>
 8006058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800605c:	b01d      	add	sp, #116	; 0x74
 800605e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006062:	4b7b      	ldr	r3, [pc, #492]	; (8006250 <_vfiprintf_r+0x244>)
 8006064:	429d      	cmp	r5, r3
 8006066:	d101      	bne.n	800606c <_vfiprintf_r+0x60>
 8006068:	68b5      	ldr	r5, [r6, #8]
 800606a:	e7df      	b.n	800602c <_vfiprintf_r+0x20>
 800606c:	4b79      	ldr	r3, [pc, #484]	; (8006254 <_vfiprintf_r+0x248>)
 800606e:	429d      	cmp	r5, r3
 8006070:	bf08      	it	eq
 8006072:	68f5      	ldreq	r5, [r6, #12]
 8006074:	e7da      	b.n	800602c <_vfiprintf_r+0x20>
 8006076:	89ab      	ldrh	r3, [r5, #12]
 8006078:	0598      	lsls	r0, r3, #22
 800607a:	d4ed      	bmi.n	8006058 <_vfiprintf_r+0x4c>
 800607c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800607e:	f7ff fe4c 	bl	8005d1a <__retarget_lock_release_recursive>
 8006082:	e7e9      	b.n	8006058 <_vfiprintf_r+0x4c>
 8006084:	2300      	movs	r3, #0
 8006086:	9309      	str	r3, [sp, #36]	; 0x24
 8006088:	2320      	movs	r3, #32
 800608a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800608e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006092:	2330      	movs	r3, #48	; 0x30
 8006094:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006258 <_vfiprintf_r+0x24c>
 8006098:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800609c:	f04f 0901 	mov.w	r9, #1
 80060a0:	4623      	mov	r3, r4
 80060a2:	469a      	mov	sl, r3
 80060a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060a8:	b10a      	cbz	r2, 80060ae <_vfiprintf_r+0xa2>
 80060aa:	2a25      	cmp	r2, #37	; 0x25
 80060ac:	d1f9      	bne.n	80060a2 <_vfiprintf_r+0x96>
 80060ae:	ebba 0b04 	subs.w	fp, sl, r4
 80060b2:	d00b      	beq.n	80060cc <_vfiprintf_r+0xc0>
 80060b4:	465b      	mov	r3, fp
 80060b6:	4622      	mov	r2, r4
 80060b8:	4629      	mov	r1, r5
 80060ba:	4630      	mov	r0, r6
 80060bc:	f7ff ff93 	bl	8005fe6 <__sfputs_r>
 80060c0:	3001      	adds	r0, #1
 80060c2:	f000 80aa 	beq.w	800621a <_vfiprintf_r+0x20e>
 80060c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060c8:	445a      	add	r2, fp
 80060ca:	9209      	str	r2, [sp, #36]	; 0x24
 80060cc:	f89a 3000 	ldrb.w	r3, [sl]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 80a2 	beq.w	800621a <_vfiprintf_r+0x20e>
 80060d6:	2300      	movs	r3, #0
 80060d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060e0:	f10a 0a01 	add.w	sl, sl, #1
 80060e4:	9304      	str	r3, [sp, #16]
 80060e6:	9307      	str	r3, [sp, #28]
 80060e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060ec:	931a      	str	r3, [sp, #104]	; 0x68
 80060ee:	4654      	mov	r4, sl
 80060f0:	2205      	movs	r2, #5
 80060f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060f6:	4858      	ldr	r0, [pc, #352]	; (8006258 <_vfiprintf_r+0x24c>)
 80060f8:	f7fa f8a2 	bl	8000240 <memchr>
 80060fc:	9a04      	ldr	r2, [sp, #16]
 80060fe:	b9d8      	cbnz	r0, 8006138 <_vfiprintf_r+0x12c>
 8006100:	06d1      	lsls	r1, r2, #27
 8006102:	bf44      	itt	mi
 8006104:	2320      	movmi	r3, #32
 8006106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800610a:	0713      	lsls	r3, r2, #28
 800610c:	bf44      	itt	mi
 800610e:	232b      	movmi	r3, #43	; 0x2b
 8006110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006114:	f89a 3000 	ldrb.w	r3, [sl]
 8006118:	2b2a      	cmp	r3, #42	; 0x2a
 800611a:	d015      	beq.n	8006148 <_vfiprintf_r+0x13c>
 800611c:	9a07      	ldr	r2, [sp, #28]
 800611e:	4654      	mov	r4, sl
 8006120:	2000      	movs	r0, #0
 8006122:	f04f 0c0a 	mov.w	ip, #10
 8006126:	4621      	mov	r1, r4
 8006128:	f811 3b01 	ldrb.w	r3, [r1], #1
 800612c:	3b30      	subs	r3, #48	; 0x30
 800612e:	2b09      	cmp	r3, #9
 8006130:	d94e      	bls.n	80061d0 <_vfiprintf_r+0x1c4>
 8006132:	b1b0      	cbz	r0, 8006162 <_vfiprintf_r+0x156>
 8006134:	9207      	str	r2, [sp, #28]
 8006136:	e014      	b.n	8006162 <_vfiprintf_r+0x156>
 8006138:	eba0 0308 	sub.w	r3, r0, r8
 800613c:	fa09 f303 	lsl.w	r3, r9, r3
 8006140:	4313      	orrs	r3, r2
 8006142:	9304      	str	r3, [sp, #16]
 8006144:	46a2      	mov	sl, r4
 8006146:	e7d2      	b.n	80060ee <_vfiprintf_r+0xe2>
 8006148:	9b03      	ldr	r3, [sp, #12]
 800614a:	1d19      	adds	r1, r3, #4
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	9103      	str	r1, [sp, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	bfbb      	ittet	lt
 8006154:	425b      	neglt	r3, r3
 8006156:	f042 0202 	orrlt.w	r2, r2, #2
 800615a:	9307      	strge	r3, [sp, #28]
 800615c:	9307      	strlt	r3, [sp, #28]
 800615e:	bfb8      	it	lt
 8006160:	9204      	strlt	r2, [sp, #16]
 8006162:	7823      	ldrb	r3, [r4, #0]
 8006164:	2b2e      	cmp	r3, #46	; 0x2e
 8006166:	d10c      	bne.n	8006182 <_vfiprintf_r+0x176>
 8006168:	7863      	ldrb	r3, [r4, #1]
 800616a:	2b2a      	cmp	r3, #42	; 0x2a
 800616c:	d135      	bne.n	80061da <_vfiprintf_r+0x1ce>
 800616e:	9b03      	ldr	r3, [sp, #12]
 8006170:	1d1a      	adds	r2, r3, #4
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	9203      	str	r2, [sp, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	bfb8      	it	lt
 800617a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800617e:	3402      	adds	r4, #2
 8006180:	9305      	str	r3, [sp, #20]
 8006182:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006268 <_vfiprintf_r+0x25c>
 8006186:	7821      	ldrb	r1, [r4, #0]
 8006188:	2203      	movs	r2, #3
 800618a:	4650      	mov	r0, sl
 800618c:	f7fa f858 	bl	8000240 <memchr>
 8006190:	b140      	cbz	r0, 80061a4 <_vfiprintf_r+0x198>
 8006192:	2340      	movs	r3, #64	; 0x40
 8006194:	eba0 000a 	sub.w	r0, r0, sl
 8006198:	fa03 f000 	lsl.w	r0, r3, r0
 800619c:	9b04      	ldr	r3, [sp, #16]
 800619e:	4303      	orrs	r3, r0
 80061a0:	3401      	adds	r4, #1
 80061a2:	9304      	str	r3, [sp, #16]
 80061a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061a8:	482c      	ldr	r0, [pc, #176]	; (800625c <_vfiprintf_r+0x250>)
 80061aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061ae:	2206      	movs	r2, #6
 80061b0:	f7fa f846 	bl	8000240 <memchr>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d03f      	beq.n	8006238 <_vfiprintf_r+0x22c>
 80061b8:	4b29      	ldr	r3, [pc, #164]	; (8006260 <_vfiprintf_r+0x254>)
 80061ba:	bb1b      	cbnz	r3, 8006204 <_vfiprintf_r+0x1f8>
 80061bc:	9b03      	ldr	r3, [sp, #12]
 80061be:	3307      	adds	r3, #7
 80061c0:	f023 0307 	bic.w	r3, r3, #7
 80061c4:	3308      	adds	r3, #8
 80061c6:	9303      	str	r3, [sp, #12]
 80061c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ca:	443b      	add	r3, r7
 80061cc:	9309      	str	r3, [sp, #36]	; 0x24
 80061ce:	e767      	b.n	80060a0 <_vfiprintf_r+0x94>
 80061d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80061d4:	460c      	mov	r4, r1
 80061d6:	2001      	movs	r0, #1
 80061d8:	e7a5      	b.n	8006126 <_vfiprintf_r+0x11a>
 80061da:	2300      	movs	r3, #0
 80061dc:	3401      	adds	r4, #1
 80061de:	9305      	str	r3, [sp, #20]
 80061e0:	4619      	mov	r1, r3
 80061e2:	f04f 0c0a 	mov.w	ip, #10
 80061e6:	4620      	mov	r0, r4
 80061e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061ec:	3a30      	subs	r2, #48	; 0x30
 80061ee:	2a09      	cmp	r2, #9
 80061f0:	d903      	bls.n	80061fa <_vfiprintf_r+0x1ee>
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d0c5      	beq.n	8006182 <_vfiprintf_r+0x176>
 80061f6:	9105      	str	r1, [sp, #20]
 80061f8:	e7c3      	b.n	8006182 <_vfiprintf_r+0x176>
 80061fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80061fe:	4604      	mov	r4, r0
 8006200:	2301      	movs	r3, #1
 8006202:	e7f0      	b.n	80061e6 <_vfiprintf_r+0x1da>
 8006204:	ab03      	add	r3, sp, #12
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	462a      	mov	r2, r5
 800620a:	4b16      	ldr	r3, [pc, #88]	; (8006264 <_vfiprintf_r+0x258>)
 800620c:	a904      	add	r1, sp, #16
 800620e:	4630      	mov	r0, r6
 8006210:	f3af 8000 	nop.w
 8006214:	4607      	mov	r7, r0
 8006216:	1c78      	adds	r0, r7, #1
 8006218:	d1d6      	bne.n	80061c8 <_vfiprintf_r+0x1bc>
 800621a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800621c:	07d9      	lsls	r1, r3, #31
 800621e:	d405      	bmi.n	800622c <_vfiprintf_r+0x220>
 8006220:	89ab      	ldrh	r3, [r5, #12]
 8006222:	059a      	lsls	r2, r3, #22
 8006224:	d402      	bmi.n	800622c <_vfiprintf_r+0x220>
 8006226:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006228:	f7ff fd77 	bl	8005d1a <__retarget_lock_release_recursive>
 800622c:	89ab      	ldrh	r3, [r5, #12]
 800622e:	065b      	lsls	r3, r3, #25
 8006230:	f53f af12 	bmi.w	8006058 <_vfiprintf_r+0x4c>
 8006234:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006236:	e711      	b.n	800605c <_vfiprintf_r+0x50>
 8006238:	ab03      	add	r3, sp, #12
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	462a      	mov	r2, r5
 800623e:	4b09      	ldr	r3, [pc, #36]	; (8006264 <_vfiprintf_r+0x258>)
 8006240:	a904      	add	r1, sp, #16
 8006242:	4630      	mov	r0, r6
 8006244:	f000 f880 	bl	8006348 <_printf_i>
 8006248:	e7e4      	b.n	8006214 <_vfiprintf_r+0x208>
 800624a:	bf00      	nop
 800624c:	0800696c 	.word	0x0800696c
 8006250:	0800698c 	.word	0x0800698c
 8006254:	0800694c 	.word	0x0800694c
 8006258:	080069ac 	.word	0x080069ac
 800625c:	080069b6 	.word	0x080069b6
 8006260:	00000000 	.word	0x00000000
 8006264:	08005fe7 	.word	0x08005fe7
 8006268:	080069b2 	.word	0x080069b2

0800626c <_printf_common>:
 800626c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006270:	4616      	mov	r6, r2
 8006272:	4699      	mov	r9, r3
 8006274:	688a      	ldr	r2, [r1, #8]
 8006276:	690b      	ldr	r3, [r1, #16]
 8006278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800627c:	4293      	cmp	r3, r2
 800627e:	bfb8      	it	lt
 8006280:	4613      	movlt	r3, r2
 8006282:	6033      	str	r3, [r6, #0]
 8006284:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006288:	4607      	mov	r7, r0
 800628a:	460c      	mov	r4, r1
 800628c:	b10a      	cbz	r2, 8006292 <_printf_common+0x26>
 800628e:	3301      	adds	r3, #1
 8006290:	6033      	str	r3, [r6, #0]
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	0699      	lsls	r1, r3, #26
 8006296:	bf42      	ittt	mi
 8006298:	6833      	ldrmi	r3, [r6, #0]
 800629a:	3302      	addmi	r3, #2
 800629c:	6033      	strmi	r3, [r6, #0]
 800629e:	6825      	ldr	r5, [r4, #0]
 80062a0:	f015 0506 	ands.w	r5, r5, #6
 80062a4:	d106      	bne.n	80062b4 <_printf_common+0x48>
 80062a6:	f104 0a19 	add.w	sl, r4, #25
 80062aa:	68e3      	ldr	r3, [r4, #12]
 80062ac:	6832      	ldr	r2, [r6, #0]
 80062ae:	1a9b      	subs	r3, r3, r2
 80062b0:	42ab      	cmp	r3, r5
 80062b2:	dc26      	bgt.n	8006302 <_printf_common+0x96>
 80062b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062b8:	1e13      	subs	r3, r2, #0
 80062ba:	6822      	ldr	r2, [r4, #0]
 80062bc:	bf18      	it	ne
 80062be:	2301      	movne	r3, #1
 80062c0:	0692      	lsls	r2, r2, #26
 80062c2:	d42b      	bmi.n	800631c <_printf_common+0xb0>
 80062c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062c8:	4649      	mov	r1, r9
 80062ca:	4638      	mov	r0, r7
 80062cc:	47c0      	blx	r8
 80062ce:	3001      	adds	r0, #1
 80062d0:	d01e      	beq.n	8006310 <_printf_common+0xa4>
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	68e5      	ldr	r5, [r4, #12]
 80062d6:	6832      	ldr	r2, [r6, #0]
 80062d8:	f003 0306 	and.w	r3, r3, #6
 80062dc:	2b04      	cmp	r3, #4
 80062de:	bf08      	it	eq
 80062e0:	1aad      	subeq	r5, r5, r2
 80062e2:	68a3      	ldr	r3, [r4, #8]
 80062e4:	6922      	ldr	r2, [r4, #16]
 80062e6:	bf0c      	ite	eq
 80062e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062ec:	2500      	movne	r5, #0
 80062ee:	4293      	cmp	r3, r2
 80062f0:	bfc4      	itt	gt
 80062f2:	1a9b      	subgt	r3, r3, r2
 80062f4:	18ed      	addgt	r5, r5, r3
 80062f6:	2600      	movs	r6, #0
 80062f8:	341a      	adds	r4, #26
 80062fa:	42b5      	cmp	r5, r6
 80062fc:	d11a      	bne.n	8006334 <_printf_common+0xc8>
 80062fe:	2000      	movs	r0, #0
 8006300:	e008      	b.n	8006314 <_printf_common+0xa8>
 8006302:	2301      	movs	r3, #1
 8006304:	4652      	mov	r2, sl
 8006306:	4649      	mov	r1, r9
 8006308:	4638      	mov	r0, r7
 800630a:	47c0      	blx	r8
 800630c:	3001      	adds	r0, #1
 800630e:	d103      	bne.n	8006318 <_printf_common+0xac>
 8006310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006318:	3501      	adds	r5, #1
 800631a:	e7c6      	b.n	80062aa <_printf_common+0x3e>
 800631c:	18e1      	adds	r1, r4, r3
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	2030      	movs	r0, #48	; 0x30
 8006322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006326:	4422      	add	r2, r4
 8006328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800632c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006330:	3302      	adds	r3, #2
 8006332:	e7c7      	b.n	80062c4 <_printf_common+0x58>
 8006334:	2301      	movs	r3, #1
 8006336:	4622      	mov	r2, r4
 8006338:	4649      	mov	r1, r9
 800633a:	4638      	mov	r0, r7
 800633c:	47c0      	blx	r8
 800633e:	3001      	adds	r0, #1
 8006340:	d0e6      	beq.n	8006310 <_printf_common+0xa4>
 8006342:	3601      	adds	r6, #1
 8006344:	e7d9      	b.n	80062fa <_printf_common+0x8e>
	...

08006348 <_printf_i>:
 8006348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800634c:	7e0f      	ldrb	r7, [r1, #24]
 800634e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006350:	2f78      	cmp	r7, #120	; 0x78
 8006352:	4691      	mov	r9, r2
 8006354:	4680      	mov	r8, r0
 8006356:	460c      	mov	r4, r1
 8006358:	469a      	mov	sl, r3
 800635a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800635e:	d807      	bhi.n	8006370 <_printf_i+0x28>
 8006360:	2f62      	cmp	r7, #98	; 0x62
 8006362:	d80a      	bhi.n	800637a <_printf_i+0x32>
 8006364:	2f00      	cmp	r7, #0
 8006366:	f000 80d8 	beq.w	800651a <_printf_i+0x1d2>
 800636a:	2f58      	cmp	r7, #88	; 0x58
 800636c:	f000 80a3 	beq.w	80064b6 <_printf_i+0x16e>
 8006370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006378:	e03a      	b.n	80063f0 <_printf_i+0xa8>
 800637a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800637e:	2b15      	cmp	r3, #21
 8006380:	d8f6      	bhi.n	8006370 <_printf_i+0x28>
 8006382:	a101      	add	r1, pc, #4	; (adr r1, 8006388 <_printf_i+0x40>)
 8006384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006388:	080063e1 	.word	0x080063e1
 800638c:	080063f5 	.word	0x080063f5
 8006390:	08006371 	.word	0x08006371
 8006394:	08006371 	.word	0x08006371
 8006398:	08006371 	.word	0x08006371
 800639c:	08006371 	.word	0x08006371
 80063a0:	080063f5 	.word	0x080063f5
 80063a4:	08006371 	.word	0x08006371
 80063a8:	08006371 	.word	0x08006371
 80063ac:	08006371 	.word	0x08006371
 80063b0:	08006371 	.word	0x08006371
 80063b4:	08006501 	.word	0x08006501
 80063b8:	08006425 	.word	0x08006425
 80063bc:	080064e3 	.word	0x080064e3
 80063c0:	08006371 	.word	0x08006371
 80063c4:	08006371 	.word	0x08006371
 80063c8:	08006523 	.word	0x08006523
 80063cc:	08006371 	.word	0x08006371
 80063d0:	08006425 	.word	0x08006425
 80063d4:	08006371 	.word	0x08006371
 80063d8:	08006371 	.word	0x08006371
 80063dc:	080064eb 	.word	0x080064eb
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	1d1a      	adds	r2, r3, #4
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	602a      	str	r2, [r5, #0]
 80063e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063f0:	2301      	movs	r3, #1
 80063f2:	e0a3      	b.n	800653c <_printf_i+0x1f4>
 80063f4:	6820      	ldr	r0, [r4, #0]
 80063f6:	6829      	ldr	r1, [r5, #0]
 80063f8:	0606      	lsls	r6, r0, #24
 80063fa:	f101 0304 	add.w	r3, r1, #4
 80063fe:	d50a      	bpl.n	8006416 <_printf_i+0xce>
 8006400:	680e      	ldr	r6, [r1, #0]
 8006402:	602b      	str	r3, [r5, #0]
 8006404:	2e00      	cmp	r6, #0
 8006406:	da03      	bge.n	8006410 <_printf_i+0xc8>
 8006408:	232d      	movs	r3, #45	; 0x2d
 800640a:	4276      	negs	r6, r6
 800640c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006410:	485e      	ldr	r0, [pc, #376]	; (800658c <_printf_i+0x244>)
 8006412:	230a      	movs	r3, #10
 8006414:	e019      	b.n	800644a <_printf_i+0x102>
 8006416:	680e      	ldr	r6, [r1, #0]
 8006418:	602b      	str	r3, [r5, #0]
 800641a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800641e:	bf18      	it	ne
 8006420:	b236      	sxthne	r6, r6
 8006422:	e7ef      	b.n	8006404 <_printf_i+0xbc>
 8006424:	682b      	ldr	r3, [r5, #0]
 8006426:	6820      	ldr	r0, [r4, #0]
 8006428:	1d19      	adds	r1, r3, #4
 800642a:	6029      	str	r1, [r5, #0]
 800642c:	0601      	lsls	r1, r0, #24
 800642e:	d501      	bpl.n	8006434 <_printf_i+0xec>
 8006430:	681e      	ldr	r6, [r3, #0]
 8006432:	e002      	b.n	800643a <_printf_i+0xf2>
 8006434:	0646      	lsls	r6, r0, #25
 8006436:	d5fb      	bpl.n	8006430 <_printf_i+0xe8>
 8006438:	881e      	ldrh	r6, [r3, #0]
 800643a:	4854      	ldr	r0, [pc, #336]	; (800658c <_printf_i+0x244>)
 800643c:	2f6f      	cmp	r7, #111	; 0x6f
 800643e:	bf0c      	ite	eq
 8006440:	2308      	moveq	r3, #8
 8006442:	230a      	movne	r3, #10
 8006444:	2100      	movs	r1, #0
 8006446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800644a:	6865      	ldr	r5, [r4, #4]
 800644c:	60a5      	str	r5, [r4, #8]
 800644e:	2d00      	cmp	r5, #0
 8006450:	bfa2      	ittt	ge
 8006452:	6821      	ldrge	r1, [r4, #0]
 8006454:	f021 0104 	bicge.w	r1, r1, #4
 8006458:	6021      	strge	r1, [r4, #0]
 800645a:	b90e      	cbnz	r6, 8006460 <_printf_i+0x118>
 800645c:	2d00      	cmp	r5, #0
 800645e:	d04d      	beq.n	80064fc <_printf_i+0x1b4>
 8006460:	4615      	mov	r5, r2
 8006462:	fbb6 f1f3 	udiv	r1, r6, r3
 8006466:	fb03 6711 	mls	r7, r3, r1, r6
 800646a:	5dc7      	ldrb	r7, [r0, r7]
 800646c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006470:	4637      	mov	r7, r6
 8006472:	42bb      	cmp	r3, r7
 8006474:	460e      	mov	r6, r1
 8006476:	d9f4      	bls.n	8006462 <_printf_i+0x11a>
 8006478:	2b08      	cmp	r3, #8
 800647a:	d10b      	bne.n	8006494 <_printf_i+0x14c>
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	07de      	lsls	r6, r3, #31
 8006480:	d508      	bpl.n	8006494 <_printf_i+0x14c>
 8006482:	6923      	ldr	r3, [r4, #16]
 8006484:	6861      	ldr	r1, [r4, #4]
 8006486:	4299      	cmp	r1, r3
 8006488:	bfde      	ittt	le
 800648a:	2330      	movle	r3, #48	; 0x30
 800648c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006490:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006494:	1b52      	subs	r2, r2, r5
 8006496:	6122      	str	r2, [r4, #16]
 8006498:	f8cd a000 	str.w	sl, [sp]
 800649c:	464b      	mov	r3, r9
 800649e:	aa03      	add	r2, sp, #12
 80064a0:	4621      	mov	r1, r4
 80064a2:	4640      	mov	r0, r8
 80064a4:	f7ff fee2 	bl	800626c <_printf_common>
 80064a8:	3001      	adds	r0, #1
 80064aa:	d14c      	bne.n	8006546 <_printf_i+0x1fe>
 80064ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064b0:	b004      	add	sp, #16
 80064b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b6:	4835      	ldr	r0, [pc, #212]	; (800658c <_printf_i+0x244>)
 80064b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064bc:	6829      	ldr	r1, [r5, #0]
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80064c4:	6029      	str	r1, [r5, #0]
 80064c6:	061d      	lsls	r5, r3, #24
 80064c8:	d514      	bpl.n	80064f4 <_printf_i+0x1ac>
 80064ca:	07df      	lsls	r7, r3, #31
 80064cc:	bf44      	itt	mi
 80064ce:	f043 0320 	orrmi.w	r3, r3, #32
 80064d2:	6023      	strmi	r3, [r4, #0]
 80064d4:	b91e      	cbnz	r6, 80064de <_printf_i+0x196>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	f023 0320 	bic.w	r3, r3, #32
 80064dc:	6023      	str	r3, [r4, #0]
 80064de:	2310      	movs	r3, #16
 80064e0:	e7b0      	b.n	8006444 <_printf_i+0xfc>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	f043 0320 	orr.w	r3, r3, #32
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	2378      	movs	r3, #120	; 0x78
 80064ec:	4828      	ldr	r0, [pc, #160]	; (8006590 <_printf_i+0x248>)
 80064ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064f2:	e7e3      	b.n	80064bc <_printf_i+0x174>
 80064f4:	0659      	lsls	r1, r3, #25
 80064f6:	bf48      	it	mi
 80064f8:	b2b6      	uxthmi	r6, r6
 80064fa:	e7e6      	b.n	80064ca <_printf_i+0x182>
 80064fc:	4615      	mov	r5, r2
 80064fe:	e7bb      	b.n	8006478 <_printf_i+0x130>
 8006500:	682b      	ldr	r3, [r5, #0]
 8006502:	6826      	ldr	r6, [r4, #0]
 8006504:	6961      	ldr	r1, [r4, #20]
 8006506:	1d18      	adds	r0, r3, #4
 8006508:	6028      	str	r0, [r5, #0]
 800650a:	0635      	lsls	r5, r6, #24
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	d501      	bpl.n	8006514 <_printf_i+0x1cc>
 8006510:	6019      	str	r1, [r3, #0]
 8006512:	e002      	b.n	800651a <_printf_i+0x1d2>
 8006514:	0670      	lsls	r0, r6, #25
 8006516:	d5fb      	bpl.n	8006510 <_printf_i+0x1c8>
 8006518:	8019      	strh	r1, [r3, #0]
 800651a:	2300      	movs	r3, #0
 800651c:	6123      	str	r3, [r4, #16]
 800651e:	4615      	mov	r5, r2
 8006520:	e7ba      	b.n	8006498 <_printf_i+0x150>
 8006522:	682b      	ldr	r3, [r5, #0]
 8006524:	1d1a      	adds	r2, r3, #4
 8006526:	602a      	str	r2, [r5, #0]
 8006528:	681d      	ldr	r5, [r3, #0]
 800652a:	6862      	ldr	r2, [r4, #4]
 800652c:	2100      	movs	r1, #0
 800652e:	4628      	mov	r0, r5
 8006530:	f7f9 fe86 	bl	8000240 <memchr>
 8006534:	b108      	cbz	r0, 800653a <_printf_i+0x1f2>
 8006536:	1b40      	subs	r0, r0, r5
 8006538:	6060      	str	r0, [r4, #4]
 800653a:	6863      	ldr	r3, [r4, #4]
 800653c:	6123      	str	r3, [r4, #16]
 800653e:	2300      	movs	r3, #0
 8006540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006544:	e7a8      	b.n	8006498 <_printf_i+0x150>
 8006546:	6923      	ldr	r3, [r4, #16]
 8006548:	462a      	mov	r2, r5
 800654a:	4649      	mov	r1, r9
 800654c:	4640      	mov	r0, r8
 800654e:	47d0      	blx	sl
 8006550:	3001      	adds	r0, #1
 8006552:	d0ab      	beq.n	80064ac <_printf_i+0x164>
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	079b      	lsls	r3, r3, #30
 8006558:	d413      	bmi.n	8006582 <_printf_i+0x23a>
 800655a:	68e0      	ldr	r0, [r4, #12]
 800655c:	9b03      	ldr	r3, [sp, #12]
 800655e:	4298      	cmp	r0, r3
 8006560:	bfb8      	it	lt
 8006562:	4618      	movlt	r0, r3
 8006564:	e7a4      	b.n	80064b0 <_printf_i+0x168>
 8006566:	2301      	movs	r3, #1
 8006568:	4632      	mov	r2, r6
 800656a:	4649      	mov	r1, r9
 800656c:	4640      	mov	r0, r8
 800656e:	47d0      	blx	sl
 8006570:	3001      	adds	r0, #1
 8006572:	d09b      	beq.n	80064ac <_printf_i+0x164>
 8006574:	3501      	adds	r5, #1
 8006576:	68e3      	ldr	r3, [r4, #12]
 8006578:	9903      	ldr	r1, [sp, #12]
 800657a:	1a5b      	subs	r3, r3, r1
 800657c:	42ab      	cmp	r3, r5
 800657e:	dcf2      	bgt.n	8006566 <_printf_i+0x21e>
 8006580:	e7eb      	b.n	800655a <_printf_i+0x212>
 8006582:	2500      	movs	r5, #0
 8006584:	f104 0619 	add.w	r6, r4, #25
 8006588:	e7f5      	b.n	8006576 <_printf_i+0x22e>
 800658a:	bf00      	nop
 800658c:	080069bd 	.word	0x080069bd
 8006590:	080069ce 	.word	0x080069ce

08006594 <_putc_r>:
 8006594:	b570      	push	{r4, r5, r6, lr}
 8006596:	460d      	mov	r5, r1
 8006598:	4614      	mov	r4, r2
 800659a:	4606      	mov	r6, r0
 800659c:	b118      	cbz	r0, 80065a6 <_putc_r+0x12>
 800659e:	6983      	ldr	r3, [r0, #24]
 80065a0:	b90b      	cbnz	r3, 80065a6 <_putc_r+0x12>
 80065a2:	f7ff fb1b 	bl	8005bdc <__sinit>
 80065a6:	4b1c      	ldr	r3, [pc, #112]	; (8006618 <_putc_r+0x84>)
 80065a8:	429c      	cmp	r4, r3
 80065aa:	d124      	bne.n	80065f6 <_putc_r+0x62>
 80065ac:	6874      	ldr	r4, [r6, #4]
 80065ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065b0:	07d8      	lsls	r0, r3, #31
 80065b2:	d405      	bmi.n	80065c0 <_putc_r+0x2c>
 80065b4:	89a3      	ldrh	r3, [r4, #12]
 80065b6:	0599      	lsls	r1, r3, #22
 80065b8:	d402      	bmi.n	80065c0 <_putc_r+0x2c>
 80065ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065bc:	f7ff fbac 	bl	8005d18 <__retarget_lock_acquire_recursive>
 80065c0:	68a3      	ldr	r3, [r4, #8]
 80065c2:	3b01      	subs	r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	60a3      	str	r3, [r4, #8]
 80065c8:	da05      	bge.n	80065d6 <_putc_r+0x42>
 80065ca:	69a2      	ldr	r2, [r4, #24]
 80065cc:	4293      	cmp	r3, r2
 80065ce:	db1c      	blt.n	800660a <_putc_r+0x76>
 80065d0:	b2eb      	uxtb	r3, r5
 80065d2:	2b0a      	cmp	r3, #10
 80065d4:	d019      	beq.n	800660a <_putc_r+0x76>
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	6022      	str	r2, [r4, #0]
 80065dc:	701d      	strb	r5, [r3, #0]
 80065de:	b2ed      	uxtb	r5, r5
 80065e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065e2:	07da      	lsls	r2, r3, #31
 80065e4:	d405      	bmi.n	80065f2 <_putc_r+0x5e>
 80065e6:	89a3      	ldrh	r3, [r4, #12]
 80065e8:	059b      	lsls	r3, r3, #22
 80065ea:	d402      	bmi.n	80065f2 <_putc_r+0x5e>
 80065ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ee:	f7ff fb94 	bl	8005d1a <__retarget_lock_release_recursive>
 80065f2:	4628      	mov	r0, r5
 80065f4:	bd70      	pop	{r4, r5, r6, pc}
 80065f6:	4b09      	ldr	r3, [pc, #36]	; (800661c <_putc_r+0x88>)
 80065f8:	429c      	cmp	r4, r3
 80065fa:	d101      	bne.n	8006600 <_putc_r+0x6c>
 80065fc:	68b4      	ldr	r4, [r6, #8]
 80065fe:	e7d6      	b.n	80065ae <_putc_r+0x1a>
 8006600:	4b07      	ldr	r3, [pc, #28]	; (8006620 <_putc_r+0x8c>)
 8006602:	429c      	cmp	r4, r3
 8006604:	bf08      	it	eq
 8006606:	68f4      	ldreq	r4, [r6, #12]
 8006608:	e7d1      	b.n	80065ae <_putc_r+0x1a>
 800660a:	4629      	mov	r1, r5
 800660c:	4622      	mov	r2, r4
 800660e:	4630      	mov	r0, r6
 8006610:	f7ff f90a 	bl	8005828 <__swbuf_r>
 8006614:	4605      	mov	r5, r0
 8006616:	e7e3      	b.n	80065e0 <_putc_r+0x4c>
 8006618:	0800696c 	.word	0x0800696c
 800661c:	0800698c 	.word	0x0800698c
 8006620:	0800694c 	.word	0x0800694c

08006624 <_sbrk_r>:
 8006624:	b538      	push	{r3, r4, r5, lr}
 8006626:	4d06      	ldr	r5, [pc, #24]	; (8006640 <_sbrk_r+0x1c>)
 8006628:	2300      	movs	r3, #0
 800662a:	4604      	mov	r4, r0
 800662c:	4608      	mov	r0, r1
 800662e:	602b      	str	r3, [r5, #0]
 8006630:	f7fa fc3e 	bl	8000eb0 <_sbrk>
 8006634:	1c43      	adds	r3, r0, #1
 8006636:	d102      	bne.n	800663e <_sbrk_r+0x1a>
 8006638:	682b      	ldr	r3, [r5, #0]
 800663a:	b103      	cbz	r3, 800663e <_sbrk_r+0x1a>
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	bd38      	pop	{r3, r4, r5, pc}
 8006640:	200018f4 	.word	0x200018f4

08006644 <__sread>:
 8006644:	b510      	push	{r4, lr}
 8006646:	460c      	mov	r4, r1
 8006648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800664c:	f000 f8a0 	bl	8006790 <_read_r>
 8006650:	2800      	cmp	r0, #0
 8006652:	bfab      	itete	ge
 8006654:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006656:	89a3      	ldrhlt	r3, [r4, #12]
 8006658:	181b      	addge	r3, r3, r0
 800665a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800665e:	bfac      	ite	ge
 8006660:	6563      	strge	r3, [r4, #84]	; 0x54
 8006662:	81a3      	strhlt	r3, [r4, #12]
 8006664:	bd10      	pop	{r4, pc}

08006666 <__swrite>:
 8006666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800666a:	461f      	mov	r7, r3
 800666c:	898b      	ldrh	r3, [r1, #12]
 800666e:	05db      	lsls	r3, r3, #23
 8006670:	4605      	mov	r5, r0
 8006672:	460c      	mov	r4, r1
 8006674:	4616      	mov	r6, r2
 8006676:	d505      	bpl.n	8006684 <__swrite+0x1e>
 8006678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800667c:	2302      	movs	r3, #2
 800667e:	2200      	movs	r2, #0
 8006680:	f000 f868 	bl	8006754 <_lseek_r>
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800668a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800668e:	81a3      	strh	r3, [r4, #12]
 8006690:	4632      	mov	r2, r6
 8006692:	463b      	mov	r3, r7
 8006694:	4628      	mov	r0, r5
 8006696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800669a:	f000 b817 	b.w	80066cc <_write_r>

0800669e <__sseek>:
 800669e:	b510      	push	{r4, lr}
 80066a0:	460c      	mov	r4, r1
 80066a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a6:	f000 f855 	bl	8006754 <_lseek_r>
 80066aa:	1c43      	adds	r3, r0, #1
 80066ac:	89a3      	ldrh	r3, [r4, #12]
 80066ae:	bf15      	itete	ne
 80066b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80066b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066ba:	81a3      	strheq	r3, [r4, #12]
 80066bc:	bf18      	it	ne
 80066be:	81a3      	strhne	r3, [r4, #12]
 80066c0:	bd10      	pop	{r4, pc}

080066c2 <__sclose>:
 80066c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c6:	f000 b813 	b.w	80066f0 <_close_r>
	...

080066cc <_write_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	4d07      	ldr	r5, [pc, #28]	; (80066ec <_write_r+0x20>)
 80066d0:	4604      	mov	r4, r0
 80066d2:	4608      	mov	r0, r1
 80066d4:	4611      	mov	r1, r2
 80066d6:	2200      	movs	r2, #0
 80066d8:	602a      	str	r2, [r5, #0]
 80066da:	461a      	mov	r2, r3
 80066dc:	f7fa fb97 	bl	8000e0e <_write>
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	d102      	bne.n	80066ea <_write_r+0x1e>
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	b103      	cbz	r3, 80066ea <_write_r+0x1e>
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	bd38      	pop	{r3, r4, r5, pc}
 80066ec:	200018f4 	.word	0x200018f4

080066f0 <_close_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4d06      	ldr	r5, [pc, #24]	; (800670c <_close_r+0x1c>)
 80066f4:	2300      	movs	r3, #0
 80066f6:	4604      	mov	r4, r0
 80066f8:	4608      	mov	r0, r1
 80066fa:	602b      	str	r3, [r5, #0]
 80066fc:	f7fa fba3 	bl	8000e46 <_close>
 8006700:	1c43      	adds	r3, r0, #1
 8006702:	d102      	bne.n	800670a <_close_r+0x1a>
 8006704:	682b      	ldr	r3, [r5, #0]
 8006706:	b103      	cbz	r3, 800670a <_close_r+0x1a>
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	bd38      	pop	{r3, r4, r5, pc}
 800670c:	200018f4 	.word	0x200018f4

08006710 <_fstat_r>:
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	4d07      	ldr	r5, [pc, #28]	; (8006730 <_fstat_r+0x20>)
 8006714:	2300      	movs	r3, #0
 8006716:	4604      	mov	r4, r0
 8006718:	4608      	mov	r0, r1
 800671a:	4611      	mov	r1, r2
 800671c:	602b      	str	r3, [r5, #0]
 800671e:	f7fa fb9e 	bl	8000e5e <_fstat>
 8006722:	1c43      	adds	r3, r0, #1
 8006724:	d102      	bne.n	800672c <_fstat_r+0x1c>
 8006726:	682b      	ldr	r3, [r5, #0]
 8006728:	b103      	cbz	r3, 800672c <_fstat_r+0x1c>
 800672a:	6023      	str	r3, [r4, #0]
 800672c:	bd38      	pop	{r3, r4, r5, pc}
 800672e:	bf00      	nop
 8006730:	200018f4 	.word	0x200018f4

08006734 <_isatty_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4d06      	ldr	r5, [pc, #24]	; (8006750 <_isatty_r+0x1c>)
 8006738:	2300      	movs	r3, #0
 800673a:	4604      	mov	r4, r0
 800673c:	4608      	mov	r0, r1
 800673e:	602b      	str	r3, [r5, #0]
 8006740:	f7fa fb9d 	bl	8000e7e <_isatty>
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	d102      	bne.n	800674e <_isatty_r+0x1a>
 8006748:	682b      	ldr	r3, [r5, #0]
 800674a:	b103      	cbz	r3, 800674e <_isatty_r+0x1a>
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	bd38      	pop	{r3, r4, r5, pc}
 8006750:	200018f4 	.word	0x200018f4

08006754 <_lseek_r>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	4d07      	ldr	r5, [pc, #28]	; (8006774 <_lseek_r+0x20>)
 8006758:	4604      	mov	r4, r0
 800675a:	4608      	mov	r0, r1
 800675c:	4611      	mov	r1, r2
 800675e:	2200      	movs	r2, #0
 8006760:	602a      	str	r2, [r5, #0]
 8006762:	461a      	mov	r2, r3
 8006764:	f7fa fb96 	bl	8000e94 <_lseek>
 8006768:	1c43      	adds	r3, r0, #1
 800676a:	d102      	bne.n	8006772 <_lseek_r+0x1e>
 800676c:	682b      	ldr	r3, [r5, #0]
 800676e:	b103      	cbz	r3, 8006772 <_lseek_r+0x1e>
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	bd38      	pop	{r3, r4, r5, pc}
 8006774:	200018f4 	.word	0x200018f4

08006778 <__malloc_lock>:
 8006778:	4801      	ldr	r0, [pc, #4]	; (8006780 <__malloc_lock+0x8>)
 800677a:	f7ff bacd 	b.w	8005d18 <__retarget_lock_acquire_recursive>
 800677e:	bf00      	nop
 8006780:	200018e8 	.word	0x200018e8

08006784 <__malloc_unlock>:
 8006784:	4801      	ldr	r0, [pc, #4]	; (800678c <__malloc_unlock+0x8>)
 8006786:	f7ff bac8 	b.w	8005d1a <__retarget_lock_release_recursive>
 800678a:	bf00      	nop
 800678c:	200018e8 	.word	0x200018e8

08006790 <_read_r>:
 8006790:	b538      	push	{r3, r4, r5, lr}
 8006792:	4d07      	ldr	r5, [pc, #28]	; (80067b0 <_read_r+0x20>)
 8006794:	4604      	mov	r4, r0
 8006796:	4608      	mov	r0, r1
 8006798:	4611      	mov	r1, r2
 800679a:	2200      	movs	r2, #0
 800679c:	602a      	str	r2, [r5, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	f7fa fb18 	bl	8000dd4 <_read>
 80067a4:	1c43      	adds	r3, r0, #1
 80067a6:	d102      	bne.n	80067ae <_read_r+0x1e>
 80067a8:	682b      	ldr	r3, [r5, #0]
 80067aa:	b103      	cbz	r3, 80067ae <_read_r+0x1e>
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	bd38      	pop	{r3, r4, r5, pc}
 80067b0:	200018f4 	.word	0x200018f4

080067b4 <_init>:
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b6:	bf00      	nop
 80067b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ba:	bc08      	pop	{r3}
 80067bc:	469e      	mov	lr, r3
 80067be:	4770      	bx	lr

080067c0 <_fini>:
 80067c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c2:	bf00      	nop
 80067c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c6:	bc08      	pop	{r3}
 80067c8:	469e      	mov	lr, r3
 80067ca:	4770      	bx	lr
